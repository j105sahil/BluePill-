
USART_USART_RS485_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f78  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20400000  00402f78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008d8  2040084c  004037c4  0002084c  2**2
                  ALLOC
  3 .stack        00002004  20401124  0040409c  0002084c  2**0
                  ALLOC
  4 .heap         00000200  20403128  004060a0  0002084c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000130eb  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002870  00000000  00000000  000339be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003f1e  00000000  00000000  0003622e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009a0  00000000  00000000  0003a14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009f8  00000000  00000000  0003aaec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f2da  00000000  00000000  0003b4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000a334  00000000  00000000  0005a7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091b97  00000000  00000000  00064af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001e54  00000000  00000000  000f668c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 31 40 20 39 08 40 00 37 08 40 00 37 08 40 00     (1@ 9.@.7.@.7.@.
  400010:	37 08 40 00 37 08 40 00 37 08 40 00 00 00 00 00     7.@.7.@.7.@.....
	...
  40002c:	37 08 40 00 37 08 40 00 00 00 00 00 37 08 40 00     7.@.7.@.....7.@.
  40003c:	b5 0c 40 00 37 08 40 00 37 08 40 00 37 08 40 00     ..@.7.@.7.@.7.@.
  40004c:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  40005c:	37 08 40 00 37 08 40 00 00 00 00 00 25 05 40 00     7.@.7.@.....%.@.
  40006c:	39 05 40 00 4d 05 40 00 c5 0c 40 00 37 08 40 00     9.@.M.@...@.7.@.
  40007c:	37 08 40 00 61 05 40 00 75 05 40 00 37 08 40 00     7.@.a.@.u.@.7.@.
  40008c:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  40009c:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  4000ac:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  4000bc:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  4000cc:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  4000dc:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  4000ec:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  4000fc:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  40010c:	37 08 40 00 37 08 40 00 00 00 00 00 00 00 00 00     7.@.7.@.........
  40011c:	00 00 00 00 37 08 40 00 37 08 40 00 37 08 40 00     ....7.@.7.@.7.@.
  40012c:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  40013c:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  40014c:	37 08 40 00 37 08 40 00 37 08 40 00 37 08 40 00     7.@.7.@.7.@.7.@.
  40015c:	37 08 40 00 37 08 40 00 37 08 40 00                 7.@.7.@.7.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040084c 	.word	0x2040084c
  400184:	00000000 	.word	0x00000000
  400188:	00402f78 	.word	0x00402f78

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00402f78 	.word	0x00402f78
  4001c8:	20400850 	.word	0x20400850
  4001cc:	00402f78 	.word	0x00402f78
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40020e:	480d      	ldr	r0, [pc, #52]	; (400244 <sysclk_init+0x70>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	07270e00 	.word	0x07270e00
  40021c:	00400a0d 	.word	0x00400a0d
  400220:	00400625 	.word	0x00400625
  400224:	00400679 	.word	0x00400679
  400228:	00400689 	.word	0x00400689
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400699 	.word	0x00400699
  400238:	00400589 	.word	0x00400589
  40023c:	004005c1 	.word	0x004005c1
  400240:	00400901 	.word	0x00400901
  400244:	11e1a300 	.word	0x11e1a300

00400248 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40024c:	b980      	cbnz	r0, 400270 <_read+0x28>
  40024e:	460c      	mov	r4, r1
  400250:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400252:	2a00      	cmp	r2, #0
  400254:	dd0f      	ble.n	400276 <_read+0x2e>
  400256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400258:	4e08      	ldr	r6, [pc, #32]	; (40027c <_read+0x34>)
  40025a:	4d09      	ldr	r5, [pc, #36]	; (400280 <_read+0x38>)
  40025c:	6830      	ldr	r0, [r6, #0]
  40025e:	4621      	mov	r1, r4
  400260:	682b      	ldr	r3, [r5, #0]
  400262:	4798      	blx	r3
		ptr++;
  400264:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400266:	42bc      	cmp	r4, r7
  400268:	d1f8      	bne.n	40025c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40026a:	4640      	mov	r0, r8
  40026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400270:	f04f 38ff 	mov.w	r8, #4294967295
  400274:	e7f9      	b.n	40026a <_read+0x22>
	for (; len > 0; --len) {
  400276:	4680      	mov	r8, r0
  400278:	e7f7      	b.n	40026a <_read+0x22>
  40027a:	bf00      	nop
  40027c:	20400924 	.word	0x20400924
  400280:	2040091c 	.word	0x2040091c

00400284 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400284:	3801      	subs	r0, #1
  400286:	2802      	cmp	r0, #2
  400288:	d815      	bhi.n	4002b6 <_write+0x32>
{
  40028a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028e:	460e      	mov	r6, r1
  400290:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400292:	b19a      	cbz	r2, 4002bc <_write+0x38>
  400294:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400296:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002d0 <_write+0x4c>
  40029a:	4f0c      	ldr	r7, [pc, #48]	; (4002cc <_write+0x48>)
  40029c:	f8d8 0000 	ldr.w	r0, [r8]
  4002a0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a4:	683b      	ldr	r3, [r7, #0]
  4002a6:	4798      	blx	r3
  4002a8:	2800      	cmp	r0, #0
  4002aa:	db0a      	blt.n	4002c2 <_write+0x3e>
  4002ac:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ae:	3c01      	subs	r4, #1
  4002b0:	d1f4      	bne.n	40029c <_write+0x18>
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b6:	f04f 30ff 	mov.w	r0, #4294967295
  4002ba:	4770      	bx	lr
	for (; len != 0; --len) {
  4002bc:	4610      	mov	r0, r2
  4002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002c2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ca:	bf00      	nop
  4002cc:	20400920 	.word	0x20400920
  4002d0:	20400924 	.word	0x20400924

004002d4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002da:	4b74      	ldr	r3, [pc, #464]	; (4004ac <board_init+0x1d8>)
  4002dc:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002e2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002e6:	4b72      	ldr	r3, [pc, #456]	; (4004b0 <board_init+0x1dc>)
  4002e8:	2200      	movs	r2, #0
  4002ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002ee:	695a      	ldr	r2, [r3, #20]
  4002f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4002f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002fa:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002fe:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400302:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400306:	f007 0007 	and.w	r0, r7, #7
  40030a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  40030c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400310:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400314:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400318:	f3bf 8f4f 	dsb	sy
  40031c:	f04f 34ff 	mov.w	r4, #4294967295
  400320:	fa04 fc00 	lsl.w	ip, r4, r0
  400324:	fa06 f000 	lsl.w	r0, r6, r0
  400328:	fa04 f40e 	lsl.w	r4, r4, lr
  40032c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400330:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400332:	463a      	mov	r2, r7
  400334:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400336:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40033a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40033e:	3a01      	subs	r2, #1
  400340:	4423      	add	r3, r4
  400342:	f1b2 3fff 	cmp.w	r2, #4294967295
  400346:	d1f6      	bne.n	400336 <board_init+0x62>
        } while(sets--);
  400348:	3e01      	subs	r6, #1
  40034a:	4460      	add	r0, ip
  40034c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400350:	d1ef      	bne.n	400332 <board_init+0x5e>
  400352:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400356:	4b56      	ldr	r3, [pc, #344]	; (4004b0 <board_init+0x1dc>)
  400358:	695a      	ldr	r2, [r3, #20]
  40035a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40035e:	615a      	str	r2, [r3, #20]
  400360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400364:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400368:	4a52      	ldr	r2, [pc, #328]	; (4004b4 <board_init+0x1e0>)
  40036a:	4953      	ldr	r1, [pc, #332]	; (4004b8 <board_init+0x1e4>)
  40036c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40036e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400372:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400378:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40037c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400380:	f022 0201 	bic.w	r2, r2, #1
  400384:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400388:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40038c:	f022 0201 	bic.w	r2, r2, #1
  400390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400398:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40039c:	200a      	movs	r0, #10
  40039e:	4c47      	ldr	r4, [pc, #284]	; (4004bc <board_init+0x1e8>)
  4003a0:	47a0      	blx	r4
  4003a2:	200b      	movs	r0, #11
  4003a4:	47a0      	blx	r4
  4003a6:	200c      	movs	r0, #12
  4003a8:	47a0      	blx	r4
  4003aa:	2010      	movs	r0, #16
  4003ac:	47a0      	blx	r4
  4003ae:	2011      	movs	r0, #17
  4003b0:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003b2:	4b43      	ldr	r3, [pc, #268]	; (4004c0 <board_init+0x1ec>)
  4003b4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003b8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003be:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003c8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003ce:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003d6:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003de:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003ea:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003fc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400402:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400404:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40040a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40040c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400410:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400412:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400414:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400418:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40041a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40041c:	4a29      	ldr	r2, [pc, #164]	; (4004c4 <board_init+0x1f0>)
  40041e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400422:	f043 0310 	orr.w	r3, r3, #16
  400426:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  40042a:	4b27      	ldr	r3, [pc, #156]	; (4004c8 <board_init+0x1f4>)
  40042c:	2210      	movs	r2, #16
  40042e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400434:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400436:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40043c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40043e:	4311      	orrs	r1, r2
  400440:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400442:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400444:	4311      	orrs	r1, r2
  400446:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400448:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40044a:	2201      	movs	r2, #1
  40044c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40044e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400452:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400454:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40045a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40045c:	f021 0101 	bic.w	r1, r1, #1
  400460:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400462:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400464:	4311      	orrs	r1, r2
  400466:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400468:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40046a:	2202      	movs	r2, #2
  40046c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40046e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400472:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400474:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40047a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40047c:	f021 0102 	bic.w	r1, r1, #2
  400480:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400482:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400484:	4311      	orrs	r1, r2
  400486:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400488:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40048a:	2208      	movs	r2, #8
  40048c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40048e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400492:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400494:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40049a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40049c:	f021 0108 	bic.w	r1, r1, #8
  4004a0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004a2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004a4:	4311      	orrs	r1, r2
  4004a6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004a8:	605a      	str	r2, [r3, #4]
  4004aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004ac:	400e1850 	.word	0x400e1850
  4004b0:	e000ed00 	.word	0xe000ed00
  4004b4:	400e0c00 	.word	0x400e0c00
  4004b8:	5a00080c 	.word	0x5a00080c
  4004bc:	004006a9 	.word	0x004006a9
  4004c0:	400e1200 	.word	0x400e1200
  4004c4:	40088000 	.word	0x40088000
  4004c8:	400e1000 	.word	0x400e1000

004004cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004ce:	4770      	bx	lr

004004d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004d2:	4770      	bx	lr

004004d4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004d8:	4604      	mov	r4, r0
  4004da:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <pio_handler_process+0x44>)
  4004de:	4798      	blx	r3
  4004e0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4004e2:	4620      	mov	r0, r4
  4004e4:	4b0d      	ldr	r3, [pc, #52]	; (40051c <pio_handler_process+0x48>)
  4004e6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4004e8:	4005      	ands	r5, r0
  4004ea:	d013      	beq.n	400514 <pio_handler_process+0x40>
  4004ec:	4c0c      	ldr	r4, [pc, #48]	; (400520 <pio_handler_process+0x4c>)
  4004ee:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4004f2:	e003      	b.n	4004fc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4004f4:	42b4      	cmp	r4, r6
  4004f6:	d00d      	beq.n	400514 <pio_handler_process+0x40>
  4004f8:	3410      	adds	r4, #16
		while (status != 0) {
  4004fa:	b15d      	cbz	r5, 400514 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4004fc:	6820      	ldr	r0, [r4, #0]
  4004fe:	4540      	cmp	r0, r8
  400500:	d1f8      	bne.n	4004f4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400502:	6861      	ldr	r1, [r4, #4]
  400504:	4229      	tst	r1, r5
  400506:	d0f5      	beq.n	4004f4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400508:	68e3      	ldr	r3, [r4, #12]
  40050a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40050c:	6863      	ldr	r3, [r4, #4]
  40050e:	ea25 0503 	bic.w	r5, r5, r3
  400512:	e7ef      	b.n	4004f4 <pio_handler_process+0x20>
  400514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400518:	004004cd 	.word	0x004004cd
  40051c:	004004d1 	.word	0x004004d1
  400520:	20400868 	.word	0x20400868

00400524 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400524:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400526:	210a      	movs	r1, #10
  400528:	4801      	ldr	r0, [pc, #4]	; (400530 <PIOA_Handler+0xc>)
  40052a:	4b02      	ldr	r3, [pc, #8]	; (400534 <PIOA_Handler+0x10>)
  40052c:	4798      	blx	r3
  40052e:	bd08      	pop	{r3, pc}
  400530:	400e0e00 	.word	0x400e0e00
  400534:	004004d5 	.word	0x004004d5

00400538 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400538:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40053a:	210b      	movs	r1, #11
  40053c:	4801      	ldr	r0, [pc, #4]	; (400544 <PIOB_Handler+0xc>)
  40053e:	4b02      	ldr	r3, [pc, #8]	; (400548 <PIOB_Handler+0x10>)
  400540:	4798      	blx	r3
  400542:	bd08      	pop	{r3, pc}
  400544:	400e1000 	.word	0x400e1000
  400548:	004004d5 	.word	0x004004d5

0040054c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40054c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40054e:	210c      	movs	r1, #12
  400550:	4801      	ldr	r0, [pc, #4]	; (400558 <PIOC_Handler+0xc>)
  400552:	4b02      	ldr	r3, [pc, #8]	; (40055c <PIOC_Handler+0x10>)
  400554:	4798      	blx	r3
  400556:	bd08      	pop	{r3, pc}
  400558:	400e1200 	.word	0x400e1200
  40055c:	004004d5 	.word	0x004004d5

00400560 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400560:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400562:	2110      	movs	r1, #16
  400564:	4801      	ldr	r0, [pc, #4]	; (40056c <PIOD_Handler+0xc>)
  400566:	4b02      	ldr	r3, [pc, #8]	; (400570 <PIOD_Handler+0x10>)
  400568:	4798      	blx	r3
  40056a:	bd08      	pop	{r3, pc}
  40056c:	400e1400 	.word	0x400e1400
  400570:	004004d5 	.word	0x004004d5

00400574 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400574:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400576:	2111      	movs	r1, #17
  400578:	4801      	ldr	r0, [pc, #4]	; (400580 <PIOE_Handler+0xc>)
  40057a:	4b02      	ldr	r3, [pc, #8]	; (400584 <PIOE_Handler+0x10>)
  40057c:	4798      	blx	r3
  40057e:	bd08      	pop	{r3, pc}
  400580:	400e1600 	.word	0x400e1600
  400584:	004004d5 	.word	0x004004d5

00400588 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400588:	2803      	cmp	r0, #3
  40058a:	d011      	beq.n	4005b0 <pmc_mck_set_division+0x28>
  40058c:	2804      	cmp	r0, #4
  40058e:	d012      	beq.n	4005b6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400590:	2802      	cmp	r0, #2
  400592:	bf0c      	ite	eq
  400594:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400598:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40059a:	4a08      	ldr	r2, [pc, #32]	; (4005bc <pmc_mck_set_division+0x34>)
  40059c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40059e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4005a2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4005a4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4005a6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005a8:	f013 0f08 	tst.w	r3, #8
  4005ac:	d0fb      	beq.n	4005a6 <pmc_mck_set_division+0x1e>
}
  4005ae:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4005b0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4005b4:	e7f1      	b.n	40059a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4005ba:	e7ee      	b.n	40059a <pmc_mck_set_division+0x12>
  4005bc:	400e0600 	.word	0x400e0600

004005c0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005c0:	4a17      	ldr	r2, [pc, #92]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  4005c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005c8:	4318      	orrs	r0, r3
  4005ca:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005ce:	f013 0f08 	tst.w	r3, #8
  4005d2:	d10a      	bne.n	4005ea <pmc_switch_mck_to_pllack+0x2a>
  4005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005d8:	4911      	ldr	r1, [pc, #68]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  4005da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005dc:	f012 0f08 	tst.w	r2, #8
  4005e0:	d103      	bne.n	4005ea <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005e2:	3b01      	subs	r3, #1
  4005e4:	d1f9      	bne.n	4005da <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4005e6:	2001      	movs	r0, #1
  4005e8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005ea:	4a0d      	ldr	r2, [pc, #52]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  4005ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005ee:	f023 0303 	bic.w	r3, r3, #3
  4005f2:	f043 0302 	orr.w	r3, r3, #2
  4005f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005fa:	f013 0f08 	tst.w	r3, #8
  4005fe:	d10a      	bne.n	400616 <pmc_switch_mck_to_pllack+0x56>
  400600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400604:	4906      	ldr	r1, [pc, #24]	; (400620 <pmc_switch_mck_to_pllack+0x60>)
  400606:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400608:	f012 0f08 	tst.w	r2, #8
  40060c:	d105      	bne.n	40061a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40060e:	3b01      	subs	r3, #1
  400610:	d1f9      	bne.n	400606 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400612:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400614:	4770      	bx	lr
	return 0;
  400616:	2000      	movs	r0, #0
  400618:	4770      	bx	lr
  40061a:	2000      	movs	r0, #0
  40061c:	4770      	bx	lr
  40061e:	bf00      	nop
  400620:	400e0600 	.word	0x400e0600

00400624 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400624:	b9a0      	cbnz	r0, 400650 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400626:	480e      	ldr	r0, [pc, #56]	; (400660 <pmc_switch_mainck_to_xtal+0x3c>)
  400628:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40062a:	0209      	lsls	r1, r1, #8
  40062c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40062e:	4a0d      	ldr	r2, [pc, #52]	; (400664 <pmc_switch_mainck_to_xtal+0x40>)
  400630:	401a      	ands	r2, r3
  400632:	4b0d      	ldr	r3, [pc, #52]	; (400668 <pmc_switch_mainck_to_xtal+0x44>)
  400634:	4313      	orrs	r3, r2
  400636:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400638:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40063a:	4602      	mov	r2, r0
  40063c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40063e:	f013 0f01 	tst.w	r3, #1
  400642:	d0fb      	beq.n	40063c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400644:	4a06      	ldr	r2, [pc, #24]	; (400660 <pmc_switch_mainck_to_xtal+0x3c>)
  400646:	6a11      	ldr	r1, [r2, #32]
  400648:	4b08      	ldr	r3, [pc, #32]	; (40066c <pmc_switch_mainck_to_xtal+0x48>)
  40064a:	430b      	orrs	r3, r1
  40064c:	6213      	str	r3, [r2, #32]
  40064e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400650:	4903      	ldr	r1, [pc, #12]	; (400660 <pmc_switch_mainck_to_xtal+0x3c>)
  400652:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400654:	4a06      	ldr	r2, [pc, #24]	; (400670 <pmc_switch_mainck_to_xtal+0x4c>)
  400656:	401a      	ands	r2, r3
  400658:	4b06      	ldr	r3, [pc, #24]	; (400674 <pmc_switch_mainck_to_xtal+0x50>)
  40065a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40065c:	620b      	str	r3, [r1, #32]
  40065e:	4770      	bx	lr
  400660:	400e0600 	.word	0x400e0600
  400664:	ffc8fffc 	.word	0xffc8fffc
  400668:	00370001 	.word	0x00370001
  40066c:	01370000 	.word	0x01370000
  400670:	fec8fffc 	.word	0xfec8fffc
  400674:	01370002 	.word	0x01370002

00400678 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400678:	4b02      	ldr	r3, [pc, #8]	; (400684 <pmc_osc_is_ready_mainck+0xc>)
  40067a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40067c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400680:	4770      	bx	lr
  400682:	bf00      	nop
  400684:	400e0600 	.word	0x400e0600

00400688 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40068c:	4b01      	ldr	r3, [pc, #4]	; (400694 <pmc_disable_pllack+0xc>)
  40068e:	629a      	str	r2, [r3, #40]	; 0x28
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600

00400698 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400698:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <pmc_is_locked_pllack+0xc>)
  40069a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40069c:	f000 0002 	and.w	r0, r0, #2
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop
  4006a4:	400e0600 	.word	0x400e0600

004006a8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4006a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4006ac:	4b05      	ldr	r3, [pc, #20]	; (4006c4 <pmc_enable_periph_clk+0x1c>)
  4006ae:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4006b2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4006b6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4006ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4006be:	2000      	movs	r0, #0
  4006c0:	4770      	bx	lr
  4006c2:	bf00      	nop
  4006c4:	400e0600 	.word	0x400e0600

004006c8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4006c8:	6943      	ldr	r3, [r0, #20]
  4006ca:	f013 0f02 	tst.w	r3, #2
  4006ce:	d002      	beq.n	4006d6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4006d0:	61c1      	str	r1, [r0, #28]
	return 0;
  4006d2:	2000      	movs	r0, #0
  4006d4:	4770      	bx	lr
		return 1;
  4006d6:	2001      	movs	r0, #1
}
  4006d8:	4770      	bx	lr

004006da <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4006da:	6943      	ldr	r3, [r0, #20]
  4006dc:	f013 0f01 	tst.w	r3, #1
  4006e0:	d003      	beq.n	4006ea <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4006e2:	6983      	ldr	r3, [r0, #24]
  4006e4:	700b      	strb	r3, [r1, #0]
	return 0;
  4006e6:	2000      	movs	r0, #0
  4006e8:	4770      	bx	lr
		return 1;
  4006ea:	2001      	movs	r0, #1
}
  4006ec:	4770      	bx	lr

004006ee <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4006ee:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4006f0:	010b      	lsls	r3, r1, #4
  4006f2:	4293      	cmp	r3, r2
  4006f4:	d914      	bls.n	400720 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4006f6:	00c9      	lsls	r1, r1, #3
  4006f8:	084b      	lsrs	r3, r1, #1
  4006fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4006fe:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400702:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400704:	1e5c      	subs	r4, r3, #1
  400706:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40070a:	428c      	cmp	r4, r1
  40070c:	d901      	bls.n	400712 <usart_set_async_baudrate+0x24>
		return 1;
  40070e:	2001      	movs	r0, #1
  400710:	e017      	b.n	400742 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400712:	6841      	ldr	r1, [r0, #4]
  400714:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400718:	6041      	str	r1, [r0, #4]
  40071a:	e00c      	b.n	400736 <usart_set_async_baudrate+0x48>
		return 1;
  40071c:	2001      	movs	r0, #1
  40071e:	e010      	b.n	400742 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400720:	0859      	lsrs	r1, r3, #1
  400722:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400726:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40072a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40072c:	1e5c      	subs	r4, r3, #1
  40072e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400732:	428c      	cmp	r4, r1
  400734:	d8f2      	bhi.n	40071c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400736:	0412      	lsls	r2, r2, #16
  400738:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40073c:	431a      	orrs	r2, r3
  40073e:	6202      	str	r2, [r0, #32]

	return 0;
  400740:	2000      	movs	r0, #0
}
  400742:	f85d 4b04 	ldr.w	r4, [sp], #4
  400746:	4770      	bx	lr

00400748 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400748:	4b08      	ldr	r3, [pc, #32]	; (40076c <usart_reset+0x24>)
  40074a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40074e:	2300      	movs	r3, #0
  400750:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400752:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400754:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400756:	2388      	movs	r3, #136	; 0x88
  400758:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40075a:	2324      	movs	r3, #36	; 0x24
  40075c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40075e:	f44f 7380 	mov.w	r3, #256	; 0x100
  400762:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400768:	6003      	str	r3, [r0, #0]
  40076a:	4770      	bx	lr
  40076c:	55534100 	.word	0x55534100

00400770 <usart_init_rs232>:
{
  400770:	b570      	push	{r4, r5, r6, lr}
  400772:	4605      	mov	r5, r0
  400774:	460c      	mov	r4, r1
  400776:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400778:	4b0f      	ldr	r3, [pc, #60]	; (4007b8 <usart_init_rs232+0x48>)
  40077a:	4798      	blx	r3
	ul_reg_val = 0;
  40077c:	2200      	movs	r2, #0
  40077e:	4b0f      	ldr	r3, [pc, #60]	; (4007bc <usart_init_rs232+0x4c>)
  400780:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400782:	b1a4      	cbz	r4, 4007ae <usart_init_rs232+0x3e>
  400784:	4632      	mov	r2, r6
  400786:	6821      	ldr	r1, [r4, #0]
  400788:	4628      	mov	r0, r5
  40078a:	4b0d      	ldr	r3, [pc, #52]	; (4007c0 <usart_init_rs232+0x50>)
  40078c:	4798      	blx	r3
  40078e:	4602      	mov	r2, r0
  400790:	b978      	cbnz	r0, 4007b2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400792:	6863      	ldr	r3, [r4, #4]
  400794:	68a1      	ldr	r1, [r4, #8]
  400796:	430b      	orrs	r3, r1
  400798:	6921      	ldr	r1, [r4, #16]
  40079a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40079c:	68e1      	ldr	r1, [r4, #12]
  40079e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007a0:	4906      	ldr	r1, [pc, #24]	; (4007bc <usart_init_rs232+0x4c>)
  4007a2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4007a4:	6869      	ldr	r1, [r5, #4]
  4007a6:	430b      	orrs	r3, r1
  4007a8:	606b      	str	r3, [r5, #4]
}
  4007aa:	4610      	mov	r0, r2
  4007ac:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4007ae:	2201      	movs	r2, #1
  4007b0:	e7fb      	b.n	4007aa <usart_init_rs232+0x3a>
  4007b2:	2201      	movs	r2, #1
  4007b4:	e7f9      	b.n	4007aa <usart_init_rs232+0x3a>
  4007b6:	bf00      	nop
  4007b8:	00400749 	.word	0x00400749
  4007bc:	204008d8 	.word	0x204008d8
  4007c0:	004006ef 	.word	0x004006ef

004007c4 <usart_init_rs485>:
{
  4007c4:	b510      	push	{r4, lr}
  4007c6:	4604      	mov	r4, r0
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  4007c8:	4b06      	ldr	r3, [pc, #24]	; (4007e4 <usart_init_rs485+0x20>)
  4007ca:	4798      	blx	r3
  4007cc:	b940      	cbnz	r0, 4007e0 <usart_init_rs485+0x1c>
  4007ce:	4602      	mov	r2, r0
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  4007d0:	6863      	ldr	r3, [r4, #4]
  4007d2:	f023 030f 	bic.w	r3, r3, #15
  4007d6:	f043 0301 	orr.w	r3, r3, #1
  4007da:	6063      	str	r3, [r4, #4]
}
  4007dc:	4610      	mov	r0, r2
  4007de:	bd10      	pop	{r4, pc}
		return 1;
  4007e0:	2201      	movs	r2, #1
  4007e2:	e7fb      	b.n	4007dc <usart_init_rs485+0x18>
  4007e4:	00400771 	.word	0x00400771

004007e8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4007e8:	2340      	movs	r3, #64	; 0x40
  4007ea:	6003      	str	r3, [r0, #0]
  4007ec:	4770      	bx	lr

004007ee <usart_set_tx_timeguard>:
	p_usart->US_TTGR = timeguard;
  4007ee:	6281      	str	r1, [r0, #40]	; 0x28
  4007f0:	4770      	bx	lr

004007f2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4007f2:	2310      	movs	r3, #16
  4007f4:	6003      	str	r3, [r0, #0]
  4007f6:	4770      	bx	lr

004007f8 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
  4007f8:	60c1      	str	r1, [r0, #12]
  4007fa:	4770      	bx	lr

004007fc <usart_get_status>:
	return p_usart->US_CSR;
  4007fc:	6940      	ldr	r0, [r0, #20]
}
  4007fe:	4770      	bx	lr

00400800 <usart_is_rx_ready>:
	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
  400800:	6940      	ldr	r0, [r0, #20]
}
  400802:	f000 0001 	and.w	r0, r0, #1
  400806:	4770      	bx	lr

00400808 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400808:	6943      	ldr	r3, [r0, #20]
  40080a:	f013 0f02 	tst.w	r3, #2
  40080e:	d004      	beq.n	40081a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400810:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400814:	61c1      	str	r1, [r0, #28]
	return 0;
  400816:	2000      	movs	r0, #0
  400818:	4770      	bx	lr
		return 1;
  40081a:	2001      	movs	r0, #1
}
  40081c:	4770      	bx	lr

0040081e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40081e:	6943      	ldr	r3, [r0, #20]
  400820:	f013 0f01 	tst.w	r3, #1
  400824:	d005      	beq.n	400832 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400826:	6983      	ldr	r3, [r0, #24]
  400828:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40082c:	600b      	str	r3, [r1, #0]
	return 0;
  40082e:	2000      	movs	r0, #0
  400830:	4770      	bx	lr
		return 1;
  400832:	2001      	movs	r0, #1
}
  400834:	4770      	bx	lr

00400836 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400836:	e7fe      	b.n	400836 <Dummy_Handler>

00400838 <Reset_Handler>:
{
  400838:	b500      	push	{lr}
  40083a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40083c:	4b25      	ldr	r3, [pc, #148]	; (4008d4 <Reset_Handler+0x9c>)
  40083e:	4a26      	ldr	r2, [pc, #152]	; (4008d8 <Reset_Handler+0xa0>)
  400840:	429a      	cmp	r2, r3
  400842:	d010      	beq.n	400866 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400844:	4b25      	ldr	r3, [pc, #148]	; (4008dc <Reset_Handler+0xa4>)
  400846:	4a23      	ldr	r2, [pc, #140]	; (4008d4 <Reset_Handler+0x9c>)
  400848:	429a      	cmp	r2, r3
  40084a:	d20c      	bcs.n	400866 <Reset_Handler+0x2e>
  40084c:	3b01      	subs	r3, #1
  40084e:	1a9b      	subs	r3, r3, r2
  400850:	f023 0303 	bic.w	r3, r3, #3
  400854:	3304      	adds	r3, #4
  400856:	4413      	add	r3, r2
  400858:	491f      	ldr	r1, [pc, #124]	; (4008d8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40085a:	f851 0b04 	ldr.w	r0, [r1], #4
  40085e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400862:	429a      	cmp	r2, r3
  400864:	d1f9      	bne.n	40085a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400866:	4b1e      	ldr	r3, [pc, #120]	; (4008e0 <Reset_Handler+0xa8>)
  400868:	4a1e      	ldr	r2, [pc, #120]	; (4008e4 <Reset_Handler+0xac>)
  40086a:	429a      	cmp	r2, r3
  40086c:	d20a      	bcs.n	400884 <Reset_Handler+0x4c>
  40086e:	3b01      	subs	r3, #1
  400870:	1a9b      	subs	r3, r3, r2
  400872:	f023 0303 	bic.w	r3, r3, #3
  400876:	3304      	adds	r3, #4
  400878:	4413      	add	r3, r2
                *pDest++ = 0;
  40087a:	2100      	movs	r1, #0
  40087c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400880:	4293      	cmp	r3, r2
  400882:	d1fb      	bne.n	40087c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400884:	4a18      	ldr	r2, [pc, #96]	; (4008e8 <Reset_Handler+0xb0>)
  400886:	4b19      	ldr	r3, [pc, #100]	; (4008ec <Reset_Handler+0xb4>)
  400888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40088c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40088e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400892:	fab3 f383 	clz	r3, r3
  400896:	095b      	lsrs	r3, r3, #5
  400898:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40089a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40089c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008a0:	2200      	movs	r2, #0
  4008a2:	4b13      	ldr	r3, [pc, #76]	; (4008f0 <Reset_Handler+0xb8>)
  4008a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4008a6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008a8:	4a12      	ldr	r2, [pc, #72]	; (4008f4 <Reset_Handler+0xbc>)
  4008aa:	6813      	ldr	r3, [r2, #0]
  4008ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4008b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008b6:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008ba:	b129      	cbz	r1, 4008c8 <Reset_Handler+0x90>
		cpu_irq_enable();
  4008bc:	2201      	movs	r2, #1
  4008be:	4b0c      	ldr	r3, [pc, #48]	; (4008f0 <Reset_Handler+0xb8>)
  4008c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4008c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008c6:	b662      	cpsie	i
        __libc_init_array();
  4008c8:	4b0b      	ldr	r3, [pc, #44]	; (4008f8 <Reset_Handler+0xc0>)
  4008ca:	4798      	blx	r3
        main();
  4008cc:	4b0b      	ldr	r3, [pc, #44]	; (4008fc <Reset_Handler+0xc4>)
  4008ce:	4798      	blx	r3
  4008d0:	e7fe      	b.n	4008d0 <Reset_Handler+0x98>
  4008d2:	bf00      	nop
  4008d4:	20400000 	.word	0x20400000
  4008d8:	00402f78 	.word	0x00402f78
  4008dc:	2040084c 	.word	0x2040084c
  4008e0:	20401124 	.word	0x20401124
  4008e4:	2040084c 	.word	0x2040084c
  4008e8:	e000ed00 	.word	0xe000ed00
  4008ec:	00400000 	.word	0x00400000
  4008f0:	20400000 	.word	0x20400000
  4008f4:	e000ed88 	.word	0xe000ed88
  4008f8:	00400fbd 	.word	0x00400fbd
  4008fc:	00400d49 	.word	0x00400d49

00400900 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400900:	4b3b      	ldr	r3, [pc, #236]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  400902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400904:	f003 0303 	and.w	r3, r3, #3
  400908:	2b01      	cmp	r3, #1
  40090a:	d01d      	beq.n	400948 <SystemCoreClockUpdate+0x48>
  40090c:	b183      	cbz	r3, 400930 <SystemCoreClockUpdate+0x30>
  40090e:	2b02      	cmp	r3, #2
  400910:	d036      	beq.n	400980 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400912:	4b37      	ldr	r3, [pc, #220]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  400914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400916:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40091a:	2b70      	cmp	r3, #112	; 0x70
  40091c:	d05f      	beq.n	4009de <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40091e:	4b34      	ldr	r3, [pc, #208]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  400920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400922:	4934      	ldr	r1, [pc, #208]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  400924:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400928:	680b      	ldr	r3, [r1, #0]
  40092a:	40d3      	lsrs	r3, r2
  40092c:	600b      	str	r3, [r1, #0]
  40092e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400930:	4b31      	ldr	r3, [pc, #196]	; (4009f8 <SystemCoreClockUpdate+0xf8>)
  400932:	695b      	ldr	r3, [r3, #20]
  400934:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400938:	bf14      	ite	ne
  40093a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40093e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400942:	4b2c      	ldr	r3, [pc, #176]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  400944:	601a      	str	r2, [r3, #0]
  400946:	e7e4      	b.n	400912 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400948:	4b29      	ldr	r3, [pc, #164]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  40094a:	6a1b      	ldr	r3, [r3, #32]
  40094c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400950:	d003      	beq.n	40095a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400952:	4a2a      	ldr	r2, [pc, #168]	; (4009fc <SystemCoreClockUpdate+0xfc>)
  400954:	4b27      	ldr	r3, [pc, #156]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  400956:	601a      	str	r2, [r3, #0]
  400958:	e7db      	b.n	400912 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40095a:	4a29      	ldr	r2, [pc, #164]	; (400a00 <SystemCoreClockUpdate+0x100>)
  40095c:	4b25      	ldr	r3, [pc, #148]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  40095e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400960:	4b23      	ldr	r3, [pc, #140]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  400962:	6a1b      	ldr	r3, [r3, #32]
  400964:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400968:	2b10      	cmp	r3, #16
  40096a:	d005      	beq.n	400978 <SystemCoreClockUpdate+0x78>
  40096c:	2b20      	cmp	r3, #32
  40096e:	d1d0      	bne.n	400912 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400970:	4a22      	ldr	r2, [pc, #136]	; (4009fc <SystemCoreClockUpdate+0xfc>)
  400972:	4b20      	ldr	r3, [pc, #128]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  400974:	601a      	str	r2, [r3, #0]
          break;
  400976:	e7cc      	b.n	400912 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400978:	4a22      	ldr	r2, [pc, #136]	; (400a04 <SystemCoreClockUpdate+0x104>)
  40097a:	4b1e      	ldr	r3, [pc, #120]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  40097c:	601a      	str	r2, [r3, #0]
          break;
  40097e:	e7c8      	b.n	400912 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400980:	4b1b      	ldr	r3, [pc, #108]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  400982:	6a1b      	ldr	r3, [r3, #32]
  400984:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400988:	d016      	beq.n	4009b8 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40098a:	4a1c      	ldr	r2, [pc, #112]	; (4009fc <SystemCoreClockUpdate+0xfc>)
  40098c:	4b19      	ldr	r3, [pc, #100]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  40098e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400990:	4b17      	ldr	r3, [pc, #92]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  400992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400994:	f003 0303 	and.w	r3, r3, #3
  400998:	2b02      	cmp	r3, #2
  40099a:	d1ba      	bne.n	400912 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40099c:	4a14      	ldr	r2, [pc, #80]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  40099e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009a2:	4814      	ldr	r0, [pc, #80]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009a4:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4009a8:	6803      	ldr	r3, [r0, #0]
  4009aa:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009ae:	b2d2      	uxtb	r2, r2
  4009b0:	fbb3 f3f2 	udiv	r3, r3, r2
  4009b4:	6003      	str	r3, [r0, #0]
  4009b6:	e7ac      	b.n	400912 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009b8:	4a11      	ldr	r2, [pc, #68]	; (400a00 <SystemCoreClockUpdate+0x100>)
  4009ba:	4b0e      	ldr	r3, [pc, #56]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  4009bc:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009be:	4b0c      	ldr	r3, [pc, #48]	; (4009f0 <SystemCoreClockUpdate+0xf0>)
  4009c0:	6a1b      	ldr	r3, [r3, #32]
  4009c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009c6:	2b10      	cmp	r3, #16
  4009c8:	d005      	beq.n	4009d6 <SystemCoreClockUpdate+0xd6>
  4009ca:	2b20      	cmp	r3, #32
  4009cc:	d1e0      	bne.n	400990 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4009ce:	4a0b      	ldr	r2, [pc, #44]	; (4009fc <SystemCoreClockUpdate+0xfc>)
  4009d0:	4b08      	ldr	r3, [pc, #32]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  4009d2:	601a      	str	r2, [r3, #0]
          break;
  4009d4:	e7dc      	b.n	400990 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4009d6:	4a0b      	ldr	r2, [pc, #44]	; (400a04 <SystemCoreClockUpdate+0x104>)
  4009d8:	4b06      	ldr	r3, [pc, #24]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  4009da:	601a      	str	r2, [r3, #0]
          break;
  4009dc:	e7d8      	b.n	400990 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4009de:	4a05      	ldr	r2, [pc, #20]	; (4009f4 <SystemCoreClockUpdate+0xf4>)
  4009e0:	6813      	ldr	r3, [r2, #0]
  4009e2:	4909      	ldr	r1, [pc, #36]	; (400a08 <SystemCoreClockUpdate+0x108>)
  4009e4:	fba1 1303 	umull	r1, r3, r1, r3
  4009e8:	085b      	lsrs	r3, r3, #1
  4009ea:	6013      	str	r3, [r2, #0]
  4009ec:	4770      	bx	lr
  4009ee:	bf00      	nop
  4009f0:	400e0600 	.word	0x400e0600
  4009f4:	20400004 	.word	0x20400004
  4009f8:	400e1810 	.word	0x400e1810
  4009fc:	00b71b00 	.word	0x00b71b00
  400a00:	003d0900 	.word	0x003d0900
  400a04:	007a1200 	.word	0x007a1200
  400a08:	aaaaaaab 	.word	0xaaaaaaab

00400a0c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a0c:	4b16      	ldr	r3, [pc, #88]	; (400a68 <system_init_flash+0x5c>)
  400a0e:	4298      	cmp	r0, r3
  400a10:	d913      	bls.n	400a3a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a12:	4b16      	ldr	r3, [pc, #88]	; (400a6c <system_init_flash+0x60>)
  400a14:	4298      	cmp	r0, r3
  400a16:	d915      	bls.n	400a44 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a18:	4b15      	ldr	r3, [pc, #84]	; (400a70 <system_init_flash+0x64>)
  400a1a:	4298      	cmp	r0, r3
  400a1c:	d916      	bls.n	400a4c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a1e:	4b15      	ldr	r3, [pc, #84]	; (400a74 <system_init_flash+0x68>)
  400a20:	4298      	cmp	r0, r3
  400a22:	d917      	bls.n	400a54 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a24:	4b14      	ldr	r3, [pc, #80]	; (400a78 <system_init_flash+0x6c>)
  400a26:	4298      	cmp	r0, r3
  400a28:	d918      	bls.n	400a5c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400a2a:	4b14      	ldr	r3, [pc, #80]	; (400a7c <system_init_flash+0x70>)
  400a2c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a2e:	bf94      	ite	ls
  400a30:	4a13      	ldrls	r2, [pc, #76]	; (400a80 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400a32:	4a14      	ldrhi	r2, [pc, #80]	; (400a84 <system_init_flash+0x78>)
  400a34:	4b14      	ldr	r3, [pc, #80]	; (400a88 <system_init_flash+0x7c>)
  400a36:	601a      	str	r2, [r3, #0]
  400a38:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a3e:	4b12      	ldr	r3, [pc, #72]	; (400a88 <system_init_flash+0x7c>)
  400a40:	601a      	str	r2, [r3, #0]
  400a42:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a44:	4a11      	ldr	r2, [pc, #68]	; (400a8c <system_init_flash+0x80>)
  400a46:	4b10      	ldr	r3, [pc, #64]	; (400a88 <system_init_flash+0x7c>)
  400a48:	601a      	str	r2, [r3, #0]
  400a4a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a4c:	4a10      	ldr	r2, [pc, #64]	; (400a90 <system_init_flash+0x84>)
  400a4e:	4b0e      	ldr	r3, [pc, #56]	; (400a88 <system_init_flash+0x7c>)
  400a50:	601a      	str	r2, [r3, #0]
  400a52:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a54:	4a0f      	ldr	r2, [pc, #60]	; (400a94 <system_init_flash+0x88>)
  400a56:	4b0c      	ldr	r3, [pc, #48]	; (400a88 <system_init_flash+0x7c>)
  400a58:	601a      	str	r2, [r3, #0]
  400a5a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a5c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400a60:	4b09      	ldr	r3, [pc, #36]	; (400a88 <system_init_flash+0x7c>)
  400a62:	601a      	str	r2, [r3, #0]
  400a64:	4770      	bx	lr
  400a66:	bf00      	nop
  400a68:	015ef3bf 	.word	0x015ef3bf
  400a6c:	02bde77f 	.word	0x02bde77f
  400a70:	041cdb3f 	.word	0x041cdb3f
  400a74:	057bceff 	.word	0x057bceff
  400a78:	06dac2bf 	.word	0x06dac2bf
  400a7c:	0839b67f 	.word	0x0839b67f
  400a80:	04000500 	.word	0x04000500
  400a84:	04000600 	.word	0x04000600
  400a88:	400e0c00 	.word	0x400e0c00
  400a8c:	04000100 	.word	0x04000100
  400a90:	04000200 	.word	0x04000200
  400a94:	04000300 	.word	0x04000300

00400a98 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a98:	4b0a      	ldr	r3, [pc, #40]	; (400ac4 <_sbrk+0x2c>)
  400a9a:	681b      	ldr	r3, [r3, #0]
  400a9c:	b153      	cbz	r3, 400ab4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400a9e:	4b09      	ldr	r3, [pc, #36]	; (400ac4 <_sbrk+0x2c>)
  400aa0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400aa2:	181a      	adds	r2, r3, r0
  400aa4:	4908      	ldr	r1, [pc, #32]	; (400ac8 <_sbrk+0x30>)
  400aa6:	4291      	cmp	r1, r2
  400aa8:	db08      	blt.n	400abc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400aaa:	4610      	mov	r0, r2
  400aac:	4a05      	ldr	r2, [pc, #20]	; (400ac4 <_sbrk+0x2c>)
  400aae:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400ab0:	4618      	mov	r0, r3
  400ab2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400ab4:	4a05      	ldr	r2, [pc, #20]	; (400acc <_sbrk+0x34>)
  400ab6:	4b03      	ldr	r3, [pc, #12]	; (400ac4 <_sbrk+0x2c>)
  400ab8:	601a      	str	r2, [r3, #0]
  400aba:	e7f0      	b.n	400a9e <_sbrk+0x6>
		return (caddr_t) -1;	
  400abc:	f04f 30ff 	mov.w	r0, #4294967295
}
  400ac0:	4770      	bx	lr
  400ac2:	bf00      	nop
  400ac4:	204008dc 	.word	0x204008dc
  400ac8:	2045fffc 	.word	0x2045fffc
  400acc:	20403328 	.word	0x20403328

00400ad0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ad0:	f04f 30ff 	mov.w	r0, #4294967295
  400ad4:	4770      	bx	lr

00400ad6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400ada:	604b      	str	r3, [r1, #4]

	return 0;
}
  400adc:	2000      	movs	r0, #0
  400ade:	4770      	bx	lr

00400ae0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400ae0:	2001      	movs	r0, #1
  400ae2:	4770      	bx	lr

00400ae4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400ae4:	2000      	movs	r0, #0
  400ae6:	4770      	bx	lr

00400ae8 <wait>:
/**
 *  \brief Wait for some time in ms.
 *
 */
static void wait(volatile uint32_t ul_ms)
{
  400ae8:	b082      	sub	sp, #8
  400aea:	9001      	str	r0, [sp, #4]
	uint32_t ul_start;
	uint32_t ul_current;

	ul_start = g_ul_tick_count;
  400aec:	4b04      	ldr	r3, [pc, #16]	; (400b00 <wait+0x18>)
  400aee:	6818      	ldr	r0, [r3, #0]
	do {
		ul_current = g_ul_tick_count;
  400af0:	4619      	mov	r1, r3
  400af2:	680b      	ldr	r3, [r1, #0]
	} while (ul_current - ul_start < ul_ms);
  400af4:	9a01      	ldr	r2, [sp, #4]
  400af6:	1a1b      	subs	r3, r3, r0
  400af8:	4293      	cmp	r3, r2
  400afa:	d3fa      	bcc.n	400af2 <wait+0xa>
}
  400afc:	b002      	add	sp, #8
  400afe:	4770      	bx	lr
  400b00:	20400928 	.word	0x20400928

00400b04 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b06:	b083      	sub	sp, #12
  400b08:	4605      	mov	r5, r0
  400b0a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b0c:	2300      	movs	r3, #0
  400b0e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b10:	4b2a      	ldr	r3, [pc, #168]	; (400bbc <usart_serial_getchar+0xb8>)
  400b12:	4298      	cmp	r0, r3
  400b14:	d013      	beq.n	400b3e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400b16:	4b2a      	ldr	r3, [pc, #168]	; (400bc0 <usart_serial_getchar+0xbc>)
  400b18:	4298      	cmp	r0, r3
  400b1a:	d018      	beq.n	400b4e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400b1c:	4b29      	ldr	r3, [pc, #164]	; (400bc4 <usart_serial_getchar+0xc0>)
  400b1e:	4298      	cmp	r0, r3
  400b20:	d01d      	beq.n	400b5e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400b22:	4b29      	ldr	r3, [pc, #164]	; (400bc8 <usart_serial_getchar+0xc4>)
  400b24:	429d      	cmp	r5, r3
  400b26:	d022      	beq.n	400b6e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400b28:	4b28      	ldr	r3, [pc, #160]	; (400bcc <usart_serial_getchar+0xc8>)
  400b2a:	429d      	cmp	r5, r3
  400b2c:	d027      	beq.n	400b7e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400b2e:	4b28      	ldr	r3, [pc, #160]	; (400bd0 <usart_serial_getchar+0xcc>)
  400b30:	429d      	cmp	r5, r3
  400b32:	d02e      	beq.n	400b92 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400b34:	4b27      	ldr	r3, [pc, #156]	; (400bd4 <usart_serial_getchar+0xd0>)
  400b36:	429d      	cmp	r5, r3
  400b38:	d035      	beq.n	400ba6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400b3a:	b003      	add	sp, #12
  400b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400b3e:	461f      	mov	r7, r3
  400b40:	4e25      	ldr	r6, [pc, #148]	; (400bd8 <usart_serial_getchar+0xd4>)
  400b42:	4621      	mov	r1, r4
  400b44:	4638      	mov	r0, r7
  400b46:	47b0      	blx	r6
  400b48:	2800      	cmp	r0, #0
  400b4a:	d1fa      	bne.n	400b42 <usart_serial_getchar+0x3e>
  400b4c:	e7e9      	b.n	400b22 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400b4e:	461f      	mov	r7, r3
  400b50:	4e21      	ldr	r6, [pc, #132]	; (400bd8 <usart_serial_getchar+0xd4>)
  400b52:	4621      	mov	r1, r4
  400b54:	4638      	mov	r0, r7
  400b56:	47b0      	blx	r6
  400b58:	2800      	cmp	r0, #0
  400b5a:	d1fa      	bne.n	400b52 <usart_serial_getchar+0x4e>
  400b5c:	e7e4      	b.n	400b28 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400b5e:	461f      	mov	r7, r3
  400b60:	4e1d      	ldr	r6, [pc, #116]	; (400bd8 <usart_serial_getchar+0xd4>)
  400b62:	4621      	mov	r1, r4
  400b64:	4638      	mov	r0, r7
  400b66:	47b0      	blx	r6
  400b68:	2800      	cmp	r0, #0
  400b6a:	d1fa      	bne.n	400b62 <usart_serial_getchar+0x5e>
  400b6c:	e7df      	b.n	400b2e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400b6e:	461f      	mov	r7, r3
  400b70:	4e19      	ldr	r6, [pc, #100]	; (400bd8 <usart_serial_getchar+0xd4>)
  400b72:	4621      	mov	r1, r4
  400b74:	4638      	mov	r0, r7
  400b76:	47b0      	blx	r6
  400b78:	2800      	cmp	r0, #0
  400b7a:	d1fa      	bne.n	400b72 <usart_serial_getchar+0x6e>
  400b7c:	e7da      	b.n	400b34 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400b7e:	461e      	mov	r6, r3
  400b80:	4d16      	ldr	r5, [pc, #88]	; (400bdc <usart_serial_getchar+0xd8>)
  400b82:	a901      	add	r1, sp, #4
  400b84:	4630      	mov	r0, r6
  400b86:	47a8      	blx	r5
  400b88:	2800      	cmp	r0, #0
  400b8a:	d1fa      	bne.n	400b82 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400b8c:	9b01      	ldr	r3, [sp, #4]
  400b8e:	7023      	strb	r3, [r4, #0]
  400b90:	e7d3      	b.n	400b3a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400b92:	461e      	mov	r6, r3
  400b94:	4d11      	ldr	r5, [pc, #68]	; (400bdc <usart_serial_getchar+0xd8>)
  400b96:	a901      	add	r1, sp, #4
  400b98:	4630      	mov	r0, r6
  400b9a:	47a8      	blx	r5
  400b9c:	2800      	cmp	r0, #0
  400b9e:	d1fa      	bne.n	400b96 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400ba0:	9b01      	ldr	r3, [sp, #4]
  400ba2:	7023      	strb	r3, [r4, #0]
  400ba4:	e7c9      	b.n	400b3a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400ba6:	461e      	mov	r6, r3
  400ba8:	4d0c      	ldr	r5, [pc, #48]	; (400bdc <usart_serial_getchar+0xd8>)
  400baa:	a901      	add	r1, sp, #4
  400bac:	4630      	mov	r0, r6
  400bae:	47a8      	blx	r5
  400bb0:	2800      	cmp	r0, #0
  400bb2:	d1fa      	bne.n	400baa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400bb4:	9b01      	ldr	r3, [sp, #4]
  400bb6:	7023      	strb	r3, [r4, #0]
}
  400bb8:	e7bf      	b.n	400b3a <usart_serial_getchar+0x36>
  400bba:	bf00      	nop
  400bbc:	400e0800 	.word	0x400e0800
  400bc0:	400e0a00 	.word	0x400e0a00
  400bc4:	400e1a00 	.word	0x400e1a00
  400bc8:	400e1c00 	.word	0x400e1c00
  400bcc:	40024000 	.word	0x40024000
  400bd0:	40028000 	.word	0x40028000
  400bd4:	4002c000 	.word	0x4002c000
  400bd8:	004006db 	.word	0x004006db
  400bdc:	0040081f 	.word	0x0040081f

00400be0 <usart_serial_putchar>:
{
  400be0:	b570      	push	{r4, r5, r6, lr}
  400be2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400be4:	4b2a      	ldr	r3, [pc, #168]	; (400c90 <usart_serial_putchar+0xb0>)
  400be6:	4298      	cmp	r0, r3
  400be8:	d013      	beq.n	400c12 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400bea:	4b2a      	ldr	r3, [pc, #168]	; (400c94 <usart_serial_putchar+0xb4>)
  400bec:	4298      	cmp	r0, r3
  400bee:	d019      	beq.n	400c24 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400bf0:	4b29      	ldr	r3, [pc, #164]	; (400c98 <usart_serial_putchar+0xb8>)
  400bf2:	4298      	cmp	r0, r3
  400bf4:	d01f      	beq.n	400c36 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400bf6:	4b29      	ldr	r3, [pc, #164]	; (400c9c <usart_serial_putchar+0xbc>)
  400bf8:	4298      	cmp	r0, r3
  400bfa:	d025      	beq.n	400c48 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400bfc:	4b28      	ldr	r3, [pc, #160]	; (400ca0 <usart_serial_putchar+0xc0>)
  400bfe:	4298      	cmp	r0, r3
  400c00:	d02b      	beq.n	400c5a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400c02:	4b28      	ldr	r3, [pc, #160]	; (400ca4 <usart_serial_putchar+0xc4>)
  400c04:	4298      	cmp	r0, r3
  400c06:	d031      	beq.n	400c6c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400c08:	4b27      	ldr	r3, [pc, #156]	; (400ca8 <usart_serial_putchar+0xc8>)
  400c0a:	4298      	cmp	r0, r3
  400c0c:	d037      	beq.n	400c7e <usart_serial_putchar+0x9e>
	return 0;
  400c0e:	2000      	movs	r0, #0
}
  400c10:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c12:	461e      	mov	r6, r3
  400c14:	4d25      	ldr	r5, [pc, #148]	; (400cac <usart_serial_putchar+0xcc>)
  400c16:	4621      	mov	r1, r4
  400c18:	4630      	mov	r0, r6
  400c1a:	47a8      	blx	r5
  400c1c:	2800      	cmp	r0, #0
  400c1e:	d1fa      	bne.n	400c16 <usart_serial_putchar+0x36>
		return 1;
  400c20:	2001      	movs	r0, #1
  400c22:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c24:	461e      	mov	r6, r3
  400c26:	4d21      	ldr	r5, [pc, #132]	; (400cac <usart_serial_putchar+0xcc>)
  400c28:	4621      	mov	r1, r4
  400c2a:	4630      	mov	r0, r6
  400c2c:	47a8      	blx	r5
  400c2e:	2800      	cmp	r0, #0
  400c30:	d1fa      	bne.n	400c28 <usart_serial_putchar+0x48>
		return 1;
  400c32:	2001      	movs	r0, #1
  400c34:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c36:	461e      	mov	r6, r3
  400c38:	4d1c      	ldr	r5, [pc, #112]	; (400cac <usart_serial_putchar+0xcc>)
  400c3a:	4621      	mov	r1, r4
  400c3c:	4630      	mov	r0, r6
  400c3e:	47a8      	blx	r5
  400c40:	2800      	cmp	r0, #0
  400c42:	d1fa      	bne.n	400c3a <usart_serial_putchar+0x5a>
		return 1;
  400c44:	2001      	movs	r0, #1
  400c46:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400c48:	461e      	mov	r6, r3
  400c4a:	4d18      	ldr	r5, [pc, #96]	; (400cac <usart_serial_putchar+0xcc>)
  400c4c:	4621      	mov	r1, r4
  400c4e:	4630      	mov	r0, r6
  400c50:	47a8      	blx	r5
  400c52:	2800      	cmp	r0, #0
  400c54:	d1fa      	bne.n	400c4c <usart_serial_putchar+0x6c>
		return 1;
  400c56:	2001      	movs	r0, #1
  400c58:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400c5a:	461e      	mov	r6, r3
  400c5c:	4d14      	ldr	r5, [pc, #80]	; (400cb0 <usart_serial_putchar+0xd0>)
  400c5e:	4621      	mov	r1, r4
  400c60:	4630      	mov	r0, r6
  400c62:	47a8      	blx	r5
  400c64:	2800      	cmp	r0, #0
  400c66:	d1fa      	bne.n	400c5e <usart_serial_putchar+0x7e>
		return 1;
  400c68:	2001      	movs	r0, #1
  400c6a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400c6c:	461e      	mov	r6, r3
  400c6e:	4d10      	ldr	r5, [pc, #64]	; (400cb0 <usart_serial_putchar+0xd0>)
  400c70:	4621      	mov	r1, r4
  400c72:	4630      	mov	r0, r6
  400c74:	47a8      	blx	r5
  400c76:	2800      	cmp	r0, #0
  400c78:	d1fa      	bne.n	400c70 <usart_serial_putchar+0x90>
		return 1;
  400c7a:	2001      	movs	r0, #1
  400c7c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400c7e:	461e      	mov	r6, r3
  400c80:	4d0b      	ldr	r5, [pc, #44]	; (400cb0 <usart_serial_putchar+0xd0>)
  400c82:	4621      	mov	r1, r4
  400c84:	4630      	mov	r0, r6
  400c86:	47a8      	blx	r5
  400c88:	2800      	cmp	r0, #0
  400c8a:	d1fa      	bne.n	400c82 <usart_serial_putchar+0xa2>
		return 1;
  400c8c:	2001      	movs	r0, #1
  400c8e:	bd70      	pop	{r4, r5, r6, pc}
  400c90:	400e0800 	.word	0x400e0800
  400c94:	400e0a00 	.word	0x400e0a00
  400c98:	400e1a00 	.word	0x400e1a00
  400c9c:	400e1c00 	.word	0x400e1c00
  400ca0:	40024000 	.word	0x40024000
  400ca4:	40028000 	.word	0x40028000
  400ca8:	4002c000 	.word	0x4002c000
  400cac:	004006c9 	.word	0x004006c9
  400cb0:	00400809 	.word	0x00400809

00400cb4 <SysTick_Handler>:
	g_ul_tick_count++;
  400cb4:	4a02      	ldr	r2, [pc, #8]	; (400cc0 <SysTick_Handler+0xc>)
  400cb6:	6813      	ldr	r3, [r2, #0]
  400cb8:	3301      	adds	r3, #1
  400cba:	6013      	str	r3, [r2, #0]
  400cbc:	4770      	bx	lr
  400cbe:	bf00      	nop
  400cc0:	20400928 	.word	0x20400928

00400cc4 <USART0_Handler>:
/**
 *  \brief Handler for USART interrupt.
 *
 */
void USART_Handler(void)
{
  400cc4:	b500      	push	{lr}
  400cc6:	b083      	sub	sp, #12
	uint32_t ul_status;
	uint8_t uc_char;

	/* Read USART status. */
	ul_status = usart_get_status(USART1);
  400cc8:	4818      	ldr	r0, [pc, #96]	; (400d2c <USART0_Handler+0x68>)
  400cca:	4b19      	ldr	r3, [pc, #100]	; (400d30 <USART0_Handler+0x6c>)
  400ccc:	4798      	blx	r3

	/*transmit interrupt rises*/
	if(ul_status & (US_IER_TXRDY | US_IER_TXEMPTY)) {
  400cce:	f240 2302 	movw	r3, #514	; 0x202
  400cd2:	4218      	tst	r0, r3
  400cd4:	d107      	bne.n	400ce6 <USART0_Handler+0x22>
		usart_disable_interrupt(USART1, (US_IER_TXRDY | US_IER_TXEMPTY));
	}

	/*receive interrupt rise, store character to receiver buffer*/
	if((g_state == RECEIVING) && (usart_read(USART1, (uint32_t *)&uc_char) == 0)) {
  400cd6:	4b17      	ldr	r3, [pc, #92]	; (400d34 <USART0_Handler+0x70>)
  400cd8:	781b      	ldrb	r3, [r3, #0]
  400cda:	b2db      	uxtb	r3, r3
  400cdc:	2b02      	cmp	r3, #2
  400cde:	d007      	beq.n	400cf0 <USART0_Handler+0x2c>
		if(g_ulcount >= BUFFER_SIZE) {
			g_state = RECEIVED;
			usart_disable_interrupt(USART1, US_IER_RXRDY);
		}
	}
}
  400ce0:	b003      	add	sp, #12
  400ce2:	f85d fb04 	ldr.w	pc, [sp], #4
		usart_disable_interrupt(USART1, (US_IER_TXRDY | US_IER_TXEMPTY));
  400ce6:	4619      	mov	r1, r3
  400ce8:	4810      	ldr	r0, [pc, #64]	; (400d2c <USART0_Handler+0x68>)
  400cea:	4b13      	ldr	r3, [pc, #76]	; (400d38 <USART0_Handler+0x74>)
  400cec:	4798      	blx	r3
  400cee:	e7f2      	b.n	400cd6 <USART0_Handler+0x12>
	if((g_state == RECEIVING) && (usart_read(USART1, (uint32_t *)&uc_char) == 0)) {
  400cf0:	f10d 0107 	add.w	r1, sp, #7
  400cf4:	480d      	ldr	r0, [pc, #52]	; (400d2c <USART0_Handler+0x68>)
  400cf6:	4b11      	ldr	r3, [pc, #68]	; (400d3c <USART0_Handler+0x78>)
  400cf8:	4798      	blx	r3
  400cfa:	2800      	cmp	r0, #0
  400cfc:	d1f0      	bne.n	400ce0 <USART0_Handler+0x1c>
		*p_revdata++ = uc_char;
  400cfe:	4a10      	ldr	r2, [pc, #64]	; (400d40 <USART0_Handler+0x7c>)
  400d00:	6813      	ldr	r3, [r2, #0]
  400d02:	1c59      	adds	r1, r3, #1
  400d04:	6011      	str	r1, [r2, #0]
  400d06:	f89d 2007 	ldrb.w	r2, [sp, #7]
  400d0a:	701a      	strb	r2, [r3, #0]
		g_ulcount++;
  400d0c:	4a0d      	ldr	r2, [pc, #52]	; (400d44 <USART0_Handler+0x80>)
  400d0e:	6813      	ldr	r3, [r2, #0]
  400d10:	3301      	adds	r3, #1
  400d12:	6013      	str	r3, [r2, #0]
		if(g_ulcount >= BUFFER_SIZE) {
  400d14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  400d18:	d3e2      	bcc.n	400ce0 <USART0_Handler+0x1c>
			g_state = RECEIVED;
  400d1a:	2203      	movs	r2, #3
  400d1c:	4b05      	ldr	r3, [pc, #20]	; (400d34 <USART0_Handler+0x70>)
  400d1e:	701a      	strb	r2, [r3, #0]
			usart_disable_interrupt(USART1, US_IER_RXRDY);
  400d20:	2101      	movs	r1, #1
  400d22:	4802      	ldr	r0, [pc, #8]	; (400d2c <USART0_Handler+0x68>)
  400d24:	4b04      	ldr	r3, [pc, #16]	; (400d38 <USART0_Handler+0x74>)
  400d26:	4798      	blx	r3
}
  400d28:	e7da      	b.n	400ce0 <USART0_Handler+0x1c>
  400d2a:	bf00      	nop
  400d2c:	40028000 	.word	0x40028000
  400d30:	004007fd 	.word	0x004007fd
  400d34:	204008e0 	.word	0x204008e0
  400d38:	004007f9 	.word	0x004007f9
  400d3c:	0040081f 	.word	0x0040081f
  400d40:	20400008 	.word	0x20400008
  400d44:	204008e4 	.word	0x204008e4

00400d48 <main>:
 *  as a receiver. Otherwise, it should be a transmitter.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d4c:	b0a1      	sub	sp, #132	; 0x84
	static uint8_t uc_sync = SYNC_CHAR;
	uint32_t time_elapsed = 0;
	uint32_t ul_i;

	/* Initialize the SAM system. */
	sysclk_init();
  400d4e:	4b4f      	ldr	r3, [pc, #316]	; (400e8c <main+0x144>)
  400d50:	4798      	blx	r3
	board_init();
  400d52:	4b4f      	ldr	r3, [pc, #316]	; (400e90 <main+0x148>)
  400d54:	4798      	blx	r3
  400d56:	200e      	movs	r0, #14
  400d58:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 400f08 <main+0x1c0>
  400d5c:	47d0      	blx	sl
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400d5e:	4c4d      	ldr	r4, [pc, #308]	; (400e94 <main+0x14c>)
  400d60:	4b4d      	ldr	r3, [pc, #308]	; (400e98 <main+0x150>)
  400d62:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400d64:	4a4d      	ldr	r2, [pc, #308]	; (400e9c <main+0x154>)
  400d66:	4b4e      	ldr	r3, [pc, #312]	; (400ea0 <main+0x158>)
  400d68:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400d6a:	4a4e      	ldr	r2, [pc, #312]	; (400ea4 <main+0x15c>)
  400d6c:	4b4e      	ldr	r3, [pc, #312]	; (400ea8 <main+0x160>)
  400d6e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400d70:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400d74:	9301      	str	r3, [sp, #4]
	usart_settings.char_length = opt->charlength;
  400d76:	23c0      	movs	r3, #192	; 0xc0
  400d78:	9302      	str	r3, [sp, #8]
	usart_settings.parity_type = opt->paritytype;
  400d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d7e:	9303      	str	r3, [sp, #12]
	usart_settings.stop_bits= opt->stopbits;
  400d80:	2700      	movs	r7, #0
  400d82:	9704      	str	r7, [sp, #16]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400d84:	9705      	str	r7, [sp, #20]
  400d86:	200e      	movs	r0, #14
  400d88:	47d0      	blx	sl
		usart_init_rs232(p_usart, &usart_settings,
  400d8a:	f8df b180 	ldr.w	fp, [pc, #384]	; 400f0c <main+0x1c4>
  400d8e:	465a      	mov	r2, fp
  400d90:	a901      	add	r1, sp, #4
  400d92:	4620      	mov	r0, r4
  400d94:	4b45      	ldr	r3, [pc, #276]	; (400eac <main+0x164>)
  400d96:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400d98:	4620      	mov	r0, r4
  400d9a:	f8df 9174 	ldr.w	r9, [pc, #372]	; 400f10 <main+0x1c8>
  400d9e:	47c8      	blx	r9
		usart_enable_rx(p_usart);
  400da0:	4620      	mov	r0, r4
  400da2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 400f14 <main+0x1cc>
  400da6:	47c0      	blx	r8
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400da8:	4e41      	ldr	r6, [pc, #260]	; (400eb0 <main+0x168>)
  400daa:	6833      	ldr	r3, [r6, #0]
  400dac:	4639      	mov	r1, r7
  400dae:	6898      	ldr	r0, [r3, #8]
  400db0:	4d40      	ldr	r5, [pc, #256]	; (400eb4 <main+0x16c>)
  400db2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400db4:	6833      	ldr	r3, [r6, #0]
  400db6:	4639      	mov	r1, r7
  400db8:	6858      	ldr	r0, [r3, #4]
  400dba:	47a8      	blx	r5

	/* Configure UART for debug message output. */
	configure_console();

	/* Output example information. */
	puts(STRING_HEADER);
  400dbc:	483e      	ldr	r0, [pc, #248]	; (400eb8 <main+0x170>)
  400dbe:	4b3f      	ldr	r3, [pc, #252]	; (400ebc <main+0x174>)
  400dc0:	4798      	blx	r3
	const sam_usart_opt_t usart_console_settings = {
  400dc2:	ad01      	add	r5, sp, #4
  400dc4:	4e3e      	ldr	r6, [pc, #248]	; (400ec0 <main+0x178>)
  400dc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  400dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  400dca:	e896 0003 	ldmia.w	r6, {r0, r1}
  400dce:	e885 0003 	stmia.w	r5, {r0, r1}
  400dd2:	200d      	movs	r0, #13
  400dd4:	47d0      	blx	sl
	usart_init_rs485(USART1, &usart_console_settings,
  400dd6:	465a      	mov	r2, fp
  400dd8:	a901      	add	r1, sp, #4
  400dda:	4620      	mov	r0, r4
  400ddc:	4b39      	ldr	r3, [pc, #228]	; (400ec4 <main+0x17c>)
  400dde:	4798      	blx	r3
	usart_set_tx_timeguard(USART1, 4);
  400de0:	2104      	movs	r1, #4
  400de2:	4620      	mov	r0, r4
  400de4:	4b38      	ldr	r3, [pc, #224]	; (400ec8 <main+0x180>)
  400de6:	4798      	blx	r3
	usart_disable_interrupt(USART1, ALL_INTERRUPT_MASK);
  400de8:	f04f 31ff 	mov.w	r1, #4294967295
  400dec:	4620      	mov	r0, r4
  400dee:	4b37      	ldr	r3, [pc, #220]	; (400ecc <main+0x184>)
  400df0:	4798      	blx	r3
	usart_enable_tx(USART1);
  400df2:	4620      	mov	r0, r4
  400df4:	47c8      	blx	r9
	usart_enable_rx(USART1);
  400df6:	4620      	mov	r0, r4
  400df8:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400dfe:	4b34      	ldr	r3, [pc, #208]	; (400ed0 <main+0x188>)
  400e00:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400e02:	3bf0      	subs	r3, #240	; 0xf0
  400e04:	4a33      	ldr	r2, [pc, #204]	; (400ed4 <main+0x18c>)
  400e06:	605a      	str	r2, [r3, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400e08:	21e0      	movs	r1, #224	; 0xe0
  400e0a:	4a33      	ldr	r2, [pc, #204]	; (400ed8 <main+0x190>)
  400e0c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400e10:	609f      	str	r7, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400e12:	2207      	movs	r2, #7
  400e14:	601a      	str	r2, [r3, #0]

	/* 1ms tick. */
	configure_systick();

	/* Initialize receiving buffer to distinguish with the sent frame. */
	memset(g_uc_receive_buffer, 0x0, BUFFER_SIZE);
  400e16:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  400e1a:	4639      	mov	r1, r7
  400e1c:	482f      	ldr	r0, [pc, #188]	; (400edc <main+0x194>)
  400e1e:	4b30      	ldr	r3, [pc, #192]	; (400ee0 <main+0x198>)
  400e20:	4798      	blx	r3

	/*
	 * Enable transmitter here, and disable receiver first, to avoid receiving
	 * characters sent by itself. It's necessary for half duplex RS485.
	 */
	usart_enable_tx(USART1);
  400e22:	4620      	mov	r0, r4
  400e24:	47c8      	blx	r9
	//usart_disable_rx(USART1);

	/* Send a sync character XON (0x11). */
	//func_transmit(&uc_sync, 1); //
	/* Delay until the line is cleared, an estimated time used. */
	wait(50);
  400e26:	2032      	movs	r0, #50	; 0x32
  400e28:	4d2e      	ldr	r5, [pc, #184]	; (400ee4 <main+0x19c>)
  400e2a:	47a8      	blx	r5

	/* Then enable receiver. */
	usart_enable_rx(USART1);
  400e2c:	4620      	mov	r0, r4
  400e2e:	47c0      	blx	r8
	wait(50);
  400e30:	2032      	movs	r0, #50	; 0x32
  400e32:	47a8      	blx	r5
	return g_ul_tick_count;
  400e34:	4b2c      	ldr	r3, [pc, #176]	; (400ee8 <main+0x1a0>)
  400e36:	681f      	ldr	r7, [r3, #0]
	/* Wait until time out or acknowledgement is received. */
	time_elapsed = get_tick_count();
	while (!usart_is_rx_ready(USART1)) {
  400e38:	4626      	mov	r6, r4
  400e3a:	4d2c      	ldr	r5, [pc, #176]	; (400eec <main+0x1a4>)
	return g_ul_tick_count;
  400e3c:	461c      	mov	r4, r3
	while (!usart_is_rx_ready(USART1)) {
  400e3e:	e004      	b.n	400e4a <main+0x102>
	return g_ul_tick_count;
  400e40:	6823      	ldr	r3, [r4, #0]
		if (get_tick_count() - time_elapsed > TIMEOUT) {
  400e42:	1bdb      	subs	r3, r3, r7
  400e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400e48:	d803      	bhi.n	400e52 <main+0x10a>
	while (!usart_is_rx_ready(USART1)) {
  400e4a:	4630      	mov	r0, r6
  400e4c:	47a8      	blx	r5
  400e4e:	2800      	cmp	r0, #0
  400e50:	d0f6      	beq.n	400e40 <main+0xf8>
	//} else {
		/* Start receiving, act as receiver. */
	//	puts("-K- Receiving sync character.\r");
		//while (!usart_is_rx_ready(USART1)) {
		//}
		wait(50);
  400e52:	2032      	movs	r0, #50	; 0x32
  400e54:	4b23      	ldr	r3, [pc, #140]	; (400ee4 <main+0x19c>)
  400e56:	4798      	blx	r3
		puts("ATMELSAME70 Bluetooth \n Will print String only if it is greater than 4");
  400e58:	4825      	ldr	r0, [pc, #148]	; (400ef0 <main+0x1a8>)
  400e5a:	4b18      	ldr	r3, [pc, #96]	; (400ebc <main+0x174>)
  400e5c:	4798      	blx	r3
		/* Sync character is received. */
		char r[100];
		while (1) {
			//usart_read(USART1, (uint8_t *)&uc_sync);
			puts("Enter the string you wish to display");
  400e5e:	4e25      	ldr	r6, [pc, #148]	; (400ef4 <main+0x1ac>)
  400e60:	4c16      	ldr	r4, [pc, #88]	; (400ebc <main+0x174>)
			gets(r);
  400e62:	4d25      	ldr	r5, [pc, #148]	; (400ef8 <main+0x1b0>)
			puts("Enter the string you wish to display");
  400e64:	4630      	mov	r0, r6
  400e66:	47a0      	blx	r4
			gets(r);
  400e68:	a807      	add	r0, sp, #28
  400e6a:	47a8      	blx	r5
			if(strlen(r)>5){
  400e6c:	a807      	add	r0, sp, #28
  400e6e:	4b23      	ldr	r3, [pc, #140]	; (400efc <main+0x1b4>)
  400e70:	4798      	blx	r3
  400e72:	2805      	cmp	r0, #5
				puts(r);
  400e74:	bf8c      	ite	hi
  400e76:	a807      	addhi	r0, sp, #28
			}
			else{
				puts("SED BOY");
  400e78:	4821      	ldrls	r0, [pc, #132]	; (400f00 <main+0x1b8>)
  400e7a:	47a0      	blx	r4

			/*
			 * Delay to prevent the character from being discarded by
			 * transmitter due to responding too soon.
			 */
			wait(1000);
  400e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  400e80:	4b18      	ldr	r3, [pc, #96]	; (400ee4 <main+0x19c>)
  400e82:	4798      	blx	r3

			/* Send a ack character XOff . */
			//func_transmit(&uc_sync, 1);

			g_state = RECEIVING;
  400e84:	2202      	movs	r2, #2
  400e86:	4b1f      	ldr	r3, [pc, #124]	; (400f04 <main+0x1bc>)
  400e88:	701a      	strb	r2, [r3, #0]
			puts("Enter the string you wish to display");
  400e8a:	e7eb      	b.n	400e64 <main+0x11c>
  400e8c:	004001d5 	.word	0x004001d5
  400e90:	004002d5 	.word	0x004002d5
  400e94:	40028000 	.word	0x40028000
  400e98:	20400924 	.word	0x20400924
  400e9c:	00400be1 	.word	0x00400be1
  400ea0:	20400920 	.word	0x20400920
  400ea4:	00400b05 	.word	0x00400b05
  400ea8:	2040091c 	.word	0x2040091c
  400eac:	00400771 	.word	0x00400771
  400eb0:	2040000c 	.word	0x2040000c
  400eb4:	00401199 	.word	0x00401199
  400eb8:	00402e80 	.word	0x00402e80
  400ebc:	00401155 	.word	0x00401155
  400ec0:	00402e68 	.word	0x00402e68
  400ec4:	004007c5 	.word	0x004007c5
  400ec8:	004007ef 	.word	0x004007ef
  400ecc:	004007f9 	.word	0x004007f9
  400ed0:	e000e100 	.word	0xe000e100
  400ed4:	000493df 	.word	0x000493df
  400ed8:	e000ed00 	.word	0xe000ed00
  400edc:	2040092c 	.word	0x2040092c
  400ee0:	0040101d 	.word	0x0040101d
  400ee4:	00400ae9 	.word	0x00400ae9
  400ee8:	20400928 	.word	0x20400928
  400eec:	00400801 	.word	0x00400801
  400ef0:	00402ed4 	.word	0x00402ed4
  400ef4:	00402f1c 	.word	0x00402f1c
  400ef8:	00400fad 	.word	0x00400fad
  400efc:	00401341 	.word	0x00401341
  400f00:	00402f44 	.word	0x00402f44
  400f04:	204008e0 	.word	0x204008e0
  400f08:	004006a9 	.word	0x004006a9
  400f0c:	08f0d180 	.word	0x08f0d180
  400f10:	004007e9 	.word	0x004007e9
  400f14:	004007f3 	.word	0x004007f3

00400f18 <_gets_r>:
  400f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400f1c:	6844      	ldr	r4, [r0, #4]
  400f1e:	4607      	mov	r7, r0
  400f20:	460e      	mov	r6, r1
  400f22:	b36b      	cbz	r3, 400f80 <_gets_r+0x68>
  400f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f26:	07dd      	lsls	r5, r3, #31
  400f28:	d402      	bmi.n	400f30 <_gets_r+0x18>
  400f2a:	89a3      	ldrh	r3, [r4, #12]
  400f2c:	0598      	lsls	r0, r3, #22
  400f2e:	d52a      	bpl.n	400f86 <_gets_r+0x6e>
  400f30:	4635      	mov	r5, r6
  400f32:	e007      	b.n	400f44 <_gets_r+0x2c>
  400f34:	6823      	ldr	r3, [r4, #0]
  400f36:	1c5a      	adds	r2, r3, #1
  400f38:	6022      	str	r2, [r4, #0]
  400f3a:	7818      	ldrb	r0, [r3, #0]
  400f3c:	280a      	cmp	r0, #10
  400f3e:	d010      	beq.n	400f62 <_gets_r+0x4a>
  400f40:	f805 0b01 	strb.w	r0, [r5], #1
  400f44:	6863      	ldr	r3, [r4, #4]
  400f46:	3b01      	subs	r3, #1
  400f48:	2b00      	cmp	r3, #0
  400f4a:	6063      	str	r3, [r4, #4]
  400f4c:	daf2      	bge.n	400f34 <_gets_r+0x1c>
  400f4e:	4621      	mov	r1, r4
  400f50:	4638      	mov	r0, r7
  400f52:	f000 f907 	bl	401164 <__srget_r>
  400f56:	280a      	cmp	r0, #10
  400f58:	d003      	beq.n	400f62 <_gets_r+0x4a>
  400f5a:	1c41      	adds	r1, r0, #1
  400f5c:	d1f0      	bne.n	400f40 <_gets_r+0x28>
  400f5e:	42b5      	cmp	r5, r6
  400f60:	d015      	beq.n	400f8e <_gets_r+0x76>
  400f62:	2300      	movs	r3, #0
  400f64:	702b      	strb	r3, [r5, #0]
  400f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f68:	07da      	lsls	r2, r3, #31
  400f6a:	d402      	bmi.n	400f72 <_gets_r+0x5a>
  400f6c:	89a3      	ldrh	r3, [r4, #12]
  400f6e:	059b      	lsls	r3, r3, #22
  400f70:	d501      	bpl.n	400f76 <_gets_r+0x5e>
  400f72:	4630      	mov	r0, r6
  400f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f76:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400f78:	f000 f84e 	bl	401018 <__retarget_lock_release_recursive>
  400f7c:	4630      	mov	r0, r6
  400f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f80:	f000 fb66 	bl	401650 <__sinit>
  400f84:	e7ce      	b.n	400f24 <_gets_r+0xc>
  400f86:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400f88:	f000 f844 	bl	401014 <__retarget_lock_acquire_recursive>
  400f8c:	e7d0      	b.n	400f30 <_gets_r+0x18>
  400f8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f90:	f013 0601 	ands.w	r6, r3, #1
  400f94:	d108      	bne.n	400fa8 <_gets_r+0x90>
  400f96:	89a3      	ldrh	r3, [r4, #12]
  400f98:	f413 7500 	ands.w	r5, r3, #512	; 0x200
  400f9c:	d1e9      	bne.n	400f72 <_gets_r+0x5a>
  400f9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fa0:	f000 f83a 	bl	401018 <__retarget_lock_release_recursive>
  400fa4:	462e      	mov	r6, r5
  400fa6:	e7e4      	b.n	400f72 <_gets_r+0x5a>
  400fa8:	2600      	movs	r6, #0
  400faa:	e7e2      	b.n	400f72 <_gets_r+0x5a>

00400fac <gets>:
  400fac:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <gets+0xc>)
  400fae:	4601      	mov	r1, r0
  400fb0:	6818      	ldr	r0, [r3, #0]
  400fb2:	f7ff bfb1 	b.w	400f18 <_gets_r>
  400fb6:	bf00      	nop
  400fb8:	2040000c 	.word	0x2040000c

00400fbc <__libc_init_array>:
  400fbc:	b570      	push	{r4, r5, r6, lr}
  400fbe:	4e0f      	ldr	r6, [pc, #60]	; (400ffc <__libc_init_array+0x40>)
  400fc0:	4d0f      	ldr	r5, [pc, #60]	; (401000 <__libc_init_array+0x44>)
  400fc2:	1b76      	subs	r6, r6, r5
  400fc4:	10b6      	asrs	r6, r6, #2
  400fc6:	bf18      	it	ne
  400fc8:	2400      	movne	r4, #0
  400fca:	d005      	beq.n	400fd8 <__libc_init_array+0x1c>
  400fcc:	3401      	adds	r4, #1
  400fce:	f855 3b04 	ldr.w	r3, [r5], #4
  400fd2:	4798      	blx	r3
  400fd4:	42a6      	cmp	r6, r4
  400fd6:	d1f9      	bne.n	400fcc <__libc_init_array+0x10>
  400fd8:	4e0a      	ldr	r6, [pc, #40]	; (401004 <__libc_init_array+0x48>)
  400fda:	4d0b      	ldr	r5, [pc, #44]	; (401008 <__libc_init_array+0x4c>)
  400fdc:	1b76      	subs	r6, r6, r5
  400fde:	f001 ffb9 	bl	402f54 <_init>
  400fe2:	10b6      	asrs	r6, r6, #2
  400fe4:	bf18      	it	ne
  400fe6:	2400      	movne	r4, #0
  400fe8:	d006      	beq.n	400ff8 <__libc_init_array+0x3c>
  400fea:	3401      	adds	r4, #1
  400fec:	f855 3b04 	ldr.w	r3, [r5], #4
  400ff0:	4798      	blx	r3
  400ff2:	42a6      	cmp	r6, r4
  400ff4:	d1f9      	bne.n	400fea <__libc_init_array+0x2e>
  400ff6:	bd70      	pop	{r4, r5, r6, pc}
  400ff8:	bd70      	pop	{r4, r5, r6, pc}
  400ffa:	bf00      	nop
  400ffc:	00402f60 	.word	0x00402f60
  401000:	00402f60 	.word	0x00402f60
  401004:	00402f68 	.word	0x00402f68
  401008:	00402f60 	.word	0x00402f60

0040100c <__retarget_lock_init_recursive>:
  40100c:	4770      	bx	lr
  40100e:	bf00      	nop

00401010 <__retarget_lock_close_recursive>:
  401010:	4770      	bx	lr
  401012:	bf00      	nop

00401014 <__retarget_lock_acquire_recursive>:
  401014:	4770      	bx	lr
  401016:	bf00      	nop

00401018 <__retarget_lock_release_recursive>:
  401018:	4770      	bx	lr
  40101a:	bf00      	nop

0040101c <memset>:
  40101c:	b470      	push	{r4, r5, r6}
  40101e:	0786      	lsls	r6, r0, #30
  401020:	d046      	beq.n	4010b0 <memset+0x94>
  401022:	1e54      	subs	r4, r2, #1
  401024:	2a00      	cmp	r2, #0
  401026:	d041      	beq.n	4010ac <memset+0x90>
  401028:	b2ca      	uxtb	r2, r1
  40102a:	4603      	mov	r3, r0
  40102c:	e002      	b.n	401034 <memset+0x18>
  40102e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401032:	d33b      	bcc.n	4010ac <memset+0x90>
  401034:	f803 2b01 	strb.w	r2, [r3], #1
  401038:	079d      	lsls	r5, r3, #30
  40103a:	d1f8      	bne.n	40102e <memset+0x12>
  40103c:	2c03      	cmp	r4, #3
  40103e:	d92e      	bls.n	40109e <memset+0x82>
  401040:	b2cd      	uxtb	r5, r1
  401042:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401046:	2c0f      	cmp	r4, #15
  401048:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40104c:	d919      	bls.n	401082 <memset+0x66>
  40104e:	f103 0210 	add.w	r2, r3, #16
  401052:	4626      	mov	r6, r4
  401054:	3e10      	subs	r6, #16
  401056:	2e0f      	cmp	r6, #15
  401058:	f842 5c10 	str.w	r5, [r2, #-16]
  40105c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401060:	f842 5c08 	str.w	r5, [r2, #-8]
  401064:	f842 5c04 	str.w	r5, [r2, #-4]
  401068:	f102 0210 	add.w	r2, r2, #16
  40106c:	d8f2      	bhi.n	401054 <memset+0x38>
  40106e:	f1a4 0210 	sub.w	r2, r4, #16
  401072:	f022 020f 	bic.w	r2, r2, #15
  401076:	f004 040f 	and.w	r4, r4, #15
  40107a:	3210      	adds	r2, #16
  40107c:	2c03      	cmp	r4, #3
  40107e:	4413      	add	r3, r2
  401080:	d90d      	bls.n	40109e <memset+0x82>
  401082:	461e      	mov	r6, r3
  401084:	4622      	mov	r2, r4
  401086:	3a04      	subs	r2, #4
  401088:	2a03      	cmp	r2, #3
  40108a:	f846 5b04 	str.w	r5, [r6], #4
  40108e:	d8fa      	bhi.n	401086 <memset+0x6a>
  401090:	1f22      	subs	r2, r4, #4
  401092:	f022 0203 	bic.w	r2, r2, #3
  401096:	3204      	adds	r2, #4
  401098:	4413      	add	r3, r2
  40109a:	f004 0403 	and.w	r4, r4, #3
  40109e:	b12c      	cbz	r4, 4010ac <memset+0x90>
  4010a0:	b2c9      	uxtb	r1, r1
  4010a2:	441c      	add	r4, r3
  4010a4:	f803 1b01 	strb.w	r1, [r3], #1
  4010a8:	429c      	cmp	r4, r3
  4010aa:	d1fb      	bne.n	4010a4 <memset+0x88>
  4010ac:	bc70      	pop	{r4, r5, r6}
  4010ae:	4770      	bx	lr
  4010b0:	4614      	mov	r4, r2
  4010b2:	4603      	mov	r3, r0
  4010b4:	e7c2      	b.n	40103c <memset+0x20>
  4010b6:	bf00      	nop

004010b8 <_puts_r>:
  4010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4010ba:	4605      	mov	r5, r0
  4010bc:	b089      	sub	sp, #36	; 0x24
  4010be:	4608      	mov	r0, r1
  4010c0:	460c      	mov	r4, r1
  4010c2:	f000 f93d 	bl	401340 <strlen>
  4010c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010c8:	4f21      	ldr	r7, [pc, #132]	; (401150 <_puts_r+0x98>)
  4010ca:	9404      	str	r4, [sp, #16]
  4010cc:	2601      	movs	r6, #1
  4010ce:	1c44      	adds	r4, r0, #1
  4010d0:	a904      	add	r1, sp, #16
  4010d2:	2202      	movs	r2, #2
  4010d4:	9403      	str	r4, [sp, #12]
  4010d6:	9005      	str	r0, [sp, #20]
  4010d8:	68ac      	ldr	r4, [r5, #8]
  4010da:	9706      	str	r7, [sp, #24]
  4010dc:	9607      	str	r6, [sp, #28]
  4010de:	9101      	str	r1, [sp, #4]
  4010e0:	9202      	str	r2, [sp, #8]
  4010e2:	b353      	cbz	r3, 40113a <_puts_r+0x82>
  4010e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4010e6:	f013 0f01 	tst.w	r3, #1
  4010ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010ee:	b29a      	uxth	r2, r3
  4010f0:	d101      	bne.n	4010f6 <_puts_r+0x3e>
  4010f2:	0590      	lsls	r0, r2, #22
  4010f4:	d525      	bpl.n	401142 <_puts_r+0x8a>
  4010f6:	0491      	lsls	r1, r2, #18
  4010f8:	d406      	bmi.n	401108 <_puts_r+0x50>
  4010fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4010fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  401104:	81a3      	strh	r3, [r4, #12]
  401106:	6662      	str	r2, [r4, #100]	; 0x64
  401108:	4628      	mov	r0, r5
  40110a:	aa01      	add	r2, sp, #4
  40110c:	4621      	mov	r1, r4
  40110e:	f000 fc27 	bl	401960 <__sfvwrite_r>
  401112:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401114:	2800      	cmp	r0, #0
  401116:	bf0c      	ite	eq
  401118:	250a      	moveq	r5, #10
  40111a:	f04f 35ff 	movne.w	r5, #4294967295
  40111e:	07da      	lsls	r2, r3, #31
  401120:	d402      	bmi.n	401128 <_puts_r+0x70>
  401122:	89a3      	ldrh	r3, [r4, #12]
  401124:	059b      	lsls	r3, r3, #22
  401126:	d502      	bpl.n	40112e <_puts_r+0x76>
  401128:	4628      	mov	r0, r5
  40112a:	b009      	add	sp, #36	; 0x24
  40112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40112e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401130:	f7ff ff72 	bl	401018 <__retarget_lock_release_recursive>
  401134:	4628      	mov	r0, r5
  401136:	b009      	add	sp, #36	; 0x24
  401138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40113a:	4628      	mov	r0, r5
  40113c:	f000 fa88 	bl	401650 <__sinit>
  401140:	e7d0      	b.n	4010e4 <_puts_r+0x2c>
  401142:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401144:	f7ff ff66 	bl	401014 <__retarget_lock_acquire_recursive>
  401148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40114c:	b29a      	uxth	r2, r3
  40114e:	e7d2      	b.n	4010f6 <_puts_r+0x3e>
  401150:	00402f50 	.word	0x00402f50

00401154 <puts>:
  401154:	4b02      	ldr	r3, [pc, #8]	; (401160 <puts+0xc>)
  401156:	4601      	mov	r1, r0
  401158:	6818      	ldr	r0, [r3, #0]
  40115a:	f7ff bfad 	b.w	4010b8 <_puts_r>
  40115e:	bf00      	nop
  401160:	2040000c 	.word	0x2040000c

00401164 <__srget_r>:
  401164:	b538      	push	{r3, r4, r5, lr}
  401166:	460c      	mov	r4, r1
  401168:	4605      	mov	r5, r0
  40116a:	b108      	cbz	r0, 401170 <__srget_r+0xc>
  40116c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40116e:	b163      	cbz	r3, 40118a <__srget_r+0x26>
  401170:	4628      	mov	r0, r5
  401172:	4621      	mov	r1, r4
  401174:	f001 fbf6 	bl	402964 <__srefill_r>
  401178:	b950      	cbnz	r0, 401190 <__srget_r+0x2c>
  40117a:	e894 000c 	ldmia.w	r4, {r2, r3}
  40117e:	3b01      	subs	r3, #1
  401180:	1c51      	adds	r1, r2, #1
  401182:	e884 000a 	stmia.w	r4, {r1, r3}
  401186:	7810      	ldrb	r0, [r2, #0]
  401188:	bd38      	pop	{r3, r4, r5, pc}
  40118a:	f000 fa61 	bl	401650 <__sinit>
  40118e:	e7ef      	b.n	401170 <__srget_r+0xc>
  401190:	f04f 30ff 	mov.w	r0, #4294967295
  401194:	bd38      	pop	{r3, r4, r5, pc}
  401196:	bf00      	nop

00401198 <setbuf>:
  401198:	2900      	cmp	r1, #0
  40119a:	bf0c      	ite	eq
  40119c:	2202      	moveq	r2, #2
  40119e:	2200      	movne	r2, #0
  4011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4011a4:	f000 b800 	b.w	4011a8 <setvbuf>

004011a8 <setvbuf>:
  4011a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4011ac:	4c61      	ldr	r4, [pc, #388]	; (401334 <setvbuf+0x18c>)
  4011ae:	6825      	ldr	r5, [r4, #0]
  4011b0:	b083      	sub	sp, #12
  4011b2:	4604      	mov	r4, r0
  4011b4:	460f      	mov	r7, r1
  4011b6:	4690      	mov	r8, r2
  4011b8:	461e      	mov	r6, r3
  4011ba:	b115      	cbz	r5, 4011c2 <setvbuf+0x1a>
  4011bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011be:	2b00      	cmp	r3, #0
  4011c0:	d064      	beq.n	40128c <setvbuf+0xe4>
  4011c2:	f1b8 0f02 	cmp.w	r8, #2
  4011c6:	d006      	beq.n	4011d6 <setvbuf+0x2e>
  4011c8:	f1b8 0f01 	cmp.w	r8, #1
  4011cc:	f200 809f 	bhi.w	40130e <setvbuf+0x166>
  4011d0:	2e00      	cmp	r6, #0
  4011d2:	f2c0 809c 	blt.w	40130e <setvbuf+0x166>
  4011d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4011d8:	07d8      	lsls	r0, r3, #31
  4011da:	d534      	bpl.n	401246 <setvbuf+0x9e>
  4011dc:	4621      	mov	r1, r4
  4011de:	4628      	mov	r0, r5
  4011e0:	f000 f9cc 	bl	40157c <_fflush_r>
  4011e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4011e6:	b141      	cbz	r1, 4011fa <setvbuf+0x52>
  4011e8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4011ec:	4299      	cmp	r1, r3
  4011ee:	d002      	beq.n	4011f6 <setvbuf+0x4e>
  4011f0:	4628      	mov	r0, r5
  4011f2:	f000 facf 	bl	401794 <_free_r>
  4011f6:	2300      	movs	r3, #0
  4011f8:	6323      	str	r3, [r4, #48]	; 0x30
  4011fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011fe:	2200      	movs	r2, #0
  401200:	61a2      	str	r2, [r4, #24]
  401202:	6062      	str	r2, [r4, #4]
  401204:	061a      	lsls	r2, r3, #24
  401206:	d43a      	bmi.n	40127e <setvbuf+0xd6>
  401208:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40120c:	f023 0303 	bic.w	r3, r3, #3
  401210:	f1b8 0f02 	cmp.w	r8, #2
  401214:	81a3      	strh	r3, [r4, #12]
  401216:	d01d      	beq.n	401254 <setvbuf+0xac>
  401218:	ab01      	add	r3, sp, #4
  40121a:	466a      	mov	r2, sp
  40121c:	4621      	mov	r1, r4
  40121e:	4628      	mov	r0, r5
  401220:	f000 fd66 	bl	401cf0 <__swhatbuf_r>
  401224:	89a3      	ldrh	r3, [r4, #12]
  401226:	4318      	orrs	r0, r3
  401228:	81a0      	strh	r0, [r4, #12]
  40122a:	2e00      	cmp	r6, #0
  40122c:	d132      	bne.n	401294 <setvbuf+0xec>
  40122e:	9e00      	ldr	r6, [sp, #0]
  401230:	4630      	mov	r0, r6
  401232:	f000 fdd5 	bl	401de0 <malloc>
  401236:	4607      	mov	r7, r0
  401238:	2800      	cmp	r0, #0
  40123a:	d06b      	beq.n	401314 <setvbuf+0x16c>
  40123c:	89a3      	ldrh	r3, [r4, #12]
  40123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401242:	81a3      	strh	r3, [r4, #12]
  401244:	e028      	b.n	401298 <setvbuf+0xf0>
  401246:	89a3      	ldrh	r3, [r4, #12]
  401248:	0599      	lsls	r1, r3, #22
  40124a:	d4c7      	bmi.n	4011dc <setvbuf+0x34>
  40124c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40124e:	f7ff fee1 	bl	401014 <__retarget_lock_acquire_recursive>
  401252:	e7c3      	b.n	4011dc <setvbuf+0x34>
  401254:	2500      	movs	r5, #0
  401256:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401258:	2600      	movs	r6, #0
  40125a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40125e:	f043 0302 	orr.w	r3, r3, #2
  401262:	2001      	movs	r0, #1
  401264:	60a6      	str	r6, [r4, #8]
  401266:	07ce      	lsls	r6, r1, #31
  401268:	81a3      	strh	r3, [r4, #12]
  40126a:	6022      	str	r2, [r4, #0]
  40126c:	6122      	str	r2, [r4, #16]
  40126e:	6160      	str	r0, [r4, #20]
  401270:	d401      	bmi.n	401276 <setvbuf+0xce>
  401272:	0598      	lsls	r0, r3, #22
  401274:	d53e      	bpl.n	4012f4 <setvbuf+0x14c>
  401276:	4628      	mov	r0, r5
  401278:	b003      	add	sp, #12
  40127a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40127e:	6921      	ldr	r1, [r4, #16]
  401280:	4628      	mov	r0, r5
  401282:	f000 fa87 	bl	401794 <_free_r>
  401286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40128a:	e7bd      	b.n	401208 <setvbuf+0x60>
  40128c:	4628      	mov	r0, r5
  40128e:	f000 f9df 	bl	401650 <__sinit>
  401292:	e796      	b.n	4011c2 <setvbuf+0x1a>
  401294:	2f00      	cmp	r7, #0
  401296:	d0cb      	beq.n	401230 <setvbuf+0x88>
  401298:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40129a:	2b00      	cmp	r3, #0
  40129c:	d033      	beq.n	401306 <setvbuf+0x15e>
  40129e:	9b00      	ldr	r3, [sp, #0]
  4012a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4012a4:	6027      	str	r7, [r4, #0]
  4012a6:	429e      	cmp	r6, r3
  4012a8:	bf1c      	itt	ne
  4012aa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4012ae:	81a2      	strhne	r2, [r4, #12]
  4012b0:	f1b8 0f01 	cmp.w	r8, #1
  4012b4:	bf04      	itt	eq
  4012b6:	f042 0201 	orreq.w	r2, r2, #1
  4012ba:	81a2      	strheq	r2, [r4, #12]
  4012bc:	b292      	uxth	r2, r2
  4012be:	f012 0308 	ands.w	r3, r2, #8
  4012c2:	6127      	str	r7, [r4, #16]
  4012c4:	6166      	str	r6, [r4, #20]
  4012c6:	d00e      	beq.n	4012e6 <setvbuf+0x13e>
  4012c8:	07d1      	lsls	r1, r2, #31
  4012ca:	d51a      	bpl.n	401302 <setvbuf+0x15a>
  4012cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4012ce:	4276      	negs	r6, r6
  4012d0:	2300      	movs	r3, #0
  4012d2:	f015 0501 	ands.w	r5, r5, #1
  4012d6:	61a6      	str	r6, [r4, #24]
  4012d8:	60a3      	str	r3, [r4, #8]
  4012da:	d009      	beq.n	4012f0 <setvbuf+0x148>
  4012dc:	2500      	movs	r5, #0
  4012de:	4628      	mov	r0, r5
  4012e0:	b003      	add	sp, #12
  4012e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4012e6:	60a3      	str	r3, [r4, #8]
  4012e8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4012ea:	f015 0501 	ands.w	r5, r5, #1
  4012ee:	d1f5      	bne.n	4012dc <setvbuf+0x134>
  4012f0:	0593      	lsls	r3, r2, #22
  4012f2:	d4c0      	bmi.n	401276 <setvbuf+0xce>
  4012f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4012f6:	f7ff fe8f 	bl	401018 <__retarget_lock_release_recursive>
  4012fa:	4628      	mov	r0, r5
  4012fc:	b003      	add	sp, #12
  4012fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401302:	60a6      	str	r6, [r4, #8]
  401304:	e7f0      	b.n	4012e8 <setvbuf+0x140>
  401306:	4628      	mov	r0, r5
  401308:	f000 f9a2 	bl	401650 <__sinit>
  40130c:	e7c7      	b.n	40129e <setvbuf+0xf6>
  40130e:	f04f 35ff 	mov.w	r5, #4294967295
  401312:	e7b0      	b.n	401276 <setvbuf+0xce>
  401314:	f8dd 9000 	ldr.w	r9, [sp]
  401318:	45b1      	cmp	r9, r6
  40131a:	d004      	beq.n	401326 <setvbuf+0x17e>
  40131c:	4648      	mov	r0, r9
  40131e:	f000 fd5f 	bl	401de0 <malloc>
  401322:	4607      	mov	r7, r0
  401324:	b920      	cbnz	r0, 401330 <setvbuf+0x188>
  401326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40132a:	f04f 35ff 	mov.w	r5, #4294967295
  40132e:	e792      	b.n	401256 <setvbuf+0xae>
  401330:	464e      	mov	r6, r9
  401332:	e783      	b.n	40123c <setvbuf+0x94>
  401334:	2040000c 	.word	0x2040000c
	...

00401340 <strlen>:
  401340:	f890 f000 	pld	[r0]
  401344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401348:	f020 0107 	bic.w	r1, r0, #7
  40134c:	f06f 0c00 	mvn.w	ip, #0
  401350:	f010 0407 	ands.w	r4, r0, #7
  401354:	f891 f020 	pld	[r1, #32]
  401358:	f040 8049 	bne.w	4013ee <strlen+0xae>
  40135c:	f04f 0400 	mov.w	r4, #0
  401360:	f06f 0007 	mvn.w	r0, #7
  401364:	e9d1 2300 	ldrd	r2, r3, [r1]
  401368:	f891 f040 	pld	[r1, #64]	; 0x40
  40136c:	f100 0008 	add.w	r0, r0, #8
  401370:	fa82 f24c 	uadd8	r2, r2, ip
  401374:	faa4 f28c 	sel	r2, r4, ip
  401378:	fa83 f34c 	uadd8	r3, r3, ip
  40137c:	faa2 f38c 	sel	r3, r2, ip
  401380:	bb4b      	cbnz	r3, 4013d6 <strlen+0x96>
  401382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401386:	fa82 f24c 	uadd8	r2, r2, ip
  40138a:	f100 0008 	add.w	r0, r0, #8
  40138e:	faa4 f28c 	sel	r2, r4, ip
  401392:	fa83 f34c 	uadd8	r3, r3, ip
  401396:	faa2 f38c 	sel	r3, r2, ip
  40139a:	b9e3      	cbnz	r3, 4013d6 <strlen+0x96>
  40139c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4013a0:	fa82 f24c 	uadd8	r2, r2, ip
  4013a4:	f100 0008 	add.w	r0, r0, #8
  4013a8:	faa4 f28c 	sel	r2, r4, ip
  4013ac:	fa83 f34c 	uadd8	r3, r3, ip
  4013b0:	faa2 f38c 	sel	r3, r2, ip
  4013b4:	b97b      	cbnz	r3, 4013d6 <strlen+0x96>
  4013b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4013ba:	f101 0120 	add.w	r1, r1, #32
  4013be:	fa82 f24c 	uadd8	r2, r2, ip
  4013c2:	f100 0008 	add.w	r0, r0, #8
  4013c6:	faa4 f28c 	sel	r2, r4, ip
  4013ca:	fa83 f34c 	uadd8	r3, r3, ip
  4013ce:	faa2 f38c 	sel	r3, r2, ip
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	d0c6      	beq.n	401364 <strlen+0x24>
  4013d6:	2a00      	cmp	r2, #0
  4013d8:	bf04      	itt	eq
  4013da:	3004      	addeq	r0, #4
  4013dc:	461a      	moveq	r2, r3
  4013de:	ba12      	rev	r2, r2
  4013e0:	fab2 f282 	clz	r2, r2
  4013e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4013e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4013ec:	4770      	bx	lr
  4013ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4013f2:	f004 0503 	and.w	r5, r4, #3
  4013f6:	f1c4 0000 	rsb	r0, r4, #0
  4013fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4013fe:	f014 0f04 	tst.w	r4, #4
  401402:	f891 f040 	pld	[r1, #64]	; 0x40
  401406:	fa0c f505 	lsl.w	r5, ip, r5
  40140a:	ea62 0205 	orn	r2, r2, r5
  40140e:	bf1c      	itt	ne
  401410:	ea63 0305 	ornne	r3, r3, r5
  401414:	4662      	movne	r2, ip
  401416:	f04f 0400 	mov.w	r4, #0
  40141a:	e7a9      	b.n	401370 <strlen+0x30>

0040141c <register_fini>:
  40141c:	4b02      	ldr	r3, [pc, #8]	; (401428 <register_fini+0xc>)
  40141e:	b113      	cbz	r3, 401426 <register_fini+0xa>
  401420:	4802      	ldr	r0, [pc, #8]	; (40142c <register_fini+0x10>)
  401422:	f000 b805 	b.w	401430 <atexit>
  401426:	4770      	bx	lr
  401428:	00000000 	.word	0x00000000
  40142c:	004016c1 	.word	0x004016c1

00401430 <atexit>:
  401430:	2300      	movs	r3, #0
  401432:	4601      	mov	r1, r0
  401434:	461a      	mov	r2, r3
  401436:	4618      	mov	r0, r3
  401438:	f001 bbee 	b.w	402c18 <__register_exitproc>

0040143c <__sflush_r>:
  40143c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401440:	b29a      	uxth	r2, r3
  401442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401446:	460d      	mov	r5, r1
  401448:	0711      	lsls	r1, r2, #28
  40144a:	4680      	mov	r8, r0
  40144c:	d43a      	bmi.n	4014c4 <__sflush_r+0x88>
  40144e:	686a      	ldr	r2, [r5, #4]
  401450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401454:	2a00      	cmp	r2, #0
  401456:	81ab      	strh	r3, [r5, #12]
  401458:	dd6f      	ble.n	40153a <__sflush_r+0xfe>
  40145a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40145c:	2c00      	cmp	r4, #0
  40145e:	d049      	beq.n	4014f4 <__sflush_r+0xb8>
  401460:	2200      	movs	r2, #0
  401462:	b29b      	uxth	r3, r3
  401464:	f8d8 6000 	ldr.w	r6, [r8]
  401468:	f8c8 2000 	str.w	r2, [r8]
  40146c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401470:	d067      	beq.n	401542 <__sflush_r+0x106>
  401472:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401474:	075f      	lsls	r7, r3, #29
  401476:	d505      	bpl.n	401484 <__sflush_r+0x48>
  401478:	6869      	ldr	r1, [r5, #4]
  40147a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40147c:	1a52      	subs	r2, r2, r1
  40147e:	b10b      	cbz	r3, 401484 <__sflush_r+0x48>
  401480:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401482:	1ad2      	subs	r2, r2, r3
  401484:	2300      	movs	r3, #0
  401486:	69e9      	ldr	r1, [r5, #28]
  401488:	4640      	mov	r0, r8
  40148a:	47a0      	blx	r4
  40148c:	1c44      	adds	r4, r0, #1
  40148e:	d03c      	beq.n	40150a <__sflush_r+0xce>
  401490:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401494:	692a      	ldr	r2, [r5, #16]
  401496:	602a      	str	r2, [r5, #0]
  401498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40149c:	2200      	movs	r2, #0
  40149e:	81ab      	strh	r3, [r5, #12]
  4014a0:	04db      	lsls	r3, r3, #19
  4014a2:	606a      	str	r2, [r5, #4]
  4014a4:	d447      	bmi.n	401536 <__sflush_r+0xfa>
  4014a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4014a8:	f8c8 6000 	str.w	r6, [r8]
  4014ac:	b311      	cbz	r1, 4014f4 <__sflush_r+0xb8>
  4014ae:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4014b2:	4299      	cmp	r1, r3
  4014b4:	d002      	beq.n	4014bc <__sflush_r+0x80>
  4014b6:	4640      	mov	r0, r8
  4014b8:	f000 f96c 	bl	401794 <_free_r>
  4014bc:	2000      	movs	r0, #0
  4014be:	6328      	str	r0, [r5, #48]	; 0x30
  4014c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014c4:	692e      	ldr	r6, [r5, #16]
  4014c6:	b1ae      	cbz	r6, 4014f4 <__sflush_r+0xb8>
  4014c8:	682c      	ldr	r4, [r5, #0]
  4014ca:	602e      	str	r6, [r5, #0]
  4014cc:	0791      	lsls	r1, r2, #30
  4014ce:	bf0c      	ite	eq
  4014d0:	696b      	ldreq	r3, [r5, #20]
  4014d2:	2300      	movne	r3, #0
  4014d4:	1ba4      	subs	r4, r4, r6
  4014d6:	60ab      	str	r3, [r5, #8]
  4014d8:	e00a      	b.n	4014f0 <__sflush_r+0xb4>
  4014da:	4623      	mov	r3, r4
  4014dc:	4632      	mov	r2, r6
  4014de:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4014e0:	69e9      	ldr	r1, [r5, #28]
  4014e2:	4640      	mov	r0, r8
  4014e4:	47b8      	blx	r7
  4014e6:	2800      	cmp	r0, #0
  4014e8:	eba4 0400 	sub.w	r4, r4, r0
  4014ec:	4406      	add	r6, r0
  4014ee:	dd04      	ble.n	4014fa <__sflush_r+0xbe>
  4014f0:	2c00      	cmp	r4, #0
  4014f2:	dcf2      	bgt.n	4014da <__sflush_r+0x9e>
  4014f4:	2000      	movs	r0, #0
  4014f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014fa:	89ab      	ldrh	r3, [r5, #12]
  4014fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401500:	81ab      	strh	r3, [r5, #12]
  401502:	f04f 30ff 	mov.w	r0, #4294967295
  401506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40150a:	f8d8 4000 	ldr.w	r4, [r8]
  40150e:	2c1d      	cmp	r4, #29
  401510:	d8f3      	bhi.n	4014fa <__sflush_r+0xbe>
  401512:	4b19      	ldr	r3, [pc, #100]	; (401578 <__sflush_r+0x13c>)
  401514:	40e3      	lsrs	r3, r4
  401516:	43db      	mvns	r3, r3
  401518:	f013 0301 	ands.w	r3, r3, #1
  40151c:	d1ed      	bne.n	4014fa <__sflush_r+0xbe>
  40151e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  401522:	606b      	str	r3, [r5, #4]
  401524:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401528:	6929      	ldr	r1, [r5, #16]
  40152a:	81ab      	strh	r3, [r5, #12]
  40152c:	04da      	lsls	r2, r3, #19
  40152e:	6029      	str	r1, [r5, #0]
  401530:	d5b9      	bpl.n	4014a6 <__sflush_r+0x6a>
  401532:	2c00      	cmp	r4, #0
  401534:	d1b7      	bne.n	4014a6 <__sflush_r+0x6a>
  401536:	6528      	str	r0, [r5, #80]	; 0x50
  401538:	e7b5      	b.n	4014a6 <__sflush_r+0x6a>
  40153a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40153c:	2a00      	cmp	r2, #0
  40153e:	dc8c      	bgt.n	40145a <__sflush_r+0x1e>
  401540:	e7d8      	b.n	4014f4 <__sflush_r+0xb8>
  401542:	2301      	movs	r3, #1
  401544:	69e9      	ldr	r1, [r5, #28]
  401546:	4640      	mov	r0, r8
  401548:	47a0      	blx	r4
  40154a:	1c43      	adds	r3, r0, #1
  40154c:	4602      	mov	r2, r0
  40154e:	d002      	beq.n	401556 <__sflush_r+0x11a>
  401550:	89ab      	ldrh	r3, [r5, #12]
  401552:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401554:	e78e      	b.n	401474 <__sflush_r+0x38>
  401556:	f8d8 3000 	ldr.w	r3, [r8]
  40155a:	2b00      	cmp	r3, #0
  40155c:	d0f8      	beq.n	401550 <__sflush_r+0x114>
  40155e:	2b1d      	cmp	r3, #29
  401560:	d001      	beq.n	401566 <__sflush_r+0x12a>
  401562:	2b16      	cmp	r3, #22
  401564:	d102      	bne.n	40156c <__sflush_r+0x130>
  401566:	f8c8 6000 	str.w	r6, [r8]
  40156a:	e7c3      	b.n	4014f4 <__sflush_r+0xb8>
  40156c:	89ab      	ldrh	r3, [r5, #12]
  40156e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401572:	81ab      	strh	r3, [r5, #12]
  401574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401578:	20400001 	.word	0x20400001

0040157c <_fflush_r>:
  40157c:	b538      	push	{r3, r4, r5, lr}
  40157e:	460d      	mov	r5, r1
  401580:	4604      	mov	r4, r0
  401582:	b108      	cbz	r0, 401588 <_fflush_r+0xc>
  401584:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401586:	b1bb      	cbz	r3, 4015b8 <_fflush_r+0x3c>
  401588:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40158c:	b188      	cbz	r0, 4015b2 <_fflush_r+0x36>
  40158e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401590:	07db      	lsls	r3, r3, #31
  401592:	d401      	bmi.n	401598 <_fflush_r+0x1c>
  401594:	0581      	lsls	r1, r0, #22
  401596:	d517      	bpl.n	4015c8 <_fflush_r+0x4c>
  401598:	4620      	mov	r0, r4
  40159a:	4629      	mov	r1, r5
  40159c:	f7ff ff4e 	bl	40143c <__sflush_r>
  4015a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4015a2:	07da      	lsls	r2, r3, #31
  4015a4:	4604      	mov	r4, r0
  4015a6:	d402      	bmi.n	4015ae <_fflush_r+0x32>
  4015a8:	89ab      	ldrh	r3, [r5, #12]
  4015aa:	059b      	lsls	r3, r3, #22
  4015ac:	d507      	bpl.n	4015be <_fflush_r+0x42>
  4015ae:	4620      	mov	r0, r4
  4015b0:	bd38      	pop	{r3, r4, r5, pc}
  4015b2:	4604      	mov	r4, r0
  4015b4:	4620      	mov	r0, r4
  4015b6:	bd38      	pop	{r3, r4, r5, pc}
  4015b8:	f000 f84a 	bl	401650 <__sinit>
  4015bc:	e7e4      	b.n	401588 <_fflush_r+0xc>
  4015be:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4015c0:	f7ff fd2a 	bl	401018 <__retarget_lock_release_recursive>
  4015c4:	4620      	mov	r0, r4
  4015c6:	bd38      	pop	{r3, r4, r5, pc}
  4015c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4015ca:	f7ff fd23 	bl	401014 <__retarget_lock_acquire_recursive>
  4015ce:	e7e3      	b.n	401598 <_fflush_r+0x1c>

004015d0 <fflush>:
  4015d0:	b120      	cbz	r0, 4015dc <fflush+0xc>
  4015d2:	4b05      	ldr	r3, [pc, #20]	; (4015e8 <fflush+0x18>)
  4015d4:	4601      	mov	r1, r0
  4015d6:	6818      	ldr	r0, [r3, #0]
  4015d8:	f7ff bfd0 	b.w	40157c <_fflush_r>
  4015dc:	4b03      	ldr	r3, [pc, #12]	; (4015ec <fflush+0x1c>)
  4015de:	4904      	ldr	r1, [pc, #16]	; (4015f0 <fflush+0x20>)
  4015e0:	6818      	ldr	r0, [r3, #0]
  4015e2:	f000 bb5b 	b.w	401c9c <_fwalk_reent>
  4015e6:	bf00      	nop
  4015e8:	2040000c 	.word	0x2040000c
  4015ec:	00402f4c 	.word	0x00402f4c
  4015f0:	0040157d 	.word	0x0040157d

004015f4 <_cleanup_r>:
  4015f4:	4901      	ldr	r1, [pc, #4]	; (4015fc <_cleanup_r+0x8>)
  4015f6:	f000 bb51 	b.w	401c9c <_fwalk_reent>
  4015fa:	bf00      	nop
  4015fc:	00402d01 	.word	0x00402d01

00401600 <std.isra.0>:
  401600:	b510      	push	{r4, lr}
  401602:	2300      	movs	r3, #0
  401604:	4604      	mov	r4, r0
  401606:	8181      	strh	r1, [r0, #12]
  401608:	81c2      	strh	r2, [r0, #14]
  40160a:	6003      	str	r3, [r0, #0]
  40160c:	6043      	str	r3, [r0, #4]
  40160e:	6083      	str	r3, [r0, #8]
  401610:	6643      	str	r3, [r0, #100]	; 0x64
  401612:	6103      	str	r3, [r0, #16]
  401614:	6143      	str	r3, [r0, #20]
  401616:	6183      	str	r3, [r0, #24]
  401618:	4619      	mov	r1, r3
  40161a:	2208      	movs	r2, #8
  40161c:	305c      	adds	r0, #92	; 0x5c
  40161e:	f7ff fcfd 	bl	40101c <memset>
  401622:	4807      	ldr	r0, [pc, #28]	; (401640 <std.isra.0+0x40>)
  401624:	4907      	ldr	r1, [pc, #28]	; (401644 <std.isra.0+0x44>)
  401626:	4a08      	ldr	r2, [pc, #32]	; (401648 <std.isra.0+0x48>)
  401628:	4b08      	ldr	r3, [pc, #32]	; (40164c <std.isra.0+0x4c>)
  40162a:	6220      	str	r0, [r4, #32]
  40162c:	61e4      	str	r4, [r4, #28]
  40162e:	6261      	str	r1, [r4, #36]	; 0x24
  401630:	62a2      	str	r2, [r4, #40]	; 0x28
  401632:	62e3      	str	r3, [r4, #44]	; 0x2c
  401634:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40163c:	f7ff bce6 	b.w	40100c <__retarget_lock_init_recursive>
  401640:	00402a9d 	.word	0x00402a9d
  401644:	00402ac1 	.word	0x00402ac1
  401648:	00402afd 	.word	0x00402afd
  40164c:	00402b1d 	.word	0x00402b1d

00401650 <__sinit>:
  401650:	b510      	push	{r4, lr}
  401652:	4604      	mov	r4, r0
  401654:	4812      	ldr	r0, [pc, #72]	; (4016a0 <__sinit+0x50>)
  401656:	f7ff fcdd 	bl	401014 <__retarget_lock_acquire_recursive>
  40165a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40165c:	b9d2      	cbnz	r2, 401694 <__sinit+0x44>
  40165e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  401662:	4810      	ldr	r0, [pc, #64]	; (4016a4 <__sinit+0x54>)
  401664:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401668:	2103      	movs	r1, #3
  40166a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40166e:	63e0      	str	r0, [r4, #60]	; 0x3c
  401670:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401674:	6860      	ldr	r0, [r4, #4]
  401676:	2104      	movs	r1, #4
  401678:	f7ff ffc2 	bl	401600 <std.isra.0>
  40167c:	2201      	movs	r2, #1
  40167e:	2109      	movs	r1, #9
  401680:	68a0      	ldr	r0, [r4, #8]
  401682:	f7ff ffbd 	bl	401600 <std.isra.0>
  401686:	2202      	movs	r2, #2
  401688:	2112      	movs	r1, #18
  40168a:	68e0      	ldr	r0, [r4, #12]
  40168c:	f7ff ffb8 	bl	401600 <std.isra.0>
  401690:	2301      	movs	r3, #1
  401692:	63a3      	str	r3, [r4, #56]	; 0x38
  401694:	4802      	ldr	r0, [pc, #8]	; (4016a0 <__sinit+0x50>)
  401696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40169a:	f7ff bcbd 	b.w	401018 <__retarget_lock_release_recursive>
  40169e:	bf00      	nop
  4016a0:	20401108 	.word	0x20401108
  4016a4:	004015f5 	.word	0x004015f5

004016a8 <__sfp_lock_acquire>:
  4016a8:	4801      	ldr	r0, [pc, #4]	; (4016b0 <__sfp_lock_acquire+0x8>)
  4016aa:	f7ff bcb3 	b.w	401014 <__retarget_lock_acquire_recursive>
  4016ae:	bf00      	nop
  4016b0:	2040111c 	.word	0x2040111c

004016b4 <__sfp_lock_release>:
  4016b4:	4801      	ldr	r0, [pc, #4]	; (4016bc <__sfp_lock_release+0x8>)
  4016b6:	f7ff bcaf 	b.w	401018 <__retarget_lock_release_recursive>
  4016ba:	bf00      	nop
  4016bc:	2040111c 	.word	0x2040111c

004016c0 <__libc_fini_array>:
  4016c0:	b538      	push	{r3, r4, r5, lr}
  4016c2:	4c0a      	ldr	r4, [pc, #40]	; (4016ec <__libc_fini_array+0x2c>)
  4016c4:	4d0a      	ldr	r5, [pc, #40]	; (4016f0 <__libc_fini_array+0x30>)
  4016c6:	1b64      	subs	r4, r4, r5
  4016c8:	10a4      	asrs	r4, r4, #2
  4016ca:	d00a      	beq.n	4016e2 <__libc_fini_array+0x22>
  4016cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4016d0:	3b01      	subs	r3, #1
  4016d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4016d6:	3c01      	subs	r4, #1
  4016d8:	f855 3904 	ldr.w	r3, [r5], #-4
  4016dc:	4798      	blx	r3
  4016de:	2c00      	cmp	r4, #0
  4016e0:	d1f9      	bne.n	4016d6 <__libc_fini_array+0x16>
  4016e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4016e6:	f001 bc3f 	b.w	402f68 <_fini>
  4016ea:	bf00      	nop
  4016ec:	00402f78 	.word	0x00402f78
  4016f0:	00402f74 	.word	0x00402f74

004016f4 <_malloc_trim_r>:
  4016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016f6:	4f24      	ldr	r7, [pc, #144]	; (401788 <_malloc_trim_r+0x94>)
  4016f8:	460c      	mov	r4, r1
  4016fa:	4606      	mov	r6, r0
  4016fc:	f000 ff76 	bl	4025ec <__malloc_lock>
  401700:	68bb      	ldr	r3, [r7, #8]
  401702:	685d      	ldr	r5, [r3, #4]
  401704:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401708:	310f      	adds	r1, #15
  40170a:	f025 0503 	bic.w	r5, r5, #3
  40170e:	4429      	add	r1, r5
  401710:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401714:	f021 010f 	bic.w	r1, r1, #15
  401718:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40171c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401720:	db07      	blt.n	401732 <_malloc_trim_r+0x3e>
  401722:	2100      	movs	r1, #0
  401724:	4630      	mov	r0, r6
  401726:	f001 f9a7 	bl	402a78 <_sbrk_r>
  40172a:	68bb      	ldr	r3, [r7, #8]
  40172c:	442b      	add	r3, r5
  40172e:	4298      	cmp	r0, r3
  401730:	d004      	beq.n	40173c <_malloc_trim_r+0x48>
  401732:	4630      	mov	r0, r6
  401734:	f000 ff60 	bl	4025f8 <__malloc_unlock>
  401738:	2000      	movs	r0, #0
  40173a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40173c:	4261      	negs	r1, r4
  40173e:	4630      	mov	r0, r6
  401740:	f001 f99a 	bl	402a78 <_sbrk_r>
  401744:	3001      	adds	r0, #1
  401746:	d00d      	beq.n	401764 <_malloc_trim_r+0x70>
  401748:	4b10      	ldr	r3, [pc, #64]	; (40178c <_malloc_trim_r+0x98>)
  40174a:	68ba      	ldr	r2, [r7, #8]
  40174c:	6819      	ldr	r1, [r3, #0]
  40174e:	1b2d      	subs	r5, r5, r4
  401750:	f045 0501 	orr.w	r5, r5, #1
  401754:	4630      	mov	r0, r6
  401756:	1b09      	subs	r1, r1, r4
  401758:	6055      	str	r5, [r2, #4]
  40175a:	6019      	str	r1, [r3, #0]
  40175c:	f000 ff4c 	bl	4025f8 <__malloc_unlock>
  401760:	2001      	movs	r0, #1
  401762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401764:	2100      	movs	r1, #0
  401766:	4630      	mov	r0, r6
  401768:	f001 f986 	bl	402a78 <_sbrk_r>
  40176c:	68ba      	ldr	r2, [r7, #8]
  40176e:	1a83      	subs	r3, r0, r2
  401770:	2b0f      	cmp	r3, #15
  401772:	ddde      	ble.n	401732 <_malloc_trim_r+0x3e>
  401774:	4c06      	ldr	r4, [pc, #24]	; (401790 <_malloc_trim_r+0x9c>)
  401776:	4905      	ldr	r1, [pc, #20]	; (40178c <_malloc_trim_r+0x98>)
  401778:	6824      	ldr	r4, [r4, #0]
  40177a:	f043 0301 	orr.w	r3, r3, #1
  40177e:	1b00      	subs	r0, r0, r4
  401780:	6053      	str	r3, [r2, #4]
  401782:	6008      	str	r0, [r1, #0]
  401784:	e7d5      	b.n	401732 <_malloc_trim_r+0x3e>
  401786:	bf00      	nop
  401788:	2040043c 	.word	0x2040043c
  40178c:	204008e8 	.word	0x204008e8
  401790:	20400844 	.word	0x20400844

00401794 <_free_r>:
  401794:	2900      	cmp	r1, #0
  401796:	d044      	beq.n	401822 <_free_r+0x8e>
  401798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40179c:	460d      	mov	r5, r1
  40179e:	4680      	mov	r8, r0
  4017a0:	f000 ff24 	bl	4025ec <__malloc_lock>
  4017a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4017a8:	4969      	ldr	r1, [pc, #420]	; (401950 <_free_r+0x1bc>)
  4017aa:	f027 0301 	bic.w	r3, r7, #1
  4017ae:	f1a5 0408 	sub.w	r4, r5, #8
  4017b2:	18e2      	adds	r2, r4, r3
  4017b4:	688e      	ldr	r6, [r1, #8]
  4017b6:	6850      	ldr	r0, [r2, #4]
  4017b8:	42b2      	cmp	r2, r6
  4017ba:	f020 0003 	bic.w	r0, r0, #3
  4017be:	d05e      	beq.n	40187e <_free_r+0xea>
  4017c0:	07fe      	lsls	r6, r7, #31
  4017c2:	6050      	str	r0, [r2, #4]
  4017c4:	d40b      	bmi.n	4017de <_free_r+0x4a>
  4017c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4017ca:	1be4      	subs	r4, r4, r7
  4017cc:	f101 0e08 	add.w	lr, r1, #8
  4017d0:	68a5      	ldr	r5, [r4, #8]
  4017d2:	4575      	cmp	r5, lr
  4017d4:	443b      	add	r3, r7
  4017d6:	d06d      	beq.n	4018b4 <_free_r+0x120>
  4017d8:	68e7      	ldr	r7, [r4, #12]
  4017da:	60ef      	str	r7, [r5, #12]
  4017dc:	60bd      	str	r5, [r7, #8]
  4017de:	1815      	adds	r5, r2, r0
  4017e0:	686d      	ldr	r5, [r5, #4]
  4017e2:	07ed      	lsls	r5, r5, #31
  4017e4:	d53e      	bpl.n	401864 <_free_r+0xd0>
  4017e6:	f043 0201 	orr.w	r2, r3, #1
  4017ea:	6062      	str	r2, [r4, #4]
  4017ec:	50e3      	str	r3, [r4, r3]
  4017ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4017f2:	d217      	bcs.n	401824 <_free_r+0x90>
  4017f4:	08db      	lsrs	r3, r3, #3
  4017f6:	1c58      	adds	r0, r3, #1
  4017f8:	109a      	asrs	r2, r3, #2
  4017fa:	684d      	ldr	r5, [r1, #4]
  4017fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  401800:	60a7      	str	r7, [r4, #8]
  401802:	2301      	movs	r3, #1
  401804:	4093      	lsls	r3, r2
  401806:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40180a:	432b      	orrs	r3, r5
  40180c:	3a08      	subs	r2, #8
  40180e:	60e2      	str	r2, [r4, #12]
  401810:	604b      	str	r3, [r1, #4]
  401812:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401816:	60fc      	str	r4, [r7, #12]
  401818:	4640      	mov	r0, r8
  40181a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40181e:	f000 beeb 	b.w	4025f8 <__malloc_unlock>
  401822:	4770      	bx	lr
  401824:	0a5a      	lsrs	r2, r3, #9
  401826:	2a04      	cmp	r2, #4
  401828:	d852      	bhi.n	4018d0 <_free_r+0x13c>
  40182a:	099a      	lsrs	r2, r3, #6
  40182c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401830:	00ff      	lsls	r7, r7, #3
  401832:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401836:	19c8      	adds	r0, r1, r7
  401838:	59ca      	ldr	r2, [r1, r7]
  40183a:	3808      	subs	r0, #8
  40183c:	4290      	cmp	r0, r2
  40183e:	d04f      	beq.n	4018e0 <_free_r+0x14c>
  401840:	6851      	ldr	r1, [r2, #4]
  401842:	f021 0103 	bic.w	r1, r1, #3
  401846:	428b      	cmp	r3, r1
  401848:	d232      	bcs.n	4018b0 <_free_r+0x11c>
  40184a:	6892      	ldr	r2, [r2, #8]
  40184c:	4290      	cmp	r0, r2
  40184e:	d1f7      	bne.n	401840 <_free_r+0xac>
  401850:	68c3      	ldr	r3, [r0, #12]
  401852:	60a0      	str	r0, [r4, #8]
  401854:	60e3      	str	r3, [r4, #12]
  401856:	609c      	str	r4, [r3, #8]
  401858:	60c4      	str	r4, [r0, #12]
  40185a:	4640      	mov	r0, r8
  40185c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401860:	f000 beca 	b.w	4025f8 <__malloc_unlock>
  401864:	6895      	ldr	r5, [r2, #8]
  401866:	4f3b      	ldr	r7, [pc, #236]	; (401954 <_free_r+0x1c0>)
  401868:	42bd      	cmp	r5, r7
  40186a:	4403      	add	r3, r0
  40186c:	d040      	beq.n	4018f0 <_free_r+0x15c>
  40186e:	68d0      	ldr	r0, [r2, #12]
  401870:	60e8      	str	r0, [r5, #12]
  401872:	f043 0201 	orr.w	r2, r3, #1
  401876:	6085      	str	r5, [r0, #8]
  401878:	6062      	str	r2, [r4, #4]
  40187a:	50e3      	str	r3, [r4, r3]
  40187c:	e7b7      	b.n	4017ee <_free_r+0x5a>
  40187e:	07ff      	lsls	r7, r7, #31
  401880:	4403      	add	r3, r0
  401882:	d407      	bmi.n	401894 <_free_r+0x100>
  401884:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401888:	1aa4      	subs	r4, r4, r2
  40188a:	4413      	add	r3, r2
  40188c:	68a0      	ldr	r0, [r4, #8]
  40188e:	68e2      	ldr	r2, [r4, #12]
  401890:	60c2      	str	r2, [r0, #12]
  401892:	6090      	str	r0, [r2, #8]
  401894:	4a30      	ldr	r2, [pc, #192]	; (401958 <_free_r+0x1c4>)
  401896:	6812      	ldr	r2, [r2, #0]
  401898:	f043 0001 	orr.w	r0, r3, #1
  40189c:	4293      	cmp	r3, r2
  40189e:	6060      	str	r0, [r4, #4]
  4018a0:	608c      	str	r4, [r1, #8]
  4018a2:	d3b9      	bcc.n	401818 <_free_r+0x84>
  4018a4:	4b2d      	ldr	r3, [pc, #180]	; (40195c <_free_r+0x1c8>)
  4018a6:	4640      	mov	r0, r8
  4018a8:	6819      	ldr	r1, [r3, #0]
  4018aa:	f7ff ff23 	bl	4016f4 <_malloc_trim_r>
  4018ae:	e7b3      	b.n	401818 <_free_r+0x84>
  4018b0:	4610      	mov	r0, r2
  4018b2:	e7cd      	b.n	401850 <_free_r+0xbc>
  4018b4:	1811      	adds	r1, r2, r0
  4018b6:	6849      	ldr	r1, [r1, #4]
  4018b8:	07c9      	lsls	r1, r1, #31
  4018ba:	d444      	bmi.n	401946 <_free_r+0x1b2>
  4018bc:	6891      	ldr	r1, [r2, #8]
  4018be:	68d2      	ldr	r2, [r2, #12]
  4018c0:	60ca      	str	r2, [r1, #12]
  4018c2:	4403      	add	r3, r0
  4018c4:	f043 0001 	orr.w	r0, r3, #1
  4018c8:	6091      	str	r1, [r2, #8]
  4018ca:	6060      	str	r0, [r4, #4]
  4018cc:	50e3      	str	r3, [r4, r3]
  4018ce:	e7a3      	b.n	401818 <_free_r+0x84>
  4018d0:	2a14      	cmp	r2, #20
  4018d2:	d816      	bhi.n	401902 <_free_r+0x16e>
  4018d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4018d8:	00ff      	lsls	r7, r7, #3
  4018da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4018de:	e7aa      	b.n	401836 <_free_r+0xa2>
  4018e0:	10aa      	asrs	r2, r5, #2
  4018e2:	2301      	movs	r3, #1
  4018e4:	684d      	ldr	r5, [r1, #4]
  4018e6:	4093      	lsls	r3, r2
  4018e8:	432b      	orrs	r3, r5
  4018ea:	604b      	str	r3, [r1, #4]
  4018ec:	4603      	mov	r3, r0
  4018ee:	e7b0      	b.n	401852 <_free_r+0xbe>
  4018f0:	f043 0201 	orr.w	r2, r3, #1
  4018f4:	614c      	str	r4, [r1, #20]
  4018f6:	610c      	str	r4, [r1, #16]
  4018f8:	60e5      	str	r5, [r4, #12]
  4018fa:	60a5      	str	r5, [r4, #8]
  4018fc:	6062      	str	r2, [r4, #4]
  4018fe:	50e3      	str	r3, [r4, r3]
  401900:	e78a      	b.n	401818 <_free_r+0x84>
  401902:	2a54      	cmp	r2, #84	; 0x54
  401904:	d806      	bhi.n	401914 <_free_r+0x180>
  401906:	0b1a      	lsrs	r2, r3, #12
  401908:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40190c:	00ff      	lsls	r7, r7, #3
  40190e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401912:	e790      	b.n	401836 <_free_r+0xa2>
  401914:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401918:	d806      	bhi.n	401928 <_free_r+0x194>
  40191a:	0bda      	lsrs	r2, r3, #15
  40191c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401920:	00ff      	lsls	r7, r7, #3
  401922:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401926:	e786      	b.n	401836 <_free_r+0xa2>
  401928:	f240 5054 	movw	r0, #1364	; 0x554
  40192c:	4282      	cmp	r2, r0
  40192e:	d806      	bhi.n	40193e <_free_r+0x1aa>
  401930:	0c9a      	lsrs	r2, r3, #18
  401932:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401936:	00ff      	lsls	r7, r7, #3
  401938:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40193c:	e77b      	b.n	401836 <_free_r+0xa2>
  40193e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401942:	257e      	movs	r5, #126	; 0x7e
  401944:	e777      	b.n	401836 <_free_r+0xa2>
  401946:	f043 0101 	orr.w	r1, r3, #1
  40194a:	6061      	str	r1, [r4, #4]
  40194c:	6013      	str	r3, [r2, #0]
  40194e:	e763      	b.n	401818 <_free_r+0x84>
  401950:	2040043c 	.word	0x2040043c
  401954:	20400444 	.word	0x20400444
  401958:	20400848 	.word	0x20400848
  40195c:	20400918 	.word	0x20400918

00401960 <__sfvwrite_r>:
  401960:	6893      	ldr	r3, [r2, #8]
  401962:	2b00      	cmp	r3, #0
  401964:	d073      	beq.n	401a4e <__sfvwrite_r+0xee>
  401966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40196a:	898b      	ldrh	r3, [r1, #12]
  40196c:	b083      	sub	sp, #12
  40196e:	460c      	mov	r4, r1
  401970:	0719      	lsls	r1, r3, #28
  401972:	9000      	str	r0, [sp, #0]
  401974:	4616      	mov	r6, r2
  401976:	d526      	bpl.n	4019c6 <__sfvwrite_r+0x66>
  401978:	6922      	ldr	r2, [r4, #16]
  40197a:	b322      	cbz	r2, 4019c6 <__sfvwrite_r+0x66>
  40197c:	f013 0002 	ands.w	r0, r3, #2
  401980:	6835      	ldr	r5, [r6, #0]
  401982:	d02c      	beq.n	4019de <__sfvwrite_r+0x7e>
  401984:	f04f 0900 	mov.w	r9, #0
  401988:	4fb0      	ldr	r7, [pc, #704]	; (401c4c <__sfvwrite_r+0x2ec>)
  40198a:	46c8      	mov	r8, r9
  40198c:	46b2      	mov	sl, r6
  40198e:	45b8      	cmp	r8, r7
  401990:	4643      	mov	r3, r8
  401992:	464a      	mov	r2, r9
  401994:	bf28      	it	cs
  401996:	463b      	movcs	r3, r7
  401998:	9800      	ldr	r0, [sp, #0]
  40199a:	f1b8 0f00 	cmp.w	r8, #0
  40199e:	d050      	beq.n	401a42 <__sfvwrite_r+0xe2>
  4019a0:	69e1      	ldr	r1, [r4, #28]
  4019a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4019a4:	47b0      	blx	r6
  4019a6:	2800      	cmp	r0, #0
  4019a8:	dd58      	ble.n	401a5c <__sfvwrite_r+0xfc>
  4019aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4019ae:	1a1b      	subs	r3, r3, r0
  4019b0:	4481      	add	r9, r0
  4019b2:	eba8 0800 	sub.w	r8, r8, r0
  4019b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	d1e7      	bne.n	40198e <__sfvwrite_r+0x2e>
  4019be:	2000      	movs	r0, #0
  4019c0:	b003      	add	sp, #12
  4019c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019c6:	4621      	mov	r1, r4
  4019c8:	9800      	ldr	r0, [sp, #0]
  4019ca:	f001 f8c1 	bl	402b50 <__swsetup_r>
  4019ce:	2800      	cmp	r0, #0
  4019d0:	f040 8133 	bne.w	401c3a <__sfvwrite_r+0x2da>
  4019d4:	89a3      	ldrh	r3, [r4, #12]
  4019d6:	6835      	ldr	r5, [r6, #0]
  4019d8:	f013 0002 	ands.w	r0, r3, #2
  4019dc:	d1d2      	bne.n	401984 <__sfvwrite_r+0x24>
  4019de:	f013 0901 	ands.w	r9, r3, #1
  4019e2:	d145      	bne.n	401a70 <__sfvwrite_r+0x110>
  4019e4:	464f      	mov	r7, r9
  4019e6:	9601      	str	r6, [sp, #4]
  4019e8:	b337      	cbz	r7, 401a38 <__sfvwrite_r+0xd8>
  4019ea:	059a      	lsls	r2, r3, #22
  4019ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4019f0:	f140 8083 	bpl.w	401afa <__sfvwrite_r+0x19a>
  4019f4:	4547      	cmp	r7, r8
  4019f6:	46c3      	mov	fp, r8
  4019f8:	f0c0 80ab 	bcc.w	401b52 <__sfvwrite_r+0x1f2>
  4019fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  401a00:	f040 80ac 	bne.w	401b5c <__sfvwrite_r+0x1fc>
  401a04:	6820      	ldr	r0, [r4, #0]
  401a06:	46ba      	mov	sl, r7
  401a08:	465a      	mov	r2, fp
  401a0a:	4649      	mov	r1, r9
  401a0c:	f000 fd8a 	bl	402524 <memmove>
  401a10:	68a2      	ldr	r2, [r4, #8]
  401a12:	6823      	ldr	r3, [r4, #0]
  401a14:	eba2 0208 	sub.w	r2, r2, r8
  401a18:	445b      	add	r3, fp
  401a1a:	60a2      	str	r2, [r4, #8]
  401a1c:	6023      	str	r3, [r4, #0]
  401a1e:	9a01      	ldr	r2, [sp, #4]
  401a20:	6893      	ldr	r3, [r2, #8]
  401a22:	eba3 030a 	sub.w	r3, r3, sl
  401a26:	44d1      	add	r9, sl
  401a28:	eba7 070a 	sub.w	r7, r7, sl
  401a2c:	6093      	str	r3, [r2, #8]
  401a2e:	2b00      	cmp	r3, #0
  401a30:	d0c5      	beq.n	4019be <__sfvwrite_r+0x5e>
  401a32:	89a3      	ldrh	r3, [r4, #12]
  401a34:	2f00      	cmp	r7, #0
  401a36:	d1d8      	bne.n	4019ea <__sfvwrite_r+0x8a>
  401a38:	f8d5 9000 	ldr.w	r9, [r5]
  401a3c:	686f      	ldr	r7, [r5, #4]
  401a3e:	3508      	adds	r5, #8
  401a40:	e7d2      	b.n	4019e8 <__sfvwrite_r+0x88>
  401a42:	f8d5 9000 	ldr.w	r9, [r5]
  401a46:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401a4a:	3508      	adds	r5, #8
  401a4c:	e79f      	b.n	40198e <__sfvwrite_r+0x2e>
  401a4e:	2000      	movs	r0, #0
  401a50:	4770      	bx	lr
  401a52:	4621      	mov	r1, r4
  401a54:	9800      	ldr	r0, [sp, #0]
  401a56:	f7ff fd91 	bl	40157c <_fflush_r>
  401a5a:	b370      	cbz	r0, 401aba <__sfvwrite_r+0x15a>
  401a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a64:	f04f 30ff 	mov.w	r0, #4294967295
  401a68:	81a3      	strh	r3, [r4, #12]
  401a6a:	b003      	add	sp, #12
  401a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a70:	4681      	mov	r9, r0
  401a72:	4633      	mov	r3, r6
  401a74:	464e      	mov	r6, r9
  401a76:	46a8      	mov	r8, r5
  401a78:	469a      	mov	sl, r3
  401a7a:	464d      	mov	r5, r9
  401a7c:	b34e      	cbz	r6, 401ad2 <__sfvwrite_r+0x172>
  401a7e:	b380      	cbz	r0, 401ae2 <__sfvwrite_r+0x182>
  401a80:	6820      	ldr	r0, [r4, #0]
  401a82:	6923      	ldr	r3, [r4, #16]
  401a84:	6962      	ldr	r2, [r4, #20]
  401a86:	45b1      	cmp	r9, r6
  401a88:	46cb      	mov	fp, r9
  401a8a:	bf28      	it	cs
  401a8c:	46b3      	movcs	fp, r6
  401a8e:	4298      	cmp	r0, r3
  401a90:	465f      	mov	r7, fp
  401a92:	d904      	bls.n	401a9e <__sfvwrite_r+0x13e>
  401a94:	68a3      	ldr	r3, [r4, #8]
  401a96:	4413      	add	r3, r2
  401a98:	459b      	cmp	fp, r3
  401a9a:	f300 80a6 	bgt.w	401bea <__sfvwrite_r+0x28a>
  401a9e:	4593      	cmp	fp, r2
  401aa0:	db4b      	blt.n	401b3a <__sfvwrite_r+0x1da>
  401aa2:	4613      	mov	r3, r2
  401aa4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401aa6:	69e1      	ldr	r1, [r4, #28]
  401aa8:	9800      	ldr	r0, [sp, #0]
  401aaa:	462a      	mov	r2, r5
  401aac:	47b8      	blx	r7
  401aae:	1e07      	subs	r7, r0, #0
  401ab0:	ddd4      	ble.n	401a5c <__sfvwrite_r+0xfc>
  401ab2:	ebb9 0907 	subs.w	r9, r9, r7
  401ab6:	d0cc      	beq.n	401a52 <__sfvwrite_r+0xf2>
  401ab8:	2001      	movs	r0, #1
  401aba:	f8da 3008 	ldr.w	r3, [sl, #8]
  401abe:	1bdb      	subs	r3, r3, r7
  401ac0:	443d      	add	r5, r7
  401ac2:	1bf6      	subs	r6, r6, r7
  401ac4:	f8ca 3008 	str.w	r3, [sl, #8]
  401ac8:	2b00      	cmp	r3, #0
  401aca:	f43f af78 	beq.w	4019be <__sfvwrite_r+0x5e>
  401ace:	2e00      	cmp	r6, #0
  401ad0:	d1d5      	bne.n	401a7e <__sfvwrite_r+0x11e>
  401ad2:	f108 0308 	add.w	r3, r8, #8
  401ad6:	e913 0060 	ldmdb	r3, {r5, r6}
  401ada:	4698      	mov	r8, r3
  401adc:	3308      	adds	r3, #8
  401ade:	2e00      	cmp	r6, #0
  401ae0:	d0f9      	beq.n	401ad6 <__sfvwrite_r+0x176>
  401ae2:	4632      	mov	r2, r6
  401ae4:	210a      	movs	r1, #10
  401ae6:	4628      	mov	r0, r5
  401ae8:	f000 fc32 	bl	402350 <memchr>
  401aec:	2800      	cmp	r0, #0
  401aee:	f000 80a1 	beq.w	401c34 <__sfvwrite_r+0x2d4>
  401af2:	3001      	adds	r0, #1
  401af4:	eba0 0905 	sub.w	r9, r0, r5
  401af8:	e7c2      	b.n	401a80 <__sfvwrite_r+0x120>
  401afa:	6820      	ldr	r0, [r4, #0]
  401afc:	6923      	ldr	r3, [r4, #16]
  401afe:	4298      	cmp	r0, r3
  401b00:	d802      	bhi.n	401b08 <__sfvwrite_r+0x1a8>
  401b02:	6963      	ldr	r3, [r4, #20]
  401b04:	429f      	cmp	r7, r3
  401b06:	d25d      	bcs.n	401bc4 <__sfvwrite_r+0x264>
  401b08:	45b8      	cmp	r8, r7
  401b0a:	bf28      	it	cs
  401b0c:	46b8      	movcs	r8, r7
  401b0e:	4642      	mov	r2, r8
  401b10:	4649      	mov	r1, r9
  401b12:	f000 fd07 	bl	402524 <memmove>
  401b16:	68a3      	ldr	r3, [r4, #8]
  401b18:	6822      	ldr	r2, [r4, #0]
  401b1a:	eba3 0308 	sub.w	r3, r3, r8
  401b1e:	4442      	add	r2, r8
  401b20:	60a3      	str	r3, [r4, #8]
  401b22:	6022      	str	r2, [r4, #0]
  401b24:	b10b      	cbz	r3, 401b2a <__sfvwrite_r+0x1ca>
  401b26:	46c2      	mov	sl, r8
  401b28:	e779      	b.n	401a1e <__sfvwrite_r+0xbe>
  401b2a:	4621      	mov	r1, r4
  401b2c:	9800      	ldr	r0, [sp, #0]
  401b2e:	f7ff fd25 	bl	40157c <_fflush_r>
  401b32:	2800      	cmp	r0, #0
  401b34:	d192      	bne.n	401a5c <__sfvwrite_r+0xfc>
  401b36:	46c2      	mov	sl, r8
  401b38:	e771      	b.n	401a1e <__sfvwrite_r+0xbe>
  401b3a:	465a      	mov	r2, fp
  401b3c:	4629      	mov	r1, r5
  401b3e:	f000 fcf1 	bl	402524 <memmove>
  401b42:	68a2      	ldr	r2, [r4, #8]
  401b44:	6823      	ldr	r3, [r4, #0]
  401b46:	eba2 020b 	sub.w	r2, r2, fp
  401b4a:	445b      	add	r3, fp
  401b4c:	60a2      	str	r2, [r4, #8]
  401b4e:	6023      	str	r3, [r4, #0]
  401b50:	e7af      	b.n	401ab2 <__sfvwrite_r+0x152>
  401b52:	6820      	ldr	r0, [r4, #0]
  401b54:	46b8      	mov	r8, r7
  401b56:	46ba      	mov	sl, r7
  401b58:	46bb      	mov	fp, r7
  401b5a:	e755      	b.n	401a08 <__sfvwrite_r+0xa8>
  401b5c:	6962      	ldr	r2, [r4, #20]
  401b5e:	6820      	ldr	r0, [r4, #0]
  401b60:	6921      	ldr	r1, [r4, #16]
  401b62:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  401b66:	eba0 0a01 	sub.w	sl, r0, r1
  401b6a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  401b6e:	f10a 0001 	add.w	r0, sl, #1
  401b72:	ea4f 0868 	mov.w	r8, r8, asr #1
  401b76:	4438      	add	r0, r7
  401b78:	4540      	cmp	r0, r8
  401b7a:	4642      	mov	r2, r8
  401b7c:	bf84      	itt	hi
  401b7e:	4680      	movhi	r8, r0
  401b80:	4642      	movhi	r2, r8
  401b82:	055b      	lsls	r3, r3, #21
  401b84:	d544      	bpl.n	401c10 <__sfvwrite_r+0x2b0>
  401b86:	4611      	mov	r1, r2
  401b88:	9800      	ldr	r0, [sp, #0]
  401b8a:	f000 f931 	bl	401df0 <_malloc_r>
  401b8e:	4683      	mov	fp, r0
  401b90:	2800      	cmp	r0, #0
  401b92:	d055      	beq.n	401c40 <__sfvwrite_r+0x2e0>
  401b94:	4652      	mov	r2, sl
  401b96:	6921      	ldr	r1, [r4, #16]
  401b98:	f000 fc2a 	bl	4023f0 <memcpy>
  401b9c:	89a3      	ldrh	r3, [r4, #12]
  401b9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  401ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401ba6:	81a3      	strh	r3, [r4, #12]
  401ba8:	eb0b 000a 	add.w	r0, fp, sl
  401bac:	eba8 030a 	sub.w	r3, r8, sl
  401bb0:	f8c4 b010 	str.w	fp, [r4, #16]
  401bb4:	f8c4 8014 	str.w	r8, [r4, #20]
  401bb8:	6020      	str	r0, [r4, #0]
  401bba:	60a3      	str	r3, [r4, #8]
  401bbc:	46b8      	mov	r8, r7
  401bbe:	46ba      	mov	sl, r7
  401bc0:	46bb      	mov	fp, r7
  401bc2:	e721      	b.n	401a08 <__sfvwrite_r+0xa8>
  401bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  401bc8:	42b9      	cmp	r1, r7
  401bca:	bf28      	it	cs
  401bcc:	4639      	movcs	r1, r7
  401bce:	464a      	mov	r2, r9
  401bd0:	fb91 f1f3 	sdiv	r1, r1, r3
  401bd4:	9800      	ldr	r0, [sp, #0]
  401bd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401bd8:	fb03 f301 	mul.w	r3, r3, r1
  401bdc:	69e1      	ldr	r1, [r4, #28]
  401bde:	47b0      	blx	r6
  401be0:	f1b0 0a00 	subs.w	sl, r0, #0
  401be4:	f73f af1b 	bgt.w	401a1e <__sfvwrite_r+0xbe>
  401be8:	e738      	b.n	401a5c <__sfvwrite_r+0xfc>
  401bea:	461a      	mov	r2, r3
  401bec:	4629      	mov	r1, r5
  401bee:	9301      	str	r3, [sp, #4]
  401bf0:	f000 fc98 	bl	402524 <memmove>
  401bf4:	6822      	ldr	r2, [r4, #0]
  401bf6:	9b01      	ldr	r3, [sp, #4]
  401bf8:	9800      	ldr	r0, [sp, #0]
  401bfa:	441a      	add	r2, r3
  401bfc:	6022      	str	r2, [r4, #0]
  401bfe:	4621      	mov	r1, r4
  401c00:	f7ff fcbc 	bl	40157c <_fflush_r>
  401c04:	9b01      	ldr	r3, [sp, #4]
  401c06:	2800      	cmp	r0, #0
  401c08:	f47f af28 	bne.w	401a5c <__sfvwrite_r+0xfc>
  401c0c:	461f      	mov	r7, r3
  401c0e:	e750      	b.n	401ab2 <__sfvwrite_r+0x152>
  401c10:	9800      	ldr	r0, [sp, #0]
  401c12:	f000 fcf7 	bl	402604 <_realloc_r>
  401c16:	4683      	mov	fp, r0
  401c18:	2800      	cmp	r0, #0
  401c1a:	d1c5      	bne.n	401ba8 <__sfvwrite_r+0x248>
  401c1c:	9d00      	ldr	r5, [sp, #0]
  401c1e:	6921      	ldr	r1, [r4, #16]
  401c20:	4628      	mov	r0, r5
  401c22:	f7ff fdb7 	bl	401794 <_free_r>
  401c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c2a:	220c      	movs	r2, #12
  401c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401c30:	602a      	str	r2, [r5, #0]
  401c32:	e715      	b.n	401a60 <__sfvwrite_r+0x100>
  401c34:	f106 0901 	add.w	r9, r6, #1
  401c38:	e722      	b.n	401a80 <__sfvwrite_r+0x120>
  401c3a:	f04f 30ff 	mov.w	r0, #4294967295
  401c3e:	e6bf      	b.n	4019c0 <__sfvwrite_r+0x60>
  401c40:	9a00      	ldr	r2, [sp, #0]
  401c42:	230c      	movs	r3, #12
  401c44:	6013      	str	r3, [r2, #0]
  401c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c4a:	e709      	b.n	401a60 <__sfvwrite_r+0x100>
  401c4c:	7ffffc00 	.word	0x7ffffc00

00401c50 <_fwalk>:
  401c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401c58:	d01b      	beq.n	401c92 <_fwalk+0x42>
  401c5a:	4688      	mov	r8, r1
  401c5c:	2600      	movs	r6, #0
  401c5e:	687d      	ldr	r5, [r7, #4]
  401c60:	68bc      	ldr	r4, [r7, #8]
  401c62:	3d01      	subs	r5, #1
  401c64:	d40f      	bmi.n	401c86 <_fwalk+0x36>
  401c66:	89a3      	ldrh	r3, [r4, #12]
  401c68:	2b01      	cmp	r3, #1
  401c6a:	f105 35ff 	add.w	r5, r5, #4294967295
  401c6e:	d906      	bls.n	401c7e <_fwalk+0x2e>
  401c70:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401c74:	3301      	adds	r3, #1
  401c76:	4620      	mov	r0, r4
  401c78:	d001      	beq.n	401c7e <_fwalk+0x2e>
  401c7a:	47c0      	blx	r8
  401c7c:	4306      	orrs	r6, r0
  401c7e:	1c6b      	adds	r3, r5, #1
  401c80:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401c84:	d1ef      	bne.n	401c66 <_fwalk+0x16>
  401c86:	683f      	ldr	r7, [r7, #0]
  401c88:	2f00      	cmp	r7, #0
  401c8a:	d1e8      	bne.n	401c5e <_fwalk+0xe>
  401c8c:	4630      	mov	r0, r6
  401c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c92:	463e      	mov	r6, r7
  401c94:	4630      	mov	r0, r6
  401c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c9a:	bf00      	nop

00401c9c <_fwalk_reent>:
  401c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401ca0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401ca4:	d01f      	beq.n	401ce6 <_fwalk_reent+0x4a>
  401ca6:	4688      	mov	r8, r1
  401ca8:	4606      	mov	r6, r0
  401caa:	f04f 0900 	mov.w	r9, #0
  401cae:	687d      	ldr	r5, [r7, #4]
  401cb0:	68bc      	ldr	r4, [r7, #8]
  401cb2:	3d01      	subs	r5, #1
  401cb4:	d411      	bmi.n	401cda <_fwalk_reent+0x3e>
  401cb6:	89a3      	ldrh	r3, [r4, #12]
  401cb8:	2b01      	cmp	r3, #1
  401cba:	f105 35ff 	add.w	r5, r5, #4294967295
  401cbe:	d908      	bls.n	401cd2 <_fwalk_reent+0x36>
  401cc0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401cc4:	3301      	adds	r3, #1
  401cc6:	4621      	mov	r1, r4
  401cc8:	4630      	mov	r0, r6
  401cca:	d002      	beq.n	401cd2 <_fwalk_reent+0x36>
  401ccc:	47c0      	blx	r8
  401cce:	ea49 0900 	orr.w	r9, r9, r0
  401cd2:	1c6b      	adds	r3, r5, #1
  401cd4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401cd8:	d1ed      	bne.n	401cb6 <_fwalk_reent+0x1a>
  401cda:	683f      	ldr	r7, [r7, #0]
  401cdc:	2f00      	cmp	r7, #0
  401cde:	d1e6      	bne.n	401cae <_fwalk_reent+0x12>
  401ce0:	4648      	mov	r0, r9
  401ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ce6:	46b9      	mov	r9, r7
  401ce8:	4648      	mov	r0, r9
  401cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cee:	bf00      	nop

00401cf0 <__swhatbuf_r>:
  401cf0:	b570      	push	{r4, r5, r6, lr}
  401cf2:	460c      	mov	r4, r1
  401cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401cf8:	2900      	cmp	r1, #0
  401cfa:	b090      	sub	sp, #64	; 0x40
  401cfc:	4615      	mov	r5, r2
  401cfe:	461e      	mov	r6, r3
  401d00:	db14      	blt.n	401d2c <__swhatbuf_r+0x3c>
  401d02:	aa01      	add	r2, sp, #4
  401d04:	f001 f85e 	bl	402dc4 <_fstat_r>
  401d08:	2800      	cmp	r0, #0
  401d0a:	db0f      	blt.n	401d2c <__swhatbuf_r+0x3c>
  401d0c:	9a02      	ldr	r2, [sp, #8]
  401d0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401d12:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401d16:	fab2 f282 	clz	r2, r2
  401d1a:	0952      	lsrs	r2, r2, #5
  401d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d20:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401d24:	6032      	str	r2, [r6, #0]
  401d26:	602b      	str	r3, [r5, #0]
  401d28:	b010      	add	sp, #64	; 0x40
  401d2a:	bd70      	pop	{r4, r5, r6, pc}
  401d2c:	89a2      	ldrh	r2, [r4, #12]
  401d2e:	2300      	movs	r3, #0
  401d30:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401d34:	6033      	str	r3, [r6, #0]
  401d36:	d004      	beq.n	401d42 <__swhatbuf_r+0x52>
  401d38:	2240      	movs	r2, #64	; 0x40
  401d3a:	4618      	mov	r0, r3
  401d3c:	602a      	str	r2, [r5, #0]
  401d3e:	b010      	add	sp, #64	; 0x40
  401d40:	bd70      	pop	{r4, r5, r6, pc}
  401d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401d46:	602b      	str	r3, [r5, #0]
  401d48:	b010      	add	sp, #64	; 0x40
  401d4a:	bd70      	pop	{r4, r5, r6, pc}

00401d4c <__smakebuf_r>:
  401d4c:	898a      	ldrh	r2, [r1, #12]
  401d4e:	0792      	lsls	r2, r2, #30
  401d50:	460b      	mov	r3, r1
  401d52:	d506      	bpl.n	401d62 <__smakebuf_r+0x16>
  401d54:	f101 0243 	add.w	r2, r1, #67	; 0x43
  401d58:	2101      	movs	r1, #1
  401d5a:	601a      	str	r2, [r3, #0]
  401d5c:	611a      	str	r2, [r3, #16]
  401d5e:	6159      	str	r1, [r3, #20]
  401d60:	4770      	bx	lr
  401d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d64:	b083      	sub	sp, #12
  401d66:	ab01      	add	r3, sp, #4
  401d68:	466a      	mov	r2, sp
  401d6a:	460c      	mov	r4, r1
  401d6c:	4606      	mov	r6, r0
  401d6e:	f7ff ffbf 	bl	401cf0 <__swhatbuf_r>
  401d72:	9900      	ldr	r1, [sp, #0]
  401d74:	4605      	mov	r5, r0
  401d76:	4630      	mov	r0, r6
  401d78:	f000 f83a 	bl	401df0 <_malloc_r>
  401d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401d80:	b1d8      	cbz	r0, 401dba <__smakebuf_r+0x6e>
  401d82:	9a01      	ldr	r2, [sp, #4]
  401d84:	4f15      	ldr	r7, [pc, #84]	; (401ddc <__smakebuf_r+0x90>)
  401d86:	9900      	ldr	r1, [sp, #0]
  401d88:	63f7      	str	r7, [r6, #60]	; 0x3c
  401d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d8e:	81a3      	strh	r3, [r4, #12]
  401d90:	6020      	str	r0, [r4, #0]
  401d92:	6120      	str	r0, [r4, #16]
  401d94:	6161      	str	r1, [r4, #20]
  401d96:	b91a      	cbnz	r2, 401da0 <__smakebuf_r+0x54>
  401d98:	432b      	orrs	r3, r5
  401d9a:	81a3      	strh	r3, [r4, #12]
  401d9c:	b003      	add	sp, #12
  401d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401da0:	4630      	mov	r0, r6
  401da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401da6:	f001 f821 	bl	402dec <_isatty_r>
  401daa:	b1a0      	cbz	r0, 401dd6 <__smakebuf_r+0x8a>
  401dac:	89a3      	ldrh	r3, [r4, #12]
  401dae:	f023 0303 	bic.w	r3, r3, #3
  401db2:	f043 0301 	orr.w	r3, r3, #1
  401db6:	b21b      	sxth	r3, r3
  401db8:	e7ee      	b.n	401d98 <__smakebuf_r+0x4c>
  401dba:	059a      	lsls	r2, r3, #22
  401dbc:	d4ee      	bmi.n	401d9c <__smakebuf_r+0x50>
  401dbe:	f023 0303 	bic.w	r3, r3, #3
  401dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401dc6:	f043 0302 	orr.w	r3, r3, #2
  401dca:	2101      	movs	r1, #1
  401dcc:	81a3      	strh	r3, [r4, #12]
  401dce:	6022      	str	r2, [r4, #0]
  401dd0:	6122      	str	r2, [r4, #16]
  401dd2:	6161      	str	r1, [r4, #20]
  401dd4:	e7e2      	b.n	401d9c <__smakebuf_r+0x50>
  401dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401dda:	e7dd      	b.n	401d98 <__smakebuf_r+0x4c>
  401ddc:	004015f5 	.word	0x004015f5

00401de0 <malloc>:
  401de0:	4b02      	ldr	r3, [pc, #8]	; (401dec <malloc+0xc>)
  401de2:	4601      	mov	r1, r0
  401de4:	6818      	ldr	r0, [r3, #0]
  401de6:	f000 b803 	b.w	401df0 <_malloc_r>
  401dea:	bf00      	nop
  401dec:	2040000c 	.word	0x2040000c

00401df0 <_malloc_r>:
  401df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401df4:	f101 060b 	add.w	r6, r1, #11
  401df8:	2e16      	cmp	r6, #22
  401dfa:	b083      	sub	sp, #12
  401dfc:	4605      	mov	r5, r0
  401dfe:	f240 809e 	bls.w	401f3e <_malloc_r+0x14e>
  401e02:	f036 0607 	bics.w	r6, r6, #7
  401e06:	f100 80bd 	bmi.w	401f84 <_malloc_r+0x194>
  401e0a:	42b1      	cmp	r1, r6
  401e0c:	f200 80ba 	bhi.w	401f84 <_malloc_r+0x194>
  401e10:	f000 fbec 	bl	4025ec <__malloc_lock>
  401e14:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401e18:	f0c0 8293 	bcc.w	402342 <_malloc_r+0x552>
  401e1c:	0a73      	lsrs	r3, r6, #9
  401e1e:	f000 80b8 	beq.w	401f92 <_malloc_r+0x1a2>
  401e22:	2b04      	cmp	r3, #4
  401e24:	f200 8179 	bhi.w	40211a <_malloc_r+0x32a>
  401e28:	09b3      	lsrs	r3, r6, #6
  401e2a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401e2e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401e32:	00c3      	lsls	r3, r0, #3
  401e34:	4fbf      	ldr	r7, [pc, #764]	; (402134 <_malloc_r+0x344>)
  401e36:	443b      	add	r3, r7
  401e38:	f1a3 0108 	sub.w	r1, r3, #8
  401e3c:	685c      	ldr	r4, [r3, #4]
  401e3e:	42a1      	cmp	r1, r4
  401e40:	d106      	bne.n	401e50 <_malloc_r+0x60>
  401e42:	e00c      	b.n	401e5e <_malloc_r+0x6e>
  401e44:	2a00      	cmp	r2, #0
  401e46:	f280 80aa 	bge.w	401f9e <_malloc_r+0x1ae>
  401e4a:	68e4      	ldr	r4, [r4, #12]
  401e4c:	42a1      	cmp	r1, r4
  401e4e:	d006      	beq.n	401e5e <_malloc_r+0x6e>
  401e50:	6863      	ldr	r3, [r4, #4]
  401e52:	f023 0303 	bic.w	r3, r3, #3
  401e56:	1b9a      	subs	r2, r3, r6
  401e58:	2a0f      	cmp	r2, #15
  401e5a:	ddf3      	ble.n	401e44 <_malloc_r+0x54>
  401e5c:	4670      	mov	r0, lr
  401e5e:	693c      	ldr	r4, [r7, #16]
  401e60:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402148 <_malloc_r+0x358>
  401e64:	4574      	cmp	r4, lr
  401e66:	f000 81ab 	beq.w	4021c0 <_malloc_r+0x3d0>
  401e6a:	6863      	ldr	r3, [r4, #4]
  401e6c:	f023 0303 	bic.w	r3, r3, #3
  401e70:	1b9a      	subs	r2, r3, r6
  401e72:	2a0f      	cmp	r2, #15
  401e74:	f300 8190 	bgt.w	402198 <_malloc_r+0x3a8>
  401e78:	2a00      	cmp	r2, #0
  401e7a:	f8c7 e014 	str.w	lr, [r7, #20]
  401e7e:	f8c7 e010 	str.w	lr, [r7, #16]
  401e82:	f280 809d 	bge.w	401fc0 <_malloc_r+0x1d0>
  401e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401e8a:	f080 8161 	bcs.w	402150 <_malloc_r+0x360>
  401e8e:	08db      	lsrs	r3, r3, #3
  401e90:	f103 0c01 	add.w	ip, r3, #1
  401e94:	1099      	asrs	r1, r3, #2
  401e96:	687a      	ldr	r2, [r7, #4]
  401e98:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401e9c:	f8c4 8008 	str.w	r8, [r4, #8]
  401ea0:	2301      	movs	r3, #1
  401ea2:	408b      	lsls	r3, r1
  401ea4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401ea8:	4313      	orrs	r3, r2
  401eaa:	3908      	subs	r1, #8
  401eac:	60e1      	str	r1, [r4, #12]
  401eae:	607b      	str	r3, [r7, #4]
  401eb0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401eb4:	f8c8 400c 	str.w	r4, [r8, #12]
  401eb8:	1082      	asrs	r2, r0, #2
  401eba:	2401      	movs	r4, #1
  401ebc:	4094      	lsls	r4, r2
  401ebe:	429c      	cmp	r4, r3
  401ec0:	f200 808b 	bhi.w	401fda <_malloc_r+0x1ea>
  401ec4:	421c      	tst	r4, r3
  401ec6:	d106      	bne.n	401ed6 <_malloc_r+0xe6>
  401ec8:	f020 0003 	bic.w	r0, r0, #3
  401ecc:	0064      	lsls	r4, r4, #1
  401ece:	421c      	tst	r4, r3
  401ed0:	f100 0004 	add.w	r0, r0, #4
  401ed4:	d0fa      	beq.n	401ecc <_malloc_r+0xdc>
  401ed6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401eda:	46cc      	mov	ip, r9
  401edc:	4680      	mov	r8, r0
  401ede:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401ee2:	459c      	cmp	ip, r3
  401ee4:	d107      	bne.n	401ef6 <_malloc_r+0x106>
  401ee6:	e16d      	b.n	4021c4 <_malloc_r+0x3d4>
  401ee8:	2a00      	cmp	r2, #0
  401eea:	f280 817b 	bge.w	4021e4 <_malloc_r+0x3f4>
  401eee:	68db      	ldr	r3, [r3, #12]
  401ef0:	459c      	cmp	ip, r3
  401ef2:	f000 8167 	beq.w	4021c4 <_malloc_r+0x3d4>
  401ef6:	6859      	ldr	r1, [r3, #4]
  401ef8:	f021 0103 	bic.w	r1, r1, #3
  401efc:	1b8a      	subs	r2, r1, r6
  401efe:	2a0f      	cmp	r2, #15
  401f00:	ddf2      	ble.n	401ee8 <_malloc_r+0xf8>
  401f02:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401f06:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401f0a:	9300      	str	r3, [sp, #0]
  401f0c:	199c      	adds	r4, r3, r6
  401f0e:	4628      	mov	r0, r5
  401f10:	f046 0601 	orr.w	r6, r6, #1
  401f14:	f042 0501 	orr.w	r5, r2, #1
  401f18:	605e      	str	r6, [r3, #4]
  401f1a:	f8c8 c00c 	str.w	ip, [r8, #12]
  401f1e:	f8cc 8008 	str.w	r8, [ip, #8]
  401f22:	617c      	str	r4, [r7, #20]
  401f24:	613c      	str	r4, [r7, #16]
  401f26:	f8c4 e00c 	str.w	lr, [r4, #12]
  401f2a:	f8c4 e008 	str.w	lr, [r4, #8]
  401f2e:	6065      	str	r5, [r4, #4]
  401f30:	505a      	str	r2, [r3, r1]
  401f32:	f000 fb61 	bl	4025f8 <__malloc_unlock>
  401f36:	9b00      	ldr	r3, [sp, #0]
  401f38:	f103 0408 	add.w	r4, r3, #8
  401f3c:	e01e      	b.n	401f7c <_malloc_r+0x18c>
  401f3e:	2910      	cmp	r1, #16
  401f40:	d820      	bhi.n	401f84 <_malloc_r+0x194>
  401f42:	f000 fb53 	bl	4025ec <__malloc_lock>
  401f46:	2610      	movs	r6, #16
  401f48:	2318      	movs	r3, #24
  401f4a:	2002      	movs	r0, #2
  401f4c:	4f79      	ldr	r7, [pc, #484]	; (402134 <_malloc_r+0x344>)
  401f4e:	443b      	add	r3, r7
  401f50:	f1a3 0208 	sub.w	r2, r3, #8
  401f54:	685c      	ldr	r4, [r3, #4]
  401f56:	4294      	cmp	r4, r2
  401f58:	f000 813d 	beq.w	4021d6 <_malloc_r+0x3e6>
  401f5c:	6863      	ldr	r3, [r4, #4]
  401f5e:	68e1      	ldr	r1, [r4, #12]
  401f60:	68a6      	ldr	r6, [r4, #8]
  401f62:	f023 0303 	bic.w	r3, r3, #3
  401f66:	4423      	add	r3, r4
  401f68:	4628      	mov	r0, r5
  401f6a:	685a      	ldr	r2, [r3, #4]
  401f6c:	60f1      	str	r1, [r6, #12]
  401f6e:	f042 0201 	orr.w	r2, r2, #1
  401f72:	608e      	str	r6, [r1, #8]
  401f74:	605a      	str	r2, [r3, #4]
  401f76:	f000 fb3f 	bl	4025f8 <__malloc_unlock>
  401f7a:	3408      	adds	r4, #8
  401f7c:	4620      	mov	r0, r4
  401f7e:	b003      	add	sp, #12
  401f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f84:	2400      	movs	r4, #0
  401f86:	230c      	movs	r3, #12
  401f88:	4620      	mov	r0, r4
  401f8a:	602b      	str	r3, [r5, #0]
  401f8c:	b003      	add	sp, #12
  401f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f92:	2040      	movs	r0, #64	; 0x40
  401f94:	f44f 7300 	mov.w	r3, #512	; 0x200
  401f98:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401f9c:	e74a      	b.n	401e34 <_malloc_r+0x44>
  401f9e:	4423      	add	r3, r4
  401fa0:	68e1      	ldr	r1, [r4, #12]
  401fa2:	685a      	ldr	r2, [r3, #4]
  401fa4:	68a6      	ldr	r6, [r4, #8]
  401fa6:	f042 0201 	orr.w	r2, r2, #1
  401faa:	60f1      	str	r1, [r6, #12]
  401fac:	4628      	mov	r0, r5
  401fae:	608e      	str	r6, [r1, #8]
  401fb0:	605a      	str	r2, [r3, #4]
  401fb2:	f000 fb21 	bl	4025f8 <__malloc_unlock>
  401fb6:	3408      	adds	r4, #8
  401fb8:	4620      	mov	r0, r4
  401fba:	b003      	add	sp, #12
  401fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fc0:	4423      	add	r3, r4
  401fc2:	4628      	mov	r0, r5
  401fc4:	685a      	ldr	r2, [r3, #4]
  401fc6:	f042 0201 	orr.w	r2, r2, #1
  401fca:	605a      	str	r2, [r3, #4]
  401fcc:	f000 fb14 	bl	4025f8 <__malloc_unlock>
  401fd0:	3408      	adds	r4, #8
  401fd2:	4620      	mov	r0, r4
  401fd4:	b003      	add	sp, #12
  401fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fda:	68bc      	ldr	r4, [r7, #8]
  401fdc:	6863      	ldr	r3, [r4, #4]
  401fde:	f023 0803 	bic.w	r8, r3, #3
  401fe2:	45b0      	cmp	r8, r6
  401fe4:	d304      	bcc.n	401ff0 <_malloc_r+0x200>
  401fe6:	eba8 0306 	sub.w	r3, r8, r6
  401fea:	2b0f      	cmp	r3, #15
  401fec:	f300 8085 	bgt.w	4020fa <_malloc_r+0x30a>
  401ff0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40214c <_malloc_r+0x35c>
  401ff4:	4b50      	ldr	r3, [pc, #320]	; (402138 <_malloc_r+0x348>)
  401ff6:	f8d9 2000 	ldr.w	r2, [r9]
  401ffa:	681b      	ldr	r3, [r3, #0]
  401ffc:	3201      	adds	r2, #1
  401ffe:	4433      	add	r3, r6
  402000:	eb04 0a08 	add.w	sl, r4, r8
  402004:	f000 8155 	beq.w	4022b2 <_malloc_r+0x4c2>
  402008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40200c:	330f      	adds	r3, #15
  40200e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402012:	f02b 0b0f 	bic.w	fp, fp, #15
  402016:	4659      	mov	r1, fp
  402018:	4628      	mov	r0, r5
  40201a:	f000 fd2d 	bl	402a78 <_sbrk_r>
  40201e:	1c41      	adds	r1, r0, #1
  402020:	4602      	mov	r2, r0
  402022:	f000 80fc 	beq.w	40221e <_malloc_r+0x42e>
  402026:	4582      	cmp	sl, r0
  402028:	f200 80f7 	bhi.w	40221a <_malloc_r+0x42a>
  40202c:	4b43      	ldr	r3, [pc, #268]	; (40213c <_malloc_r+0x34c>)
  40202e:	6819      	ldr	r1, [r3, #0]
  402030:	4459      	add	r1, fp
  402032:	6019      	str	r1, [r3, #0]
  402034:	f000 814d 	beq.w	4022d2 <_malloc_r+0x4e2>
  402038:	f8d9 0000 	ldr.w	r0, [r9]
  40203c:	3001      	adds	r0, #1
  40203e:	bf1b      	ittet	ne
  402040:	eba2 0a0a 	subne.w	sl, r2, sl
  402044:	4451      	addne	r1, sl
  402046:	f8c9 2000 	streq.w	r2, [r9]
  40204a:	6019      	strne	r1, [r3, #0]
  40204c:	f012 0107 	ands.w	r1, r2, #7
  402050:	f000 8115 	beq.w	40227e <_malloc_r+0x48e>
  402054:	f1c1 0008 	rsb	r0, r1, #8
  402058:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40205c:	4402      	add	r2, r0
  40205e:	3108      	adds	r1, #8
  402060:	eb02 090b 	add.w	r9, r2, fp
  402064:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402068:	eba1 0909 	sub.w	r9, r1, r9
  40206c:	4649      	mov	r1, r9
  40206e:	4628      	mov	r0, r5
  402070:	9301      	str	r3, [sp, #4]
  402072:	9200      	str	r2, [sp, #0]
  402074:	f000 fd00 	bl	402a78 <_sbrk_r>
  402078:	1c43      	adds	r3, r0, #1
  40207a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40207e:	f000 8143 	beq.w	402308 <_malloc_r+0x518>
  402082:	1a80      	subs	r0, r0, r2
  402084:	4448      	add	r0, r9
  402086:	f040 0001 	orr.w	r0, r0, #1
  40208a:	6819      	ldr	r1, [r3, #0]
  40208c:	60ba      	str	r2, [r7, #8]
  40208e:	4449      	add	r1, r9
  402090:	42bc      	cmp	r4, r7
  402092:	6050      	str	r0, [r2, #4]
  402094:	6019      	str	r1, [r3, #0]
  402096:	d017      	beq.n	4020c8 <_malloc_r+0x2d8>
  402098:	f1b8 0f0f 	cmp.w	r8, #15
  40209c:	f240 80fb 	bls.w	402296 <_malloc_r+0x4a6>
  4020a0:	6860      	ldr	r0, [r4, #4]
  4020a2:	f1a8 020c 	sub.w	r2, r8, #12
  4020a6:	f022 0207 	bic.w	r2, r2, #7
  4020aa:	eb04 0e02 	add.w	lr, r4, r2
  4020ae:	f000 0001 	and.w	r0, r0, #1
  4020b2:	f04f 0c05 	mov.w	ip, #5
  4020b6:	4310      	orrs	r0, r2
  4020b8:	2a0f      	cmp	r2, #15
  4020ba:	6060      	str	r0, [r4, #4]
  4020bc:	f8ce c004 	str.w	ip, [lr, #4]
  4020c0:	f8ce c008 	str.w	ip, [lr, #8]
  4020c4:	f200 8117 	bhi.w	4022f6 <_malloc_r+0x506>
  4020c8:	4b1d      	ldr	r3, [pc, #116]	; (402140 <_malloc_r+0x350>)
  4020ca:	68bc      	ldr	r4, [r7, #8]
  4020cc:	681a      	ldr	r2, [r3, #0]
  4020ce:	4291      	cmp	r1, r2
  4020d0:	bf88      	it	hi
  4020d2:	6019      	strhi	r1, [r3, #0]
  4020d4:	4b1b      	ldr	r3, [pc, #108]	; (402144 <_malloc_r+0x354>)
  4020d6:	681a      	ldr	r2, [r3, #0]
  4020d8:	4291      	cmp	r1, r2
  4020da:	6862      	ldr	r2, [r4, #4]
  4020dc:	bf88      	it	hi
  4020de:	6019      	strhi	r1, [r3, #0]
  4020e0:	f022 0203 	bic.w	r2, r2, #3
  4020e4:	4296      	cmp	r6, r2
  4020e6:	eba2 0306 	sub.w	r3, r2, r6
  4020ea:	d801      	bhi.n	4020f0 <_malloc_r+0x300>
  4020ec:	2b0f      	cmp	r3, #15
  4020ee:	dc04      	bgt.n	4020fa <_malloc_r+0x30a>
  4020f0:	4628      	mov	r0, r5
  4020f2:	f000 fa81 	bl	4025f8 <__malloc_unlock>
  4020f6:	2400      	movs	r4, #0
  4020f8:	e740      	b.n	401f7c <_malloc_r+0x18c>
  4020fa:	19a2      	adds	r2, r4, r6
  4020fc:	f043 0301 	orr.w	r3, r3, #1
  402100:	f046 0601 	orr.w	r6, r6, #1
  402104:	6066      	str	r6, [r4, #4]
  402106:	4628      	mov	r0, r5
  402108:	60ba      	str	r2, [r7, #8]
  40210a:	6053      	str	r3, [r2, #4]
  40210c:	f000 fa74 	bl	4025f8 <__malloc_unlock>
  402110:	3408      	adds	r4, #8
  402112:	4620      	mov	r0, r4
  402114:	b003      	add	sp, #12
  402116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40211a:	2b14      	cmp	r3, #20
  40211c:	d971      	bls.n	402202 <_malloc_r+0x412>
  40211e:	2b54      	cmp	r3, #84	; 0x54
  402120:	f200 80a3 	bhi.w	40226a <_malloc_r+0x47a>
  402124:	0b33      	lsrs	r3, r6, #12
  402126:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40212a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40212e:	00c3      	lsls	r3, r0, #3
  402130:	e680      	b.n	401e34 <_malloc_r+0x44>
  402132:	bf00      	nop
  402134:	2040043c 	.word	0x2040043c
  402138:	20400918 	.word	0x20400918
  40213c:	204008e8 	.word	0x204008e8
  402140:	20400910 	.word	0x20400910
  402144:	20400914 	.word	0x20400914
  402148:	20400444 	.word	0x20400444
  40214c:	20400844 	.word	0x20400844
  402150:	0a5a      	lsrs	r2, r3, #9
  402152:	2a04      	cmp	r2, #4
  402154:	d95b      	bls.n	40220e <_malloc_r+0x41e>
  402156:	2a14      	cmp	r2, #20
  402158:	f200 80ae 	bhi.w	4022b8 <_malloc_r+0x4c8>
  40215c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402160:	00c9      	lsls	r1, r1, #3
  402162:	325b      	adds	r2, #91	; 0x5b
  402164:	eb07 0c01 	add.w	ip, r7, r1
  402168:	5879      	ldr	r1, [r7, r1]
  40216a:	f1ac 0c08 	sub.w	ip, ip, #8
  40216e:	458c      	cmp	ip, r1
  402170:	f000 8088 	beq.w	402284 <_malloc_r+0x494>
  402174:	684a      	ldr	r2, [r1, #4]
  402176:	f022 0203 	bic.w	r2, r2, #3
  40217a:	4293      	cmp	r3, r2
  40217c:	d273      	bcs.n	402266 <_malloc_r+0x476>
  40217e:	6889      	ldr	r1, [r1, #8]
  402180:	458c      	cmp	ip, r1
  402182:	d1f7      	bne.n	402174 <_malloc_r+0x384>
  402184:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402188:	687b      	ldr	r3, [r7, #4]
  40218a:	60e2      	str	r2, [r4, #12]
  40218c:	f8c4 c008 	str.w	ip, [r4, #8]
  402190:	6094      	str	r4, [r2, #8]
  402192:	f8cc 400c 	str.w	r4, [ip, #12]
  402196:	e68f      	b.n	401eb8 <_malloc_r+0xc8>
  402198:	19a1      	adds	r1, r4, r6
  40219a:	f046 0c01 	orr.w	ip, r6, #1
  40219e:	f042 0601 	orr.w	r6, r2, #1
  4021a2:	f8c4 c004 	str.w	ip, [r4, #4]
  4021a6:	4628      	mov	r0, r5
  4021a8:	6179      	str	r1, [r7, #20]
  4021aa:	6139      	str	r1, [r7, #16]
  4021ac:	f8c1 e00c 	str.w	lr, [r1, #12]
  4021b0:	f8c1 e008 	str.w	lr, [r1, #8]
  4021b4:	604e      	str	r6, [r1, #4]
  4021b6:	50e2      	str	r2, [r4, r3]
  4021b8:	f000 fa1e 	bl	4025f8 <__malloc_unlock>
  4021bc:	3408      	adds	r4, #8
  4021be:	e6dd      	b.n	401f7c <_malloc_r+0x18c>
  4021c0:	687b      	ldr	r3, [r7, #4]
  4021c2:	e679      	b.n	401eb8 <_malloc_r+0xc8>
  4021c4:	f108 0801 	add.w	r8, r8, #1
  4021c8:	f018 0f03 	tst.w	r8, #3
  4021cc:	f10c 0c08 	add.w	ip, ip, #8
  4021d0:	f47f ae85 	bne.w	401ede <_malloc_r+0xee>
  4021d4:	e02d      	b.n	402232 <_malloc_r+0x442>
  4021d6:	68dc      	ldr	r4, [r3, #12]
  4021d8:	42a3      	cmp	r3, r4
  4021da:	bf08      	it	eq
  4021dc:	3002      	addeq	r0, #2
  4021de:	f43f ae3e 	beq.w	401e5e <_malloc_r+0x6e>
  4021e2:	e6bb      	b.n	401f5c <_malloc_r+0x16c>
  4021e4:	4419      	add	r1, r3
  4021e6:	461c      	mov	r4, r3
  4021e8:	684a      	ldr	r2, [r1, #4]
  4021ea:	68db      	ldr	r3, [r3, #12]
  4021ec:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4021f0:	f042 0201 	orr.w	r2, r2, #1
  4021f4:	604a      	str	r2, [r1, #4]
  4021f6:	4628      	mov	r0, r5
  4021f8:	60f3      	str	r3, [r6, #12]
  4021fa:	609e      	str	r6, [r3, #8]
  4021fc:	f000 f9fc 	bl	4025f8 <__malloc_unlock>
  402200:	e6bc      	b.n	401f7c <_malloc_r+0x18c>
  402202:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402206:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40220a:	00c3      	lsls	r3, r0, #3
  40220c:	e612      	b.n	401e34 <_malloc_r+0x44>
  40220e:	099a      	lsrs	r2, r3, #6
  402210:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402214:	00c9      	lsls	r1, r1, #3
  402216:	3238      	adds	r2, #56	; 0x38
  402218:	e7a4      	b.n	402164 <_malloc_r+0x374>
  40221a:	42bc      	cmp	r4, r7
  40221c:	d054      	beq.n	4022c8 <_malloc_r+0x4d8>
  40221e:	68bc      	ldr	r4, [r7, #8]
  402220:	6862      	ldr	r2, [r4, #4]
  402222:	f022 0203 	bic.w	r2, r2, #3
  402226:	e75d      	b.n	4020e4 <_malloc_r+0x2f4>
  402228:	f859 3908 	ldr.w	r3, [r9], #-8
  40222c:	4599      	cmp	r9, r3
  40222e:	f040 8086 	bne.w	40233e <_malloc_r+0x54e>
  402232:	f010 0f03 	tst.w	r0, #3
  402236:	f100 30ff 	add.w	r0, r0, #4294967295
  40223a:	d1f5      	bne.n	402228 <_malloc_r+0x438>
  40223c:	687b      	ldr	r3, [r7, #4]
  40223e:	ea23 0304 	bic.w	r3, r3, r4
  402242:	607b      	str	r3, [r7, #4]
  402244:	0064      	lsls	r4, r4, #1
  402246:	429c      	cmp	r4, r3
  402248:	f63f aec7 	bhi.w	401fda <_malloc_r+0x1ea>
  40224c:	2c00      	cmp	r4, #0
  40224e:	f43f aec4 	beq.w	401fda <_malloc_r+0x1ea>
  402252:	421c      	tst	r4, r3
  402254:	4640      	mov	r0, r8
  402256:	f47f ae3e 	bne.w	401ed6 <_malloc_r+0xe6>
  40225a:	0064      	lsls	r4, r4, #1
  40225c:	421c      	tst	r4, r3
  40225e:	f100 0004 	add.w	r0, r0, #4
  402262:	d0fa      	beq.n	40225a <_malloc_r+0x46a>
  402264:	e637      	b.n	401ed6 <_malloc_r+0xe6>
  402266:	468c      	mov	ip, r1
  402268:	e78c      	b.n	402184 <_malloc_r+0x394>
  40226a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40226e:	d815      	bhi.n	40229c <_malloc_r+0x4ac>
  402270:	0bf3      	lsrs	r3, r6, #15
  402272:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402276:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40227a:	00c3      	lsls	r3, r0, #3
  40227c:	e5da      	b.n	401e34 <_malloc_r+0x44>
  40227e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402282:	e6ed      	b.n	402060 <_malloc_r+0x270>
  402284:	687b      	ldr	r3, [r7, #4]
  402286:	1092      	asrs	r2, r2, #2
  402288:	2101      	movs	r1, #1
  40228a:	fa01 f202 	lsl.w	r2, r1, r2
  40228e:	4313      	orrs	r3, r2
  402290:	607b      	str	r3, [r7, #4]
  402292:	4662      	mov	r2, ip
  402294:	e779      	b.n	40218a <_malloc_r+0x39a>
  402296:	2301      	movs	r3, #1
  402298:	6053      	str	r3, [r2, #4]
  40229a:	e729      	b.n	4020f0 <_malloc_r+0x300>
  40229c:	f240 5254 	movw	r2, #1364	; 0x554
  4022a0:	4293      	cmp	r3, r2
  4022a2:	d822      	bhi.n	4022ea <_malloc_r+0x4fa>
  4022a4:	0cb3      	lsrs	r3, r6, #18
  4022a6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4022aa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4022ae:	00c3      	lsls	r3, r0, #3
  4022b0:	e5c0      	b.n	401e34 <_malloc_r+0x44>
  4022b2:	f103 0b10 	add.w	fp, r3, #16
  4022b6:	e6ae      	b.n	402016 <_malloc_r+0x226>
  4022b8:	2a54      	cmp	r2, #84	; 0x54
  4022ba:	d829      	bhi.n	402310 <_malloc_r+0x520>
  4022bc:	0b1a      	lsrs	r2, r3, #12
  4022be:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4022c2:	00c9      	lsls	r1, r1, #3
  4022c4:	326e      	adds	r2, #110	; 0x6e
  4022c6:	e74d      	b.n	402164 <_malloc_r+0x374>
  4022c8:	4b20      	ldr	r3, [pc, #128]	; (40234c <_malloc_r+0x55c>)
  4022ca:	6819      	ldr	r1, [r3, #0]
  4022cc:	4459      	add	r1, fp
  4022ce:	6019      	str	r1, [r3, #0]
  4022d0:	e6b2      	b.n	402038 <_malloc_r+0x248>
  4022d2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4022d6:	2800      	cmp	r0, #0
  4022d8:	f47f aeae 	bne.w	402038 <_malloc_r+0x248>
  4022dc:	eb08 030b 	add.w	r3, r8, fp
  4022e0:	68ba      	ldr	r2, [r7, #8]
  4022e2:	f043 0301 	orr.w	r3, r3, #1
  4022e6:	6053      	str	r3, [r2, #4]
  4022e8:	e6ee      	b.n	4020c8 <_malloc_r+0x2d8>
  4022ea:	207f      	movs	r0, #127	; 0x7f
  4022ec:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4022f0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4022f4:	e59e      	b.n	401e34 <_malloc_r+0x44>
  4022f6:	f104 0108 	add.w	r1, r4, #8
  4022fa:	4628      	mov	r0, r5
  4022fc:	9300      	str	r3, [sp, #0]
  4022fe:	f7ff fa49 	bl	401794 <_free_r>
  402302:	9b00      	ldr	r3, [sp, #0]
  402304:	6819      	ldr	r1, [r3, #0]
  402306:	e6df      	b.n	4020c8 <_malloc_r+0x2d8>
  402308:	2001      	movs	r0, #1
  40230a:	f04f 0900 	mov.w	r9, #0
  40230e:	e6bc      	b.n	40208a <_malloc_r+0x29a>
  402310:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402314:	d805      	bhi.n	402322 <_malloc_r+0x532>
  402316:	0bda      	lsrs	r2, r3, #15
  402318:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40231c:	00c9      	lsls	r1, r1, #3
  40231e:	3277      	adds	r2, #119	; 0x77
  402320:	e720      	b.n	402164 <_malloc_r+0x374>
  402322:	f240 5154 	movw	r1, #1364	; 0x554
  402326:	428a      	cmp	r2, r1
  402328:	d805      	bhi.n	402336 <_malloc_r+0x546>
  40232a:	0c9a      	lsrs	r2, r3, #18
  40232c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402330:	00c9      	lsls	r1, r1, #3
  402332:	327c      	adds	r2, #124	; 0x7c
  402334:	e716      	b.n	402164 <_malloc_r+0x374>
  402336:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40233a:	227e      	movs	r2, #126	; 0x7e
  40233c:	e712      	b.n	402164 <_malloc_r+0x374>
  40233e:	687b      	ldr	r3, [r7, #4]
  402340:	e780      	b.n	402244 <_malloc_r+0x454>
  402342:	08f0      	lsrs	r0, r6, #3
  402344:	f106 0308 	add.w	r3, r6, #8
  402348:	e600      	b.n	401f4c <_malloc_r+0x15c>
  40234a:	bf00      	nop
  40234c:	204008e8 	.word	0x204008e8

00402350 <memchr>:
  402350:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402354:	2a10      	cmp	r2, #16
  402356:	db2b      	blt.n	4023b0 <memchr+0x60>
  402358:	f010 0f07 	tst.w	r0, #7
  40235c:	d008      	beq.n	402370 <memchr+0x20>
  40235e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402362:	3a01      	subs	r2, #1
  402364:	428b      	cmp	r3, r1
  402366:	d02d      	beq.n	4023c4 <memchr+0x74>
  402368:	f010 0f07 	tst.w	r0, #7
  40236c:	b342      	cbz	r2, 4023c0 <memchr+0x70>
  40236e:	d1f6      	bne.n	40235e <memchr+0xe>
  402370:	b4f0      	push	{r4, r5, r6, r7}
  402372:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402376:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40237a:	f022 0407 	bic.w	r4, r2, #7
  40237e:	f07f 0700 	mvns.w	r7, #0
  402382:	2300      	movs	r3, #0
  402384:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402388:	3c08      	subs	r4, #8
  40238a:	ea85 0501 	eor.w	r5, r5, r1
  40238e:	ea86 0601 	eor.w	r6, r6, r1
  402392:	fa85 f547 	uadd8	r5, r5, r7
  402396:	faa3 f587 	sel	r5, r3, r7
  40239a:	fa86 f647 	uadd8	r6, r6, r7
  40239e:	faa5 f687 	sel	r6, r5, r7
  4023a2:	b98e      	cbnz	r6, 4023c8 <memchr+0x78>
  4023a4:	d1ee      	bne.n	402384 <memchr+0x34>
  4023a6:	bcf0      	pop	{r4, r5, r6, r7}
  4023a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4023ac:	f002 0207 	and.w	r2, r2, #7
  4023b0:	b132      	cbz	r2, 4023c0 <memchr+0x70>
  4023b2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4023b6:	3a01      	subs	r2, #1
  4023b8:	ea83 0301 	eor.w	r3, r3, r1
  4023bc:	b113      	cbz	r3, 4023c4 <memchr+0x74>
  4023be:	d1f8      	bne.n	4023b2 <memchr+0x62>
  4023c0:	2000      	movs	r0, #0
  4023c2:	4770      	bx	lr
  4023c4:	3801      	subs	r0, #1
  4023c6:	4770      	bx	lr
  4023c8:	2d00      	cmp	r5, #0
  4023ca:	bf06      	itte	eq
  4023cc:	4635      	moveq	r5, r6
  4023ce:	3803      	subeq	r0, #3
  4023d0:	3807      	subne	r0, #7
  4023d2:	f015 0f01 	tst.w	r5, #1
  4023d6:	d107      	bne.n	4023e8 <memchr+0x98>
  4023d8:	3001      	adds	r0, #1
  4023da:	f415 7f80 	tst.w	r5, #256	; 0x100
  4023de:	bf02      	ittt	eq
  4023e0:	3001      	addeq	r0, #1
  4023e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4023e6:	3001      	addeq	r0, #1
  4023e8:	bcf0      	pop	{r4, r5, r6, r7}
  4023ea:	3801      	subs	r0, #1
  4023ec:	4770      	bx	lr
  4023ee:	bf00      	nop

004023f0 <memcpy>:
  4023f0:	4684      	mov	ip, r0
  4023f2:	ea41 0300 	orr.w	r3, r1, r0
  4023f6:	f013 0303 	ands.w	r3, r3, #3
  4023fa:	d16d      	bne.n	4024d8 <memcpy+0xe8>
  4023fc:	3a40      	subs	r2, #64	; 0x40
  4023fe:	d341      	bcc.n	402484 <memcpy+0x94>
  402400:	f851 3b04 	ldr.w	r3, [r1], #4
  402404:	f840 3b04 	str.w	r3, [r0], #4
  402408:	f851 3b04 	ldr.w	r3, [r1], #4
  40240c:	f840 3b04 	str.w	r3, [r0], #4
  402410:	f851 3b04 	ldr.w	r3, [r1], #4
  402414:	f840 3b04 	str.w	r3, [r0], #4
  402418:	f851 3b04 	ldr.w	r3, [r1], #4
  40241c:	f840 3b04 	str.w	r3, [r0], #4
  402420:	f851 3b04 	ldr.w	r3, [r1], #4
  402424:	f840 3b04 	str.w	r3, [r0], #4
  402428:	f851 3b04 	ldr.w	r3, [r1], #4
  40242c:	f840 3b04 	str.w	r3, [r0], #4
  402430:	f851 3b04 	ldr.w	r3, [r1], #4
  402434:	f840 3b04 	str.w	r3, [r0], #4
  402438:	f851 3b04 	ldr.w	r3, [r1], #4
  40243c:	f840 3b04 	str.w	r3, [r0], #4
  402440:	f851 3b04 	ldr.w	r3, [r1], #4
  402444:	f840 3b04 	str.w	r3, [r0], #4
  402448:	f851 3b04 	ldr.w	r3, [r1], #4
  40244c:	f840 3b04 	str.w	r3, [r0], #4
  402450:	f851 3b04 	ldr.w	r3, [r1], #4
  402454:	f840 3b04 	str.w	r3, [r0], #4
  402458:	f851 3b04 	ldr.w	r3, [r1], #4
  40245c:	f840 3b04 	str.w	r3, [r0], #4
  402460:	f851 3b04 	ldr.w	r3, [r1], #4
  402464:	f840 3b04 	str.w	r3, [r0], #4
  402468:	f851 3b04 	ldr.w	r3, [r1], #4
  40246c:	f840 3b04 	str.w	r3, [r0], #4
  402470:	f851 3b04 	ldr.w	r3, [r1], #4
  402474:	f840 3b04 	str.w	r3, [r0], #4
  402478:	f851 3b04 	ldr.w	r3, [r1], #4
  40247c:	f840 3b04 	str.w	r3, [r0], #4
  402480:	3a40      	subs	r2, #64	; 0x40
  402482:	d2bd      	bcs.n	402400 <memcpy+0x10>
  402484:	3230      	adds	r2, #48	; 0x30
  402486:	d311      	bcc.n	4024ac <memcpy+0xbc>
  402488:	f851 3b04 	ldr.w	r3, [r1], #4
  40248c:	f840 3b04 	str.w	r3, [r0], #4
  402490:	f851 3b04 	ldr.w	r3, [r1], #4
  402494:	f840 3b04 	str.w	r3, [r0], #4
  402498:	f851 3b04 	ldr.w	r3, [r1], #4
  40249c:	f840 3b04 	str.w	r3, [r0], #4
  4024a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4024a4:	f840 3b04 	str.w	r3, [r0], #4
  4024a8:	3a10      	subs	r2, #16
  4024aa:	d2ed      	bcs.n	402488 <memcpy+0x98>
  4024ac:	320c      	adds	r2, #12
  4024ae:	d305      	bcc.n	4024bc <memcpy+0xcc>
  4024b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4024b4:	f840 3b04 	str.w	r3, [r0], #4
  4024b8:	3a04      	subs	r2, #4
  4024ba:	d2f9      	bcs.n	4024b0 <memcpy+0xc0>
  4024bc:	3204      	adds	r2, #4
  4024be:	d008      	beq.n	4024d2 <memcpy+0xe2>
  4024c0:	07d2      	lsls	r2, r2, #31
  4024c2:	bf1c      	itt	ne
  4024c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4024c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4024cc:	d301      	bcc.n	4024d2 <memcpy+0xe2>
  4024ce:	880b      	ldrh	r3, [r1, #0]
  4024d0:	8003      	strh	r3, [r0, #0]
  4024d2:	4660      	mov	r0, ip
  4024d4:	4770      	bx	lr
  4024d6:	bf00      	nop
  4024d8:	2a08      	cmp	r2, #8
  4024da:	d313      	bcc.n	402504 <memcpy+0x114>
  4024dc:	078b      	lsls	r3, r1, #30
  4024de:	d08d      	beq.n	4023fc <memcpy+0xc>
  4024e0:	f010 0303 	ands.w	r3, r0, #3
  4024e4:	d08a      	beq.n	4023fc <memcpy+0xc>
  4024e6:	f1c3 0304 	rsb	r3, r3, #4
  4024ea:	1ad2      	subs	r2, r2, r3
  4024ec:	07db      	lsls	r3, r3, #31
  4024ee:	bf1c      	itt	ne
  4024f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4024f4:	f800 3b01 	strbne.w	r3, [r0], #1
  4024f8:	d380      	bcc.n	4023fc <memcpy+0xc>
  4024fa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4024fe:	f820 3b02 	strh.w	r3, [r0], #2
  402502:	e77b      	b.n	4023fc <memcpy+0xc>
  402504:	3a04      	subs	r2, #4
  402506:	d3d9      	bcc.n	4024bc <memcpy+0xcc>
  402508:	3a01      	subs	r2, #1
  40250a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40250e:	f800 3b01 	strb.w	r3, [r0], #1
  402512:	d2f9      	bcs.n	402508 <memcpy+0x118>
  402514:	780b      	ldrb	r3, [r1, #0]
  402516:	7003      	strb	r3, [r0, #0]
  402518:	784b      	ldrb	r3, [r1, #1]
  40251a:	7043      	strb	r3, [r0, #1]
  40251c:	788b      	ldrb	r3, [r1, #2]
  40251e:	7083      	strb	r3, [r0, #2]
  402520:	4660      	mov	r0, ip
  402522:	4770      	bx	lr

00402524 <memmove>:
  402524:	4288      	cmp	r0, r1
  402526:	b5f0      	push	{r4, r5, r6, r7, lr}
  402528:	d90d      	bls.n	402546 <memmove+0x22>
  40252a:	188b      	adds	r3, r1, r2
  40252c:	4298      	cmp	r0, r3
  40252e:	d20a      	bcs.n	402546 <memmove+0x22>
  402530:	1884      	adds	r4, r0, r2
  402532:	2a00      	cmp	r2, #0
  402534:	d051      	beq.n	4025da <memmove+0xb6>
  402536:	4622      	mov	r2, r4
  402538:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40253c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  402540:	4299      	cmp	r1, r3
  402542:	d1f9      	bne.n	402538 <memmove+0x14>
  402544:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402546:	2a0f      	cmp	r2, #15
  402548:	d948      	bls.n	4025dc <memmove+0xb8>
  40254a:	ea41 0300 	orr.w	r3, r1, r0
  40254e:	079b      	lsls	r3, r3, #30
  402550:	d146      	bne.n	4025e0 <memmove+0xbc>
  402552:	f100 0410 	add.w	r4, r0, #16
  402556:	f101 0310 	add.w	r3, r1, #16
  40255a:	4615      	mov	r5, r2
  40255c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  402560:	f844 6c10 	str.w	r6, [r4, #-16]
  402564:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  402568:	f844 6c0c 	str.w	r6, [r4, #-12]
  40256c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  402570:	f844 6c08 	str.w	r6, [r4, #-8]
  402574:	3d10      	subs	r5, #16
  402576:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40257a:	f844 6c04 	str.w	r6, [r4, #-4]
  40257e:	2d0f      	cmp	r5, #15
  402580:	f103 0310 	add.w	r3, r3, #16
  402584:	f104 0410 	add.w	r4, r4, #16
  402588:	d8e8      	bhi.n	40255c <memmove+0x38>
  40258a:	f1a2 0310 	sub.w	r3, r2, #16
  40258e:	f023 030f 	bic.w	r3, r3, #15
  402592:	f002 0e0f 	and.w	lr, r2, #15
  402596:	3310      	adds	r3, #16
  402598:	f1be 0f03 	cmp.w	lr, #3
  40259c:	4419      	add	r1, r3
  40259e:	4403      	add	r3, r0
  4025a0:	d921      	bls.n	4025e6 <memmove+0xc2>
  4025a2:	1f1e      	subs	r6, r3, #4
  4025a4:	460d      	mov	r5, r1
  4025a6:	4674      	mov	r4, lr
  4025a8:	3c04      	subs	r4, #4
  4025aa:	f855 7b04 	ldr.w	r7, [r5], #4
  4025ae:	f846 7f04 	str.w	r7, [r6, #4]!
  4025b2:	2c03      	cmp	r4, #3
  4025b4:	d8f8      	bhi.n	4025a8 <memmove+0x84>
  4025b6:	f1ae 0404 	sub.w	r4, lr, #4
  4025ba:	f024 0403 	bic.w	r4, r4, #3
  4025be:	3404      	adds	r4, #4
  4025c0:	4421      	add	r1, r4
  4025c2:	4423      	add	r3, r4
  4025c4:	f002 0203 	and.w	r2, r2, #3
  4025c8:	b162      	cbz	r2, 4025e4 <memmove+0xc0>
  4025ca:	3b01      	subs	r3, #1
  4025cc:	440a      	add	r2, r1
  4025ce:	f811 4b01 	ldrb.w	r4, [r1], #1
  4025d2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4025d6:	428a      	cmp	r2, r1
  4025d8:	d1f9      	bne.n	4025ce <memmove+0xaa>
  4025da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025dc:	4603      	mov	r3, r0
  4025de:	e7f3      	b.n	4025c8 <memmove+0xa4>
  4025e0:	4603      	mov	r3, r0
  4025e2:	e7f2      	b.n	4025ca <memmove+0xa6>
  4025e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025e6:	4672      	mov	r2, lr
  4025e8:	e7ee      	b.n	4025c8 <memmove+0xa4>
  4025ea:	bf00      	nop

004025ec <__malloc_lock>:
  4025ec:	4801      	ldr	r0, [pc, #4]	; (4025f4 <__malloc_lock+0x8>)
  4025ee:	f7fe bd11 	b.w	401014 <__retarget_lock_acquire_recursive>
  4025f2:	bf00      	nop
  4025f4:	2040110c 	.word	0x2040110c

004025f8 <__malloc_unlock>:
  4025f8:	4801      	ldr	r0, [pc, #4]	; (402600 <__malloc_unlock+0x8>)
  4025fa:	f7fe bd0d 	b.w	401018 <__retarget_lock_release_recursive>
  4025fe:	bf00      	nop
  402600:	2040110c 	.word	0x2040110c

00402604 <_realloc_r>:
  402604:	2900      	cmp	r1, #0
  402606:	f000 8095 	beq.w	402734 <_realloc_r+0x130>
  40260a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40260e:	460d      	mov	r5, r1
  402610:	4616      	mov	r6, r2
  402612:	b083      	sub	sp, #12
  402614:	4680      	mov	r8, r0
  402616:	f106 070b 	add.w	r7, r6, #11
  40261a:	f7ff ffe7 	bl	4025ec <__malloc_lock>
  40261e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  402622:	2f16      	cmp	r7, #22
  402624:	f02e 0403 	bic.w	r4, lr, #3
  402628:	f1a5 0908 	sub.w	r9, r5, #8
  40262c:	d83c      	bhi.n	4026a8 <_realloc_r+0xa4>
  40262e:	2210      	movs	r2, #16
  402630:	4617      	mov	r7, r2
  402632:	42be      	cmp	r6, r7
  402634:	d83d      	bhi.n	4026b2 <_realloc_r+0xae>
  402636:	4294      	cmp	r4, r2
  402638:	da43      	bge.n	4026c2 <_realloc_r+0xbe>
  40263a:	4bc4      	ldr	r3, [pc, #784]	; (40294c <_realloc_r+0x348>)
  40263c:	6899      	ldr	r1, [r3, #8]
  40263e:	eb09 0004 	add.w	r0, r9, r4
  402642:	4288      	cmp	r0, r1
  402644:	f000 80b4 	beq.w	4027b0 <_realloc_r+0x1ac>
  402648:	6843      	ldr	r3, [r0, #4]
  40264a:	f023 0101 	bic.w	r1, r3, #1
  40264e:	4401      	add	r1, r0
  402650:	6849      	ldr	r1, [r1, #4]
  402652:	07c9      	lsls	r1, r1, #31
  402654:	d54c      	bpl.n	4026f0 <_realloc_r+0xec>
  402656:	f01e 0f01 	tst.w	lr, #1
  40265a:	f000 809b 	beq.w	402794 <_realloc_r+0x190>
  40265e:	4631      	mov	r1, r6
  402660:	4640      	mov	r0, r8
  402662:	f7ff fbc5 	bl	401df0 <_malloc_r>
  402666:	4606      	mov	r6, r0
  402668:	2800      	cmp	r0, #0
  40266a:	d03a      	beq.n	4026e2 <_realloc_r+0xde>
  40266c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402670:	f023 0301 	bic.w	r3, r3, #1
  402674:	444b      	add	r3, r9
  402676:	f1a0 0208 	sub.w	r2, r0, #8
  40267a:	429a      	cmp	r2, r3
  40267c:	f000 8121 	beq.w	4028c2 <_realloc_r+0x2be>
  402680:	1f22      	subs	r2, r4, #4
  402682:	2a24      	cmp	r2, #36	; 0x24
  402684:	f200 8107 	bhi.w	402896 <_realloc_r+0x292>
  402688:	2a13      	cmp	r2, #19
  40268a:	f200 80db 	bhi.w	402844 <_realloc_r+0x240>
  40268e:	4603      	mov	r3, r0
  402690:	462a      	mov	r2, r5
  402692:	6811      	ldr	r1, [r2, #0]
  402694:	6019      	str	r1, [r3, #0]
  402696:	6851      	ldr	r1, [r2, #4]
  402698:	6059      	str	r1, [r3, #4]
  40269a:	6892      	ldr	r2, [r2, #8]
  40269c:	609a      	str	r2, [r3, #8]
  40269e:	4629      	mov	r1, r5
  4026a0:	4640      	mov	r0, r8
  4026a2:	f7ff f877 	bl	401794 <_free_r>
  4026a6:	e01c      	b.n	4026e2 <_realloc_r+0xde>
  4026a8:	f027 0707 	bic.w	r7, r7, #7
  4026ac:	2f00      	cmp	r7, #0
  4026ae:	463a      	mov	r2, r7
  4026b0:	dabf      	bge.n	402632 <_realloc_r+0x2e>
  4026b2:	2600      	movs	r6, #0
  4026b4:	230c      	movs	r3, #12
  4026b6:	4630      	mov	r0, r6
  4026b8:	f8c8 3000 	str.w	r3, [r8]
  4026bc:	b003      	add	sp, #12
  4026be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c2:	462e      	mov	r6, r5
  4026c4:	1be3      	subs	r3, r4, r7
  4026c6:	2b0f      	cmp	r3, #15
  4026c8:	d81e      	bhi.n	402708 <_realloc_r+0x104>
  4026ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4026ce:	f003 0301 	and.w	r3, r3, #1
  4026d2:	4323      	orrs	r3, r4
  4026d4:	444c      	add	r4, r9
  4026d6:	f8c9 3004 	str.w	r3, [r9, #4]
  4026da:	6863      	ldr	r3, [r4, #4]
  4026dc:	f043 0301 	orr.w	r3, r3, #1
  4026e0:	6063      	str	r3, [r4, #4]
  4026e2:	4640      	mov	r0, r8
  4026e4:	f7ff ff88 	bl	4025f8 <__malloc_unlock>
  4026e8:	4630      	mov	r0, r6
  4026ea:	b003      	add	sp, #12
  4026ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026f0:	f023 0303 	bic.w	r3, r3, #3
  4026f4:	18e1      	adds	r1, r4, r3
  4026f6:	4291      	cmp	r1, r2
  4026f8:	db1f      	blt.n	40273a <_realloc_r+0x136>
  4026fa:	68c3      	ldr	r3, [r0, #12]
  4026fc:	6882      	ldr	r2, [r0, #8]
  4026fe:	462e      	mov	r6, r5
  402700:	60d3      	str	r3, [r2, #12]
  402702:	460c      	mov	r4, r1
  402704:	609a      	str	r2, [r3, #8]
  402706:	e7dd      	b.n	4026c4 <_realloc_r+0xc0>
  402708:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40270c:	eb09 0107 	add.w	r1, r9, r7
  402710:	f002 0201 	and.w	r2, r2, #1
  402714:	444c      	add	r4, r9
  402716:	f043 0301 	orr.w	r3, r3, #1
  40271a:	4317      	orrs	r7, r2
  40271c:	f8c9 7004 	str.w	r7, [r9, #4]
  402720:	604b      	str	r3, [r1, #4]
  402722:	6863      	ldr	r3, [r4, #4]
  402724:	f043 0301 	orr.w	r3, r3, #1
  402728:	3108      	adds	r1, #8
  40272a:	6063      	str	r3, [r4, #4]
  40272c:	4640      	mov	r0, r8
  40272e:	f7ff f831 	bl	401794 <_free_r>
  402732:	e7d6      	b.n	4026e2 <_realloc_r+0xde>
  402734:	4611      	mov	r1, r2
  402736:	f7ff bb5b 	b.w	401df0 <_malloc_r>
  40273a:	f01e 0f01 	tst.w	lr, #1
  40273e:	d18e      	bne.n	40265e <_realloc_r+0x5a>
  402740:	f855 1c08 	ldr.w	r1, [r5, #-8]
  402744:	eba9 0a01 	sub.w	sl, r9, r1
  402748:	f8da 1004 	ldr.w	r1, [sl, #4]
  40274c:	f021 0103 	bic.w	r1, r1, #3
  402750:	440b      	add	r3, r1
  402752:	4423      	add	r3, r4
  402754:	4293      	cmp	r3, r2
  402756:	db25      	blt.n	4027a4 <_realloc_r+0x1a0>
  402758:	68c2      	ldr	r2, [r0, #12]
  40275a:	6881      	ldr	r1, [r0, #8]
  40275c:	4656      	mov	r6, sl
  40275e:	60ca      	str	r2, [r1, #12]
  402760:	6091      	str	r1, [r2, #8]
  402762:	f8da 100c 	ldr.w	r1, [sl, #12]
  402766:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40276a:	1f22      	subs	r2, r4, #4
  40276c:	2a24      	cmp	r2, #36	; 0x24
  40276e:	60c1      	str	r1, [r0, #12]
  402770:	6088      	str	r0, [r1, #8]
  402772:	f200 8094 	bhi.w	40289e <_realloc_r+0x29a>
  402776:	2a13      	cmp	r2, #19
  402778:	d96f      	bls.n	40285a <_realloc_r+0x256>
  40277a:	6829      	ldr	r1, [r5, #0]
  40277c:	f8ca 1008 	str.w	r1, [sl, #8]
  402780:	6869      	ldr	r1, [r5, #4]
  402782:	f8ca 100c 	str.w	r1, [sl, #12]
  402786:	2a1b      	cmp	r2, #27
  402788:	f200 80a2 	bhi.w	4028d0 <_realloc_r+0x2cc>
  40278c:	3508      	adds	r5, #8
  40278e:	f10a 0210 	add.w	r2, sl, #16
  402792:	e063      	b.n	40285c <_realloc_r+0x258>
  402794:	f855 3c08 	ldr.w	r3, [r5, #-8]
  402798:	eba9 0a03 	sub.w	sl, r9, r3
  40279c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4027a0:	f021 0103 	bic.w	r1, r1, #3
  4027a4:	1863      	adds	r3, r4, r1
  4027a6:	4293      	cmp	r3, r2
  4027a8:	f6ff af59 	blt.w	40265e <_realloc_r+0x5a>
  4027ac:	4656      	mov	r6, sl
  4027ae:	e7d8      	b.n	402762 <_realloc_r+0x15e>
  4027b0:	6841      	ldr	r1, [r0, #4]
  4027b2:	f021 0b03 	bic.w	fp, r1, #3
  4027b6:	44a3      	add	fp, r4
  4027b8:	f107 0010 	add.w	r0, r7, #16
  4027bc:	4583      	cmp	fp, r0
  4027be:	da56      	bge.n	40286e <_realloc_r+0x26a>
  4027c0:	f01e 0f01 	tst.w	lr, #1
  4027c4:	f47f af4b 	bne.w	40265e <_realloc_r+0x5a>
  4027c8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4027cc:	eba9 0a01 	sub.w	sl, r9, r1
  4027d0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4027d4:	f021 0103 	bic.w	r1, r1, #3
  4027d8:	448b      	add	fp, r1
  4027da:	4558      	cmp	r0, fp
  4027dc:	dce2      	bgt.n	4027a4 <_realloc_r+0x1a0>
  4027de:	4656      	mov	r6, sl
  4027e0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4027e4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4027e8:	1f22      	subs	r2, r4, #4
  4027ea:	2a24      	cmp	r2, #36	; 0x24
  4027ec:	60c1      	str	r1, [r0, #12]
  4027ee:	6088      	str	r0, [r1, #8]
  4027f0:	f200 808f 	bhi.w	402912 <_realloc_r+0x30e>
  4027f4:	2a13      	cmp	r2, #19
  4027f6:	f240 808a 	bls.w	40290e <_realloc_r+0x30a>
  4027fa:	6829      	ldr	r1, [r5, #0]
  4027fc:	f8ca 1008 	str.w	r1, [sl, #8]
  402800:	6869      	ldr	r1, [r5, #4]
  402802:	f8ca 100c 	str.w	r1, [sl, #12]
  402806:	2a1b      	cmp	r2, #27
  402808:	f200 808a 	bhi.w	402920 <_realloc_r+0x31c>
  40280c:	3508      	adds	r5, #8
  40280e:	f10a 0210 	add.w	r2, sl, #16
  402812:	6829      	ldr	r1, [r5, #0]
  402814:	6011      	str	r1, [r2, #0]
  402816:	6869      	ldr	r1, [r5, #4]
  402818:	6051      	str	r1, [r2, #4]
  40281a:	68a9      	ldr	r1, [r5, #8]
  40281c:	6091      	str	r1, [r2, #8]
  40281e:	eb0a 0107 	add.w	r1, sl, r7
  402822:	ebab 0207 	sub.w	r2, fp, r7
  402826:	f042 0201 	orr.w	r2, r2, #1
  40282a:	6099      	str	r1, [r3, #8]
  40282c:	604a      	str	r2, [r1, #4]
  40282e:	f8da 3004 	ldr.w	r3, [sl, #4]
  402832:	f003 0301 	and.w	r3, r3, #1
  402836:	431f      	orrs	r7, r3
  402838:	4640      	mov	r0, r8
  40283a:	f8ca 7004 	str.w	r7, [sl, #4]
  40283e:	f7ff fedb 	bl	4025f8 <__malloc_unlock>
  402842:	e751      	b.n	4026e8 <_realloc_r+0xe4>
  402844:	682b      	ldr	r3, [r5, #0]
  402846:	6003      	str	r3, [r0, #0]
  402848:	686b      	ldr	r3, [r5, #4]
  40284a:	6043      	str	r3, [r0, #4]
  40284c:	2a1b      	cmp	r2, #27
  40284e:	d82d      	bhi.n	4028ac <_realloc_r+0x2a8>
  402850:	f100 0308 	add.w	r3, r0, #8
  402854:	f105 0208 	add.w	r2, r5, #8
  402858:	e71b      	b.n	402692 <_realloc_r+0x8e>
  40285a:	4632      	mov	r2, r6
  40285c:	6829      	ldr	r1, [r5, #0]
  40285e:	6011      	str	r1, [r2, #0]
  402860:	6869      	ldr	r1, [r5, #4]
  402862:	6051      	str	r1, [r2, #4]
  402864:	68a9      	ldr	r1, [r5, #8]
  402866:	6091      	str	r1, [r2, #8]
  402868:	461c      	mov	r4, r3
  40286a:	46d1      	mov	r9, sl
  40286c:	e72a      	b.n	4026c4 <_realloc_r+0xc0>
  40286e:	eb09 0107 	add.w	r1, r9, r7
  402872:	ebab 0b07 	sub.w	fp, fp, r7
  402876:	f04b 0201 	orr.w	r2, fp, #1
  40287a:	6099      	str	r1, [r3, #8]
  40287c:	604a      	str	r2, [r1, #4]
  40287e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  402882:	f003 0301 	and.w	r3, r3, #1
  402886:	431f      	orrs	r7, r3
  402888:	4640      	mov	r0, r8
  40288a:	f845 7c04 	str.w	r7, [r5, #-4]
  40288e:	f7ff feb3 	bl	4025f8 <__malloc_unlock>
  402892:	462e      	mov	r6, r5
  402894:	e728      	b.n	4026e8 <_realloc_r+0xe4>
  402896:	4629      	mov	r1, r5
  402898:	f7ff fe44 	bl	402524 <memmove>
  40289c:	e6ff      	b.n	40269e <_realloc_r+0x9a>
  40289e:	4629      	mov	r1, r5
  4028a0:	4630      	mov	r0, r6
  4028a2:	461c      	mov	r4, r3
  4028a4:	46d1      	mov	r9, sl
  4028a6:	f7ff fe3d 	bl	402524 <memmove>
  4028aa:	e70b      	b.n	4026c4 <_realloc_r+0xc0>
  4028ac:	68ab      	ldr	r3, [r5, #8]
  4028ae:	6083      	str	r3, [r0, #8]
  4028b0:	68eb      	ldr	r3, [r5, #12]
  4028b2:	60c3      	str	r3, [r0, #12]
  4028b4:	2a24      	cmp	r2, #36	; 0x24
  4028b6:	d017      	beq.n	4028e8 <_realloc_r+0x2e4>
  4028b8:	f100 0310 	add.w	r3, r0, #16
  4028bc:	f105 0210 	add.w	r2, r5, #16
  4028c0:	e6e7      	b.n	402692 <_realloc_r+0x8e>
  4028c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4028c6:	f023 0303 	bic.w	r3, r3, #3
  4028ca:	441c      	add	r4, r3
  4028cc:	462e      	mov	r6, r5
  4028ce:	e6f9      	b.n	4026c4 <_realloc_r+0xc0>
  4028d0:	68a9      	ldr	r1, [r5, #8]
  4028d2:	f8ca 1010 	str.w	r1, [sl, #16]
  4028d6:	68e9      	ldr	r1, [r5, #12]
  4028d8:	f8ca 1014 	str.w	r1, [sl, #20]
  4028dc:	2a24      	cmp	r2, #36	; 0x24
  4028de:	d00c      	beq.n	4028fa <_realloc_r+0x2f6>
  4028e0:	3510      	adds	r5, #16
  4028e2:	f10a 0218 	add.w	r2, sl, #24
  4028e6:	e7b9      	b.n	40285c <_realloc_r+0x258>
  4028e8:	692b      	ldr	r3, [r5, #16]
  4028ea:	6103      	str	r3, [r0, #16]
  4028ec:	696b      	ldr	r3, [r5, #20]
  4028ee:	6143      	str	r3, [r0, #20]
  4028f0:	f105 0218 	add.w	r2, r5, #24
  4028f4:	f100 0318 	add.w	r3, r0, #24
  4028f8:	e6cb      	b.n	402692 <_realloc_r+0x8e>
  4028fa:	692a      	ldr	r2, [r5, #16]
  4028fc:	f8ca 2018 	str.w	r2, [sl, #24]
  402900:	696a      	ldr	r2, [r5, #20]
  402902:	f8ca 201c 	str.w	r2, [sl, #28]
  402906:	3518      	adds	r5, #24
  402908:	f10a 0220 	add.w	r2, sl, #32
  40290c:	e7a6      	b.n	40285c <_realloc_r+0x258>
  40290e:	4632      	mov	r2, r6
  402910:	e77f      	b.n	402812 <_realloc_r+0x20e>
  402912:	4629      	mov	r1, r5
  402914:	4630      	mov	r0, r6
  402916:	9301      	str	r3, [sp, #4]
  402918:	f7ff fe04 	bl	402524 <memmove>
  40291c:	9b01      	ldr	r3, [sp, #4]
  40291e:	e77e      	b.n	40281e <_realloc_r+0x21a>
  402920:	68a9      	ldr	r1, [r5, #8]
  402922:	f8ca 1010 	str.w	r1, [sl, #16]
  402926:	68e9      	ldr	r1, [r5, #12]
  402928:	f8ca 1014 	str.w	r1, [sl, #20]
  40292c:	2a24      	cmp	r2, #36	; 0x24
  40292e:	d003      	beq.n	402938 <_realloc_r+0x334>
  402930:	3510      	adds	r5, #16
  402932:	f10a 0218 	add.w	r2, sl, #24
  402936:	e76c      	b.n	402812 <_realloc_r+0x20e>
  402938:	692a      	ldr	r2, [r5, #16]
  40293a:	f8ca 2018 	str.w	r2, [sl, #24]
  40293e:	696a      	ldr	r2, [r5, #20]
  402940:	f8ca 201c 	str.w	r2, [sl, #28]
  402944:	3518      	adds	r5, #24
  402946:	f10a 0220 	add.w	r2, sl, #32
  40294a:	e762      	b.n	402812 <_realloc_r+0x20e>
  40294c:	2040043c 	.word	0x2040043c

00402950 <lflush>:
  402950:	8983      	ldrh	r3, [r0, #12]
  402952:	f003 0309 	and.w	r3, r3, #9
  402956:	2b09      	cmp	r3, #9
  402958:	d001      	beq.n	40295e <lflush+0xe>
  40295a:	2000      	movs	r0, #0
  40295c:	4770      	bx	lr
  40295e:	f7fe be37 	b.w	4015d0 <fflush>
  402962:	bf00      	nop

00402964 <__srefill_r>:
  402964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402966:	460c      	mov	r4, r1
  402968:	4605      	mov	r5, r0
  40296a:	b110      	cbz	r0, 402972 <__srefill_r+0xe>
  40296c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40296e:	2b00      	cmp	r3, #0
  402970:	d045      	beq.n	4029fe <__srefill_r+0x9a>
  402972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402976:	b29a      	uxth	r2, r3
  402978:	0497      	lsls	r7, r2, #18
  40297a:	d407      	bmi.n	40298c <__srefill_r+0x28>
  40297c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40297e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402986:	6662      	str	r2, [r4, #100]	; 0x64
  402988:	81a3      	strh	r3, [r4, #12]
  40298a:	b29a      	uxth	r2, r3
  40298c:	2100      	movs	r1, #0
  40298e:	0696      	lsls	r6, r2, #26
  402990:	6061      	str	r1, [r4, #4]
  402992:	d431      	bmi.n	4029f8 <__srefill_r+0x94>
  402994:	0750      	lsls	r0, r2, #29
  402996:	d522      	bpl.n	4029de <__srefill_r+0x7a>
  402998:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40299a:	b161      	cbz	r1, 4029b6 <__srefill_r+0x52>
  40299c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4029a0:	4299      	cmp	r1, r3
  4029a2:	d002      	beq.n	4029aa <__srefill_r+0x46>
  4029a4:	4628      	mov	r0, r5
  4029a6:	f7fe fef5 	bl	401794 <_free_r>
  4029aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4029ac:	6063      	str	r3, [r4, #4]
  4029ae:	2000      	movs	r0, #0
  4029b0:	6320      	str	r0, [r4, #48]	; 0x30
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	d13f      	bne.n	402a36 <__srefill_r+0xd2>
  4029b6:	6923      	ldr	r3, [r4, #16]
  4029b8:	2b00      	cmp	r3, #0
  4029ba:	d04c      	beq.n	402a56 <__srefill_r+0xf2>
  4029bc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  4029c0:	b2be      	uxth	r6, r7
  4029c2:	07b3      	lsls	r3, r6, #30
  4029c4:	d11e      	bne.n	402a04 <__srefill_r+0xa0>
  4029c6:	6922      	ldr	r2, [r4, #16]
  4029c8:	6022      	str	r2, [r4, #0]
  4029ca:	4628      	mov	r0, r5
  4029cc:	6963      	ldr	r3, [r4, #20]
  4029ce:	6a25      	ldr	r5, [r4, #32]
  4029d0:	69e1      	ldr	r1, [r4, #28]
  4029d2:	47a8      	blx	r5
  4029d4:	2800      	cmp	r0, #0
  4029d6:	6060      	str	r0, [r4, #4]
  4029d8:	dd09      	ble.n	4029ee <__srefill_r+0x8a>
  4029da:	2000      	movs	r0, #0
  4029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029de:	06d1      	lsls	r1, r2, #27
  4029e0:	d53e      	bpl.n	402a60 <__srefill_r+0xfc>
  4029e2:	0712      	lsls	r2, r2, #28
  4029e4:	d42a      	bmi.n	402a3c <__srefill_r+0xd8>
  4029e6:	f043 0304 	orr.w	r3, r3, #4
  4029ea:	81a3      	strh	r3, [r4, #12]
  4029ec:	e7e3      	b.n	4029b6 <__srefill_r+0x52>
  4029ee:	89a3      	ldrh	r3, [r4, #12]
  4029f0:	d119      	bne.n	402a26 <__srefill_r+0xc2>
  4029f2:	f043 0320 	orr.w	r3, r3, #32
  4029f6:	81a3      	strh	r3, [r4, #12]
  4029f8:	f04f 30ff 	mov.w	r0, #4294967295
  4029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029fe:	f7fe fe27 	bl	401650 <__sinit>
  402a02:	e7b6      	b.n	402972 <__srefill_r+0xe>
  402a04:	4b1a      	ldr	r3, [pc, #104]	; (402a70 <__srefill_r+0x10c>)
  402a06:	491b      	ldr	r1, [pc, #108]	; (402a74 <__srefill_r+0x110>)
  402a08:	6818      	ldr	r0, [r3, #0]
  402a0a:	2301      	movs	r3, #1
  402a0c:	81a3      	strh	r3, [r4, #12]
  402a0e:	f006 0609 	and.w	r6, r6, #9
  402a12:	f7ff f91d 	bl	401c50 <_fwalk>
  402a16:	2e09      	cmp	r6, #9
  402a18:	81a7      	strh	r7, [r4, #12]
  402a1a:	d1d4      	bne.n	4029c6 <__srefill_r+0x62>
  402a1c:	4621      	mov	r1, r4
  402a1e:	4628      	mov	r0, r5
  402a20:	f7fe fd0c 	bl	40143c <__sflush_r>
  402a24:	e7cf      	b.n	4029c6 <__srefill_r+0x62>
  402a26:	2200      	movs	r2, #0
  402a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a2c:	81a3      	strh	r3, [r4, #12]
  402a2e:	6062      	str	r2, [r4, #4]
  402a30:	f04f 30ff 	mov.w	r0, #4294967295
  402a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402a38:	6023      	str	r3, [r4, #0]
  402a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a3c:	4621      	mov	r1, r4
  402a3e:	4628      	mov	r0, r5
  402a40:	f7fe fd9c 	bl	40157c <_fflush_r>
  402a44:	2800      	cmp	r0, #0
  402a46:	d1d7      	bne.n	4029f8 <__srefill_r+0x94>
  402a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a4c:	60a0      	str	r0, [r4, #8]
  402a4e:	61a0      	str	r0, [r4, #24]
  402a50:	f023 0308 	bic.w	r3, r3, #8
  402a54:	e7c7      	b.n	4029e6 <__srefill_r+0x82>
  402a56:	4621      	mov	r1, r4
  402a58:	4628      	mov	r0, r5
  402a5a:	f7ff f977 	bl	401d4c <__smakebuf_r>
  402a5e:	e7ad      	b.n	4029bc <__srefill_r+0x58>
  402a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a64:	2209      	movs	r2, #9
  402a66:	602a      	str	r2, [r5, #0]
  402a68:	f04f 30ff 	mov.w	r0, #4294967295
  402a6c:	81a3      	strh	r3, [r4, #12]
  402a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a70:	00402f4c 	.word	0x00402f4c
  402a74:	00402951 	.word	0x00402951

00402a78 <_sbrk_r>:
  402a78:	b538      	push	{r3, r4, r5, lr}
  402a7a:	4c07      	ldr	r4, [pc, #28]	; (402a98 <_sbrk_r+0x20>)
  402a7c:	2300      	movs	r3, #0
  402a7e:	4605      	mov	r5, r0
  402a80:	4608      	mov	r0, r1
  402a82:	6023      	str	r3, [r4, #0]
  402a84:	f7fe f808 	bl	400a98 <_sbrk>
  402a88:	1c43      	adds	r3, r0, #1
  402a8a:	d000      	beq.n	402a8e <_sbrk_r+0x16>
  402a8c:	bd38      	pop	{r3, r4, r5, pc}
  402a8e:	6823      	ldr	r3, [r4, #0]
  402a90:	2b00      	cmp	r3, #0
  402a92:	d0fb      	beq.n	402a8c <_sbrk_r+0x14>
  402a94:	602b      	str	r3, [r5, #0]
  402a96:	bd38      	pop	{r3, r4, r5, pc}
  402a98:	20401120 	.word	0x20401120

00402a9c <__sread>:
  402a9c:	b510      	push	{r4, lr}
  402a9e:	460c      	mov	r4, r1
  402aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402aa4:	f000 f9ca 	bl	402e3c <_read_r>
  402aa8:	2800      	cmp	r0, #0
  402aaa:	db03      	blt.n	402ab4 <__sread+0x18>
  402aac:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402aae:	4403      	add	r3, r0
  402ab0:	6523      	str	r3, [r4, #80]	; 0x50
  402ab2:	bd10      	pop	{r4, pc}
  402ab4:	89a3      	ldrh	r3, [r4, #12]
  402ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402aba:	81a3      	strh	r3, [r4, #12]
  402abc:	bd10      	pop	{r4, pc}
  402abe:	bf00      	nop

00402ac0 <__swrite>:
  402ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ac4:	4616      	mov	r6, r2
  402ac6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402aca:	461f      	mov	r7, r3
  402acc:	05d3      	lsls	r3, r2, #23
  402ace:	460c      	mov	r4, r1
  402ad0:	4605      	mov	r5, r0
  402ad2:	d507      	bpl.n	402ae4 <__swrite+0x24>
  402ad4:	2200      	movs	r2, #0
  402ad6:	2302      	movs	r3, #2
  402ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402adc:	f000 f998 	bl	402e10 <_lseek_r>
  402ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402ae8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402aec:	81a2      	strh	r2, [r4, #12]
  402aee:	463b      	mov	r3, r7
  402af0:	4632      	mov	r2, r6
  402af2:	4628      	mov	r0, r5
  402af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402af8:	f000 b814 	b.w	402b24 <_write_r>

00402afc <__sseek>:
  402afc:	b510      	push	{r4, lr}
  402afe:	460c      	mov	r4, r1
  402b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402b04:	f000 f984 	bl	402e10 <_lseek_r>
  402b08:	89a3      	ldrh	r3, [r4, #12]
  402b0a:	1c42      	adds	r2, r0, #1
  402b0c:	bf0e      	itee	eq
  402b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402b16:	6520      	strne	r0, [r4, #80]	; 0x50
  402b18:	81a3      	strh	r3, [r4, #12]
  402b1a:	bd10      	pop	{r4, pc}

00402b1c <__sclose>:
  402b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402b20:	f000 b8dc 	b.w	402cdc <_close_r>

00402b24 <_write_r>:
  402b24:	b570      	push	{r4, r5, r6, lr}
  402b26:	460d      	mov	r5, r1
  402b28:	4c08      	ldr	r4, [pc, #32]	; (402b4c <_write_r+0x28>)
  402b2a:	4611      	mov	r1, r2
  402b2c:	4606      	mov	r6, r0
  402b2e:	461a      	mov	r2, r3
  402b30:	4628      	mov	r0, r5
  402b32:	2300      	movs	r3, #0
  402b34:	6023      	str	r3, [r4, #0]
  402b36:	f7fd fba5 	bl	400284 <_write>
  402b3a:	1c43      	adds	r3, r0, #1
  402b3c:	d000      	beq.n	402b40 <_write_r+0x1c>
  402b3e:	bd70      	pop	{r4, r5, r6, pc}
  402b40:	6823      	ldr	r3, [r4, #0]
  402b42:	2b00      	cmp	r3, #0
  402b44:	d0fb      	beq.n	402b3e <_write_r+0x1a>
  402b46:	6033      	str	r3, [r6, #0]
  402b48:	bd70      	pop	{r4, r5, r6, pc}
  402b4a:	bf00      	nop
  402b4c:	20401120 	.word	0x20401120

00402b50 <__swsetup_r>:
  402b50:	b538      	push	{r3, r4, r5, lr}
  402b52:	4b30      	ldr	r3, [pc, #192]	; (402c14 <__swsetup_r+0xc4>)
  402b54:	681b      	ldr	r3, [r3, #0]
  402b56:	4605      	mov	r5, r0
  402b58:	460c      	mov	r4, r1
  402b5a:	b113      	cbz	r3, 402b62 <__swsetup_r+0x12>
  402b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402b5e:	2a00      	cmp	r2, #0
  402b60:	d038      	beq.n	402bd4 <__swsetup_r+0x84>
  402b62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402b66:	b293      	uxth	r3, r2
  402b68:	0718      	lsls	r0, r3, #28
  402b6a:	d50c      	bpl.n	402b86 <__swsetup_r+0x36>
  402b6c:	6920      	ldr	r0, [r4, #16]
  402b6e:	b1a8      	cbz	r0, 402b9c <__swsetup_r+0x4c>
  402b70:	f013 0201 	ands.w	r2, r3, #1
  402b74:	d01e      	beq.n	402bb4 <__swsetup_r+0x64>
  402b76:	6963      	ldr	r3, [r4, #20]
  402b78:	2200      	movs	r2, #0
  402b7a:	425b      	negs	r3, r3
  402b7c:	61a3      	str	r3, [r4, #24]
  402b7e:	60a2      	str	r2, [r4, #8]
  402b80:	b1f0      	cbz	r0, 402bc0 <__swsetup_r+0x70>
  402b82:	2000      	movs	r0, #0
  402b84:	bd38      	pop	{r3, r4, r5, pc}
  402b86:	06d9      	lsls	r1, r3, #27
  402b88:	d53c      	bpl.n	402c04 <__swsetup_r+0xb4>
  402b8a:	0758      	lsls	r0, r3, #29
  402b8c:	d426      	bmi.n	402bdc <__swsetup_r+0x8c>
  402b8e:	6920      	ldr	r0, [r4, #16]
  402b90:	f042 0308 	orr.w	r3, r2, #8
  402b94:	81a3      	strh	r3, [r4, #12]
  402b96:	b29b      	uxth	r3, r3
  402b98:	2800      	cmp	r0, #0
  402b9a:	d1e9      	bne.n	402b70 <__swsetup_r+0x20>
  402b9c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402ba0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402ba4:	d0e4      	beq.n	402b70 <__swsetup_r+0x20>
  402ba6:	4628      	mov	r0, r5
  402ba8:	4621      	mov	r1, r4
  402baa:	f7ff f8cf 	bl	401d4c <__smakebuf_r>
  402bae:	89a3      	ldrh	r3, [r4, #12]
  402bb0:	6920      	ldr	r0, [r4, #16]
  402bb2:	e7dd      	b.n	402b70 <__swsetup_r+0x20>
  402bb4:	0799      	lsls	r1, r3, #30
  402bb6:	bf58      	it	pl
  402bb8:	6962      	ldrpl	r2, [r4, #20]
  402bba:	60a2      	str	r2, [r4, #8]
  402bbc:	2800      	cmp	r0, #0
  402bbe:	d1e0      	bne.n	402b82 <__swsetup_r+0x32>
  402bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bc4:	061a      	lsls	r2, r3, #24
  402bc6:	d5dd      	bpl.n	402b84 <__swsetup_r+0x34>
  402bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402bcc:	81a3      	strh	r3, [r4, #12]
  402bce:	f04f 30ff 	mov.w	r0, #4294967295
  402bd2:	bd38      	pop	{r3, r4, r5, pc}
  402bd4:	4618      	mov	r0, r3
  402bd6:	f7fe fd3b 	bl	401650 <__sinit>
  402bda:	e7c2      	b.n	402b62 <__swsetup_r+0x12>
  402bdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402bde:	b151      	cbz	r1, 402bf6 <__swsetup_r+0xa6>
  402be0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402be4:	4299      	cmp	r1, r3
  402be6:	d004      	beq.n	402bf2 <__swsetup_r+0xa2>
  402be8:	4628      	mov	r0, r5
  402bea:	f7fe fdd3 	bl	401794 <_free_r>
  402bee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402bf2:	2300      	movs	r3, #0
  402bf4:	6323      	str	r3, [r4, #48]	; 0x30
  402bf6:	2300      	movs	r3, #0
  402bf8:	6920      	ldr	r0, [r4, #16]
  402bfa:	6063      	str	r3, [r4, #4]
  402bfc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402c00:	6020      	str	r0, [r4, #0]
  402c02:	e7c5      	b.n	402b90 <__swsetup_r+0x40>
  402c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402c08:	2309      	movs	r3, #9
  402c0a:	602b      	str	r3, [r5, #0]
  402c0c:	f04f 30ff 	mov.w	r0, #4294967295
  402c10:	81a2      	strh	r2, [r4, #12]
  402c12:	bd38      	pop	{r3, r4, r5, pc}
  402c14:	2040000c 	.word	0x2040000c

00402c18 <__register_exitproc>:
  402c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402c1c:	4d2c      	ldr	r5, [pc, #176]	; (402cd0 <__register_exitproc+0xb8>)
  402c1e:	4606      	mov	r6, r0
  402c20:	6828      	ldr	r0, [r5, #0]
  402c22:	4698      	mov	r8, r3
  402c24:	460f      	mov	r7, r1
  402c26:	4691      	mov	r9, r2
  402c28:	f7fe f9f4 	bl	401014 <__retarget_lock_acquire_recursive>
  402c2c:	4b29      	ldr	r3, [pc, #164]	; (402cd4 <__register_exitproc+0xbc>)
  402c2e:	681c      	ldr	r4, [r3, #0]
  402c30:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402c34:	2b00      	cmp	r3, #0
  402c36:	d03e      	beq.n	402cb6 <__register_exitproc+0x9e>
  402c38:	685a      	ldr	r2, [r3, #4]
  402c3a:	2a1f      	cmp	r2, #31
  402c3c:	dc1c      	bgt.n	402c78 <__register_exitproc+0x60>
  402c3e:	f102 0e01 	add.w	lr, r2, #1
  402c42:	b176      	cbz	r6, 402c62 <__register_exitproc+0x4a>
  402c44:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402c48:	2401      	movs	r4, #1
  402c4a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402c4e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402c52:	4094      	lsls	r4, r2
  402c54:	4320      	orrs	r0, r4
  402c56:	2e02      	cmp	r6, #2
  402c58:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402c5c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402c60:	d023      	beq.n	402caa <__register_exitproc+0x92>
  402c62:	3202      	adds	r2, #2
  402c64:	f8c3 e004 	str.w	lr, [r3, #4]
  402c68:	6828      	ldr	r0, [r5, #0]
  402c6a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402c6e:	f7fe f9d3 	bl	401018 <__retarget_lock_release_recursive>
  402c72:	2000      	movs	r0, #0
  402c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c78:	4b17      	ldr	r3, [pc, #92]	; (402cd8 <__register_exitproc+0xc0>)
  402c7a:	b30b      	cbz	r3, 402cc0 <__register_exitproc+0xa8>
  402c7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402c80:	f7ff f8ae 	bl	401de0 <malloc>
  402c84:	4603      	mov	r3, r0
  402c86:	b1d8      	cbz	r0, 402cc0 <__register_exitproc+0xa8>
  402c88:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402c8c:	6002      	str	r2, [r0, #0]
  402c8e:	2100      	movs	r1, #0
  402c90:	6041      	str	r1, [r0, #4]
  402c92:	460a      	mov	r2, r1
  402c94:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402c98:	f04f 0e01 	mov.w	lr, #1
  402c9c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402ca0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402ca4:	2e00      	cmp	r6, #0
  402ca6:	d0dc      	beq.n	402c62 <__register_exitproc+0x4a>
  402ca8:	e7cc      	b.n	402c44 <__register_exitproc+0x2c>
  402caa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402cae:	430c      	orrs	r4, r1
  402cb0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402cb4:	e7d5      	b.n	402c62 <__register_exitproc+0x4a>
  402cb6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402cba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402cbe:	e7bb      	b.n	402c38 <__register_exitproc+0x20>
  402cc0:	6828      	ldr	r0, [r5, #0]
  402cc2:	f7fe f9a9 	bl	401018 <__retarget_lock_release_recursive>
  402cc6:	f04f 30ff 	mov.w	r0, #4294967295
  402cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402cce:	bf00      	nop
  402cd0:	20400438 	.word	0x20400438
  402cd4:	00402f4c 	.word	0x00402f4c
  402cd8:	00401de1 	.word	0x00401de1

00402cdc <_close_r>:
  402cdc:	b538      	push	{r3, r4, r5, lr}
  402cde:	4c07      	ldr	r4, [pc, #28]	; (402cfc <_close_r+0x20>)
  402ce0:	2300      	movs	r3, #0
  402ce2:	4605      	mov	r5, r0
  402ce4:	4608      	mov	r0, r1
  402ce6:	6023      	str	r3, [r4, #0]
  402ce8:	f7fd fef2 	bl	400ad0 <_close>
  402cec:	1c43      	adds	r3, r0, #1
  402cee:	d000      	beq.n	402cf2 <_close_r+0x16>
  402cf0:	bd38      	pop	{r3, r4, r5, pc}
  402cf2:	6823      	ldr	r3, [r4, #0]
  402cf4:	2b00      	cmp	r3, #0
  402cf6:	d0fb      	beq.n	402cf0 <_close_r+0x14>
  402cf8:	602b      	str	r3, [r5, #0]
  402cfa:	bd38      	pop	{r3, r4, r5, pc}
  402cfc:	20401120 	.word	0x20401120

00402d00 <_fclose_r>:
  402d00:	b570      	push	{r4, r5, r6, lr}
  402d02:	b159      	cbz	r1, 402d1c <_fclose_r+0x1c>
  402d04:	4605      	mov	r5, r0
  402d06:	460c      	mov	r4, r1
  402d08:	b110      	cbz	r0, 402d10 <_fclose_r+0x10>
  402d0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402d0c:	2b00      	cmp	r3, #0
  402d0e:	d03c      	beq.n	402d8a <_fclose_r+0x8a>
  402d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d12:	07d8      	lsls	r0, r3, #31
  402d14:	d505      	bpl.n	402d22 <_fclose_r+0x22>
  402d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d1a:	b92b      	cbnz	r3, 402d28 <_fclose_r+0x28>
  402d1c:	2600      	movs	r6, #0
  402d1e:	4630      	mov	r0, r6
  402d20:	bd70      	pop	{r4, r5, r6, pc}
  402d22:	89a3      	ldrh	r3, [r4, #12]
  402d24:	0599      	lsls	r1, r3, #22
  402d26:	d53c      	bpl.n	402da2 <_fclose_r+0xa2>
  402d28:	4621      	mov	r1, r4
  402d2a:	4628      	mov	r0, r5
  402d2c:	f7fe fb86 	bl	40143c <__sflush_r>
  402d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402d32:	4606      	mov	r6, r0
  402d34:	b133      	cbz	r3, 402d44 <_fclose_r+0x44>
  402d36:	69e1      	ldr	r1, [r4, #28]
  402d38:	4628      	mov	r0, r5
  402d3a:	4798      	blx	r3
  402d3c:	2800      	cmp	r0, #0
  402d3e:	bfb8      	it	lt
  402d40:	f04f 36ff 	movlt.w	r6, #4294967295
  402d44:	89a3      	ldrh	r3, [r4, #12]
  402d46:	061a      	lsls	r2, r3, #24
  402d48:	d422      	bmi.n	402d90 <_fclose_r+0x90>
  402d4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402d4c:	b141      	cbz	r1, 402d60 <_fclose_r+0x60>
  402d4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402d52:	4299      	cmp	r1, r3
  402d54:	d002      	beq.n	402d5c <_fclose_r+0x5c>
  402d56:	4628      	mov	r0, r5
  402d58:	f7fe fd1c 	bl	401794 <_free_r>
  402d5c:	2300      	movs	r3, #0
  402d5e:	6323      	str	r3, [r4, #48]	; 0x30
  402d60:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402d62:	b121      	cbz	r1, 402d6e <_fclose_r+0x6e>
  402d64:	4628      	mov	r0, r5
  402d66:	f7fe fd15 	bl	401794 <_free_r>
  402d6a:	2300      	movs	r3, #0
  402d6c:	6463      	str	r3, [r4, #68]	; 0x44
  402d6e:	f7fe fc9b 	bl	4016a8 <__sfp_lock_acquire>
  402d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402d74:	2200      	movs	r2, #0
  402d76:	07db      	lsls	r3, r3, #31
  402d78:	81a2      	strh	r2, [r4, #12]
  402d7a:	d50e      	bpl.n	402d9a <_fclose_r+0x9a>
  402d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d7e:	f7fe f947 	bl	401010 <__retarget_lock_close_recursive>
  402d82:	f7fe fc97 	bl	4016b4 <__sfp_lock_release>
  402d86:	4630      	mov	r0, r6
  402d88:	bd70      	pop	{r4, r5, r6, pc}
  402d8a:	f7fe fc61 	bl	401650 <__sinit>
  402d8e:	e7bf      	b.n	402d10 <_fclose_r+0x10>
  402d90:	6921      	ldr	r1, [r4, #16]
  402d92:	4628      	mov	r0, r5
  402d94:	f7fe fcfe 	bl	401794 <_free_r>
  402d98:	e7d7      	b.n	402d4a <_fclose_r+0x4a>
  402d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402d9c:	f7fe f93c 	bl	401018 <__retarget_lock_release_recursive>
  402da0:	e7ec      	b.n	402d7c <_fclose_r+0x7c>
  402da2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402da4:	f7fe f936 	bl	401014 <__retarget_lock_acquire_recursive>
  402da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402dac:	2b00      	cmp	r3, #0
  402dae:	d1bb      	bne.n	402d28 <_fclose_r+0x28>
  402db0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402db2:	f016 0601 	ands.w	r6, r6, #1
  402db6:	d1b1      	bne.n	402d1c <_fclose_r+0x1c>
  402db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402dba:	f7fe f92d 	bl	401018 <__retarget_lock_release_recursive>
  402dbe:	4630      	mov	r0, r6
  402dc0:	bd70      	pop	{r4, r5, r6, pc}
  402dc2:	bf00      	nop

00402dc4 <_fstat_r>:
  402dc4:	b538      	push	{r3, r4, r5, lr}
  402dc6:	460b      	mov	r3, r1
  402dc8:	4c07      	ldr	r4, [pc, #28]	; (402de8 <_fstat_r+0x24>)
  402dca:	4605      	mov	r5, r0
  402dcc:	4611      	mov	r1, r2
  402dce:	4618      	mov	r0, r3
  402dd0:	2300      	movs	r3, #0
  402dd2:	6023      	str	r3, [r4, #0]
  402dd4:	f7fd fe7f 	bl	400ad6 <_fstat>
  402dd8:	1c43      	adds	r3, r0, #1
  402dda:	d000      	beq.n	402dde <_fstat_r+0x1a>
  402ddc:	bd38      	pop	{r3, r4, r5, pc}
  402dde:	6823      	ldr	r3, [r4, #0]
  402de0:	2b00      	cmp	r3, #0
  402de2:	d0fb      	beq.n	402ddc <_fstat_r+0x18>
  402de4:	602b      	str	r3, [r5, #0]
  402de6:	bd38      	pop	{r3, r4, r5, pc}
  402de8:	20401120 	.word	0x20401120

00402dec <_isatty_r>:
  402dec:	b538      	push	{r3, r4, r5, lr}
  402dee:	4c07      	ldr	r4, [pc, #28]	; (402e0c <_isatty_r+0x20>)
  402df0:	2300      	movs	r3, #0
  402df2:	4605      	mov	r5, r0
  402df4:	4608      	mov	r0, r1
  402df6:	6023      	str	r3, [r4, #0]
  402df8:	f7fd fe72 	bl	400ae0 <_isatty>
  402dfc:	1c43      	adds	r3, r0, #1
  402dfe:	d000      	beq.n	402e02 <_isatty_r+0x16>
  402e00:	bd38      	pop	{r3, r4, r5, pc}
  402e02:	6823      	ldr	r3, [r4, #0]
  402e04:	2b00      	cmp	r3, #0
  402e06:	d0fb      	beq.n	402e00 <_isatty_r+0x14>
  402e08:	602b      	str	r3, [r5, #0]
  402e0a:	bd38      	pop	{r3, r4, r5, pc}
  402e0c:	20401120 	.word	0x20401120

00402e10 <_lseek_r>:
  402e10:	b570      	push	{r4, r5, r6, lr}
  402e12:	460d      	mov	r5, r1
  402e14:	4c08      	ldr	r4, [pc, #32]	; (402e38 <_lseek_r+0x28>)
  402e16:	4611      	mov	r1, r2
  402e18:	4606      	mov	r6, r0
  402e1a:	461a      	mov	r2, r3
  402e1c:	4628      	mov	r0, r5
  402e1e:	2300      	movs	r3, #0
  402e20:	6023      	str	r3, [r4, #0]
  402e22:	f7fd fe5f 	bl	400ae4 <_lseek>
  402e26:	1c43      	adds	r3, r0, #1
  402e28:	d000      	beq.n	402e2c <_lseek_r+0x1c>
  402e2a:	bd70      	pop	{r4, r5, r6, pc}
  402e2c:	6823      	ldr	r3, [r4, #0]
  402e2e:	2b00      	cmp	r3, #0
  402e30:	d0fb      	beq.n	402e2a <_lseek_r+0x1a>
  402e32:	6033      	str	r3, [r6, #0]
  402e34:	bd70      	pop	{r4, r5, r6, pc}
  402e36:	bf00      	nop
  402e38:	20401120 	.word	0x20401120

00402e3c <_read_r>:
  402e3c:	b570      	push	{r4, r5, r6, lr}
  402e3e:	460d      	mov	r5, r1
  402e40:	4c08      	ldr	r4, [pc, #32]	; (402e64 <_read_r+0x28>)
  402e42:	4611      	mov	r1, r2
  402e44:	4606      	mov	r6, r0
  402e46:	461a      	mov	r2, r3
  402e48:	4628      	mov	r0, r5
  402e4a:	2300      	movs	r3, #0
  402e4c:	6023      	str	r3, [r4, #0]
  402e4e:	f7fd f9fb 	bl	400248 <_read>
  402e52:	1c43      	adds	r3, r0, #1
  402e54:	d000      	beq.n	402e58 <_read_r+0x1c>
  402e56:	bd70      	pop	{r4, r5, r6, pc}
  402e58:	6823      	ldr	r3, [r4, #0]
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	d0fb      	beq.n	402e56 <_read_r+0x1a>
  402e5e:	6033      	str	r3, [r6, #0]
  402e60:	bd70      	pop	{r4, r5, r6, pc}
  402e62:	bf00      	nop
  402e64:	20401120 	.word	0x20401120
  402e68:	00002580 	.word	0x00002580
  402e6c:	000000c0 	.word	0x000000c0
  402e70:	00000800 	.word	0x00000800
	...
  402e80:	55202d2d 	.word	0x55202d2d
  402e84:	54524153 	.word	0x54524153
  402e88:	34535220 	.word	0x34535220
  402e8c:	45203538 	.word	0x45203538
  402e90:	706d6178 	.word	0x706d6178
  402e94:	2d20656c 	.word	0x2d20656c
  402e98:	2d0a0d2d 	.word	0x2d0a0d2d
  402e9c:	4153202d 	.word	0x4153202d
  402ea0:	3037454d 	.word	0x3037454d
  402ea4:	4c50582d 	.word	0x4c50582d
  402ea8:	2d2d2044 	.word	0x2d2d2044
  402eac:	2d2d0a0d 	.word	0x2d2d0a0d
  402eb0:	6d6f4320 	.word	0x6d6f4320
  402eb4:	656c6970 	.word	0x656c6970
  402eb8:	4d203a64 	.word	0x4d203a64
  402ebc:	33207961 	.word	0x33207961
  402ec0:	30322031 	.word	0x30322031
  402ec4:	31203931 	.word	0x31203931
  402ec8:	39303a35 	.word	0x39303a35
  402ecc:	2033323a 	.word	0x2033323a
  402ed0:	000d2d2d 	.word	0x000d2d2d
  402ed4:	454d5441 	.word	0x454d5441
  402ed8:	4d41534c 	.word	0x4d41534c
  402edc:	20303745 	.word	0x20303745
  402ee0:	65756c42 	.word	0x65756c42
  402ee4:	746f6f74 	.word	0x746f6f74
  402ee8:	200a2068 	.word	0x200a2068
  402eec:	6c6c6957 	.word	0x6c6c6957
  402ef0:	69727020 	.word	0x69727020
  402ef4:	5320746e 	.word	0x5320746e
  402ef8:	6e697274 	.word	0x6e697274
  402efc:	6e6f2067 	.word	0x6e6f2067
  402f00:	6920796c 	.word	0x6920796c
  402f04:	74692066 	.word	0x74692066
  402f08:	20736920 	.word	0x20736920
  402f0c:	61657267 	.word	0x61657267
  402f10:	20726574 	.word	0x20726574
  402f14:	6e616874 	.word	0x6e616874
  402f18:	00003420 	.word	0x00003420
  402f1c:	65746e45 	.word	0x65746e45
  402f20:	68742072 	.word	0x68742072
  402f24:	74732065 	.word	0x74732065
  402f28:	676e6972 	.word	0x676e6972
  402f2c:	756f7920 	.word	0x756f7920
  402f30:	73697720 	.word	0x73697720
  402f34:	6f742068 	.word	0x6f742068
  402f38:	73696420 	.word	0x73696420
  402f3c:	79616c70 	.word	0x79616c70
  402f40:	00000000 	.word	0x00000000
  402f44:	20444553 	.word	0x20444553
  402f48:	00594f42 	.word	0x00594f42

00402f4c <_global_impure_ptr>:
  402f4c:	20400010 0000000a                       ..@ ....

00402f54 <_init>:
  402f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f56:	bf00      	nop
  402f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402f5a:	bc08      	pop	{r3}
  402f5c:	469e      	mov	lr, r3
  402f5e:	4770      	bx	lr

00402f60 <__init_array_start>:
  402f60:	0040141d 	.word	0x0040141d

00402f64 <__frame_dummy_init_array_entry>:
  402f64:	0040018d                                ..@.

00402f68 <_fini>:
  402f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402f6a:	bf00      	nop
  402f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402f6e:	bc08      	pop	{r3}
  402f70:	469e      	mov	lr, r3
  402f72:	4770      	bx	lr

00402f74 <__fini_array_start>:
  402f74:	00400169 	.word	0x00400169
